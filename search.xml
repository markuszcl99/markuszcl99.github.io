<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>文件系统</title>
      <link href="/wen-jian-xi-tong.html"/>
      <url>/wen-jian-xi-tong.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>新I/O系统</title>
      <link href="/xin-i-o-xi-tong.html"/>
      <url>/xin-i-o-xi-tong.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>标准I/O</title>
      <link href="/biao-zhun-i-o.html"/>
      <url>/biao-zhun-i-o.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>I/O流</title>
      <link href="/i-o-liu.html"/>
      <url>/i-o-liu.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、全文概览"><a href="#一、全文概览" class="headerlink" title="一、全文概览"></a>一、全文概览</h2><blockquote><p>在我们日常工作中，或多或少会对文件进行各种各样的操作。有些我们是亲自去处理的，例如在我工作中，流量读取策略信息时，我们就是将策略存放到本地文件当中，在生成运行时策略信息的时候，我们会先从本地文件中读取；也有些是我们看不到被框架底层封装的，例如日志框架将日志写入磁盘，日志监控读取磁盘文件等操作。这些I/O流的操作涉及我们工作的方方面面，因此对它进行一定的学习是对我们有很大的帮助的，例如顺序读取、随机访问、缓冲、字符、按行读取、按字读取等等。</p></blockquote><p>本文先从基础的I/O流入手，主要介绍包括基于字节的InputStream、OutputStream；基于字符的Reader、Writer以及自成一派的RandomAccessFile，他们的核心函数以及功能扩展的派生类。</p><p><img src="/i-o-liu/I_O%E6%B5%81.png" alt></p><h2 id="二、InputStream"><a href="#二、InputStream" class="headerlink" title="二、InputStream"></a>二、InputStream</h2><blockquote><p>InputStream用于标识哪些从不同源生成的输入类，可能的源包括以下几种：</p><ul><li>字节数组</li><li>字符串对象</li><li>文件</li><li>管道</li><li>其他流组成的序列</li><li>其他源，例如网络连接</li></ul></blockquote><h3 id="1、InputStream核心函数解析"><a href="#1、InputStream核心函数解析" class="headerlink" title="1、InputStream核心函数解析"></a>1、InputStream核心函数解析</h3><p>这里就直接将InputStream抽象类函数粘贴过来，并增加函数功能注释</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">InputStream</span> <span class="token keyword">implements</span> <span class="token class-name">Closeable</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// MAX_SKIP_BUFFER_SIZE is used to determine the maximum buffer size to</span>    <span class="token comment" spellcheck="true">// use when skipping.</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> MAX_SKIP_BUFFER_SIZE <span class="token operator">=</span> <span class="token number">2048</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 从输入流中读取下一个字节的数据。值字节返回为0到255范围内的整数。如果由于已到达流的结尾而没有字节可用，则返回值-1。</span>    <span class="token comment" spellcheck="true">// 此方法将阻塞，直到输入数据可用、检测到流的结尾或引发异常。</span>    <span class="token comment" spellcheck="true">// 细节由子类实现</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">int</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 从输入流中读取一定数量的字节并将其存储到缓冲区数组b中。实际读取的字节数以整数形式返回。</span>      <span class="token comment" spellcheck="true">// 此方法将阻塞，直到输入数据可用、检测到文件结尾或引发异常。</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token keyword">byte</span> b<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">read</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> b<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 从输入流中读取len长度的字节，并将这些内容存储到缓冲b中off偏移处起</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token keyword">byte</span> b<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> off<span class="token punctuation">,</span> <span class="token keyword">int</span> len<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>b <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>off <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> len <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> len <span class="token operator">></span> b<span class="token punctuation">.</span>length <span class="token operator">-</span> off<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IndexOutOfBoundsException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>len <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        b<span class="token punctuation">[</span>off<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span>c<span class="token punctuation">;</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                c <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                b<span class="token punctuation">[</span>off <span class="token operator">+</span> i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span>c<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> ee<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> i<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 在读取字节流时，决定跳过n个字节，但实际上可能会跳过小于n个字节的长度，返回值就是实际跳过的长度</span>    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">skip</span><span class="token punctuation">(</span><span class="token keyword">long</span> n<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token keyword">long</span> remaining <span class="token operator">=</span> n<span class="token punctuation">;</span>        <span class="token keyword">int</span> nr<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> size <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>MAX_SKIP_BUFFER_SIZE<span class="token punctuation">,</span> remaining<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> skipBuffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span>size<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>remaining <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            nr <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span>skipBuffer<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span> remaining<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>nr <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            remaining <span class="token operator">-=</span> nr<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> n <span class="token operator">-</span> remaining<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 返回此输入流在不受阻的情况下能够读取的字节数</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">available</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 关闭此输入流，释放所有该输入流占用的系统资源</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 标记当前读取字节流的位置，方便后续reset重置的时候能够返回到相应的位置继续读取数据</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">mark</span><span class="token punctuation">(</span><span class="token keyword">int</span> readlimit<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 重置</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IOException</span><span class="token punctuation">(</span><span class="token string">"mark/reset not supported"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 表示当前输入流是否支持标记</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">markSupported</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2、ByteArrayInputStream介绍"><a href="#2、ByteArrayInputStream介绍" class="headerlink" title="2、ByteArrayInputStream介绍"></a>2、ByteArrayInputStream介绍</h3><p>InputStream的实现类之一，它是针对字节源生成的输入流，可以使内存中的缓冲区充当InputStream，构造参数为<strong>用于提取出字节的缓冲区</strong>，通过该类链接到FilterInputStream对象中来提供有用的接口</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>markus<span class="token punctuation">.</span>java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>inputstream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>ByteArrayInputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author: markus * @date: 2023/2/5 1:48 PM * @Description: 基于字节数组数据源的输入类示例 * @Blog: http://markuszhang.com * It's my honor to share what I've learned with you! */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ByteArrayInputStreamDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> source <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        ByteArrayInputStream bis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayInputStream</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span>source<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// read 为读取缓冲区的总字节数，如果没有多余可读的字节则返回-1</span>        <span class="token keyword">int</span> read <span class="token operator">=</span> bis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>dest<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>read<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">byte</span> b <span class="token operator">:</span> dest<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>b <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3、StringBufferInputStream介绍-官方已废弃"><a href="#3、StringBufferInputStream介绍-官方已废弃" class="headerlink" title="3、StringBufferInputStream介绍-(官方已废弃)"></a>3、StringBufferInputStream介绍-(官方已废弃)</h3><p>针对字符源构建的输入流</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>markus<span class="token punctuation">.</span>java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>inputstream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>StringBufferInputStream<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author: markus * @date: 2023/2/5 2:24 PM * @Description: 构造字符源的输入流演示 * @Blog: https://markuszhang.com * It's my honor to share what I've learned with you! */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StringBufferInputStreamDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        String text <span class="token operator">=</span> <span class="token string">"Hello,IO"</span><span class="token punctuation">;</span>        StringBufferInputStream stringIs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBufferInputStream</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> destLength <span class="token operator">=</span> stringIs<span class="token punctuation">.</span><span class="token function">available</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span>destLength<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> len <span class="token operator">=</span> stringIs<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>dest<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">byte</span> b <span class="token operator">:</span> dest<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>b <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 控制台</span><span class="token comment" spellcheck="true">/** * 8 * 72 101 108 108 111 44 73 79  * Process finished with exit code 0 */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4、FileInputStream介绍"><a href="#4、FileInputStream介绍" class="headerlink" title="4、FileInputStream介绍"></a>4、FileInputStream介绍</h3><p>FileInputStream是基于文件源来构造的输入源，也是我们在工作中经常见到的类</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>markus<span class="token punctuation">.</span>java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>inputstream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>File<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>FileInputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author: markus * @date: 2023/2/5 2:30 PM * @Description: 构造文件源的输入流演示 * @Blog: https://markuszhang.com * It's my honor to share what I've learned with you! */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FileInputStreamDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        File file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"/Users/zhangchenglong/IdeaProjects/OnJava8-Examples/io/src/main/resources/file.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        FileInputStream fileIs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> fileLen <span class="token operator">=</span> file<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> destLength <span class="token operator">=</span> fileIs<span class="token punctuation">.</span><span class="token function">available</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span>destLength<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> readLen <span class="token operator">=</span> fileIs<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>dest<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>fileLen<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>destLength<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>readLen<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">byte</span> b <span class="token operator">:</span> dest<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>b <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 文件内容</span><span class="token comment" spellcheck="true">/** * Hello,FileInputStream */</span><span class="token comment" spellcheck="true">// 控制台</span><span class="token comment" spellcheck="true">/** * 21 * 21 * 21 * 72 101 108 108 111 44 70 105 108 101 73 110 112 117 116 83 116 114 101 97 109  * Process finished with exit code 0 */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5、PipedInputStream介绍"><a href="#5、PipedInputStream介绍" class="headerlink" title="5、PipedInputStream介绍"></a>5、PipedInputStream介绍</h3><p>PipedInputStream是基于管道源构造的输入流。所谓”管道“，其运行机制就像是物理管道一样：将物体放入一端，然后它会从管道的另一端出来</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>markus<span class="token punctuation">.</span>java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>inputstream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>PipedInputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>PipedOutputStream<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author: markus * @date: 2023/2/5 2:42 PM * @Description: 构造管道源的输入流演示 * @Blog: https://markuszhang.com * It's my honor to share what I've learned with you! */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PipedInputStreamDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        PipedOutputStream pipedOs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PipedOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        PipedInputStream pipedIs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PipedInputStream</span><span class="token punctuation">(</span>pipedOs<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> source <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        pipedOs<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> destLen <span class="token operator">=</span> pipedIs<span class="token punctuation">.</span><span class="token function">available</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span>destLen<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> readLen <span class="token operator">=</span> pipedIs<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>dest<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>destLen<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>readLen<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">byte</span> b <span class="token operator">:</span> dest<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>b <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * 5 * 5 * 1 2 3 4 5  * Process finished with exit code 0 */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6、SequenceInputStream介绍"><a href="#6、SequenceInputStream介绍" class="headerlink" title="6、SequenceInputStream介绍"></a>6、SequenceInputStream介绍</h3><p>SequenceInputStream是以多流序列构造的输入流，其功能就是将两个以上的InputStream转换为单个InputStream进行后续操作</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>markus<span class="token punctuation">.</span>java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>inputstream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>ByteArrayInputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>InputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>SequenceInputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>ArrayList<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author: markus * @date: 2023/2/5 2:50 PM * @Description: 构造其他流序列作为源的输入流演示 * @Blog: https://markuszhang.com * It's my honor to share what I've learned with you! */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SequenceInputStreamDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        InputStream is1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        InputStream is2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        SequenceInputStream sequenceIs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SequenceInputStream</span><span class="token punctuation">(</span>is1<span class="token punctuation">,</span> is2<span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> bytes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> temp<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>temp <span class="token operator">=</span> sequenceIs<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            bytes<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>bytes<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Integer aByte <span class="token operator">:</span> bytes<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>aByte <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * 10 * 1 2 3 4 5 6 7 8 9 10  * Process finished with exit code 0 */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7、FilterInputStream介绍"><a href="#7、FilterInputStream介绍" class="headerlink" title="7、FilterInputStream介绍"></a>7、FilterInputStream介绍</h3><p>FilerInputStream是InputStream的实现类，该类也是一个基类，并无实际意义，有意义的是它的派生类可以组合上面6个源的输入流来组成一个新的流进而提供更具意义的输入流接口，它的子类如下：</p><ul><li>DataInputStream 与DataOutputStream配合使用，以可移植的方式从李璐中读取基本类型（int、char、long等等），提供读取相应基本类型的接口</li><li>BufferedInputStream 作为缓存流来提高输入流文件的处理效率，用于防止在每次需要更多数据时都进行物理上的读取。相当于声明”使用缓冲区“，它本质上没有额外提供接口，只是为进程增加缓冲操作而已，需要与接口对象配合使用</li><li><del>LineNumberInputStream</del> <del>记录输入流中的行号，可以调用getLineNumber和setLineNumber方法，只是增加了行号的接口，因此在操作时可能需要与接口对象搭配使用</del><strong>（官方已废弃）</strong></li><li>PushbackInputStream 包含一个单字节回退缓冲区，用于将最后读取的字节推回输入流中，通常用语编译器的扫描器，一般业务中很少使用</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>markus<span class="token punctuation">.</span>java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>inputstream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author: markus * @date: 2023/2/5 3:14 PM * @Description: FilterInputStreamDemo * @Blog: https://markuszhang.com * It's my honor to share what I've learned with you! */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FilterInputStreamDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"===================DataInputStream======================"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">displayDataInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"===================BufferedInputStream===================="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">displayBufferedInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"===================NumberInputStream===================="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">displayLineNumberInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"===================PushbackInputStream===================="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">displayPushbackInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">displayDataInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dataSource <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        ByteArrayOutputStream byteArrayOs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        DataOutputStream dataOs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DataOutputStream</span><span class="token punctuation">(</span>byteArrayOs<span class="token punctuation">)</span><span class="token punctuation">;</span>        dataOs<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>dataSource<span class="token punctuation">)</span><span class="token punctuation">;</span>        DataInputStream byteArrayIs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DataInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ByteArrayInputStream</span><span class="token punctuation">(</span>byteArrayOs<span class="token punctuation">.</span><span class="token function">toByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>byteArrayIs<span class="token punctuation">.</span><span class="token function">readBoolean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>byteArrayIs<span class="token punctuation">.</span><span class="token function">readInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">displayLineNumberInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//        LineNumberInputStream</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">displayBufferedInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        BufferedInputStream bufferedIs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"/Users/zhangchenglong/IdeaProjects/OnJava8-Examples/io/src/main/java/com/markus/java/io/inputstream/FilterInputStreamDemo.java"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">displayPushbackInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        PushbackInputStream pushbackIs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PushbackInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ByteArrayInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>pushbackIs<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pushbackIs<span class="token punctuation">.</span><span class="token function">unread</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>pushbackIs<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * ===================DataInputStream====================== * true * 10 * ===================BufferedInputStream==================== * ===================NumberInputStream==================== * ===================PushbackInputStream==================== * 1 * 1 * * Process finished with exit code 0 */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="三、OutputStream"><a href="#三、OutputStream" class="headerlink" title="三、OutputStream"></a>三、OutputStream</h2><blockquote><p>与InputStream相反，OutputStream系列的类则是决定输出的去向:</p><ul><li>字节数组</li><li>文件</li><li>管道</li></ul></blockquote><h3 id="1、ByteArrayOutputStream介绍"><a href="#1、ByteArrayOutputStream介绍" class="headerlink" title="1、ByteArrayOutputStream介绍"></a>1、ByteArrayOutputStream介绍</h3><p>ByteArrayOutputStream是在内存中创建一块缓冲区，所有发送到流中的数据都被放在该缓冲区中。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>markus<span class="token punctuation">.</span>java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>outputstream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>ByteArrayOutputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author: markus * @date: 2023/2/5 4:10 PM * @Description: * @Blog: https://markuszhang.com * It's my honor to share what I've learned with you! */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ByteArrayOutputStreamDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        ByteArrayOutputStream byteArrayOs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        byteArrayOs<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> memory <span class="token operator">=</span> byteArrayOs<span class="token punctuation">.</span><span class="token function">toByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">byte</span> b <span class="token operator">:</span> memory<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>b <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * 1 2 3 4 5  * Process finished with exit code 0 */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2、FileOutputStream介绍"><a href="#2、FileOutputStream介绍" class="headerlink" title="2、FileOutputStream介绍"></a>2、FileOutputStream介绍</h3><p>FileOutputStream用于向文件发送信息</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>markus<span class="token punctuation">.</span>java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>outputstream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author: markus * @date: 2023/2/5 4:13 PM * @Description: * @Blog: https://markuszhang.com * It's my honor to share what I've learned with you! */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FileOutputStreamDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        FileOutputStream fileOs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"/Users/zhangchenglong/IdeaProjects/OnJava8-Examples/io/src/main/resources/fileFromOutputStream.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        fileOs<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        FileInputStream fileIs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"/Users/zhangchenglong/IdeaProjects/OnJava8-Examples/io/src/main/resources/fileFromOutputStream.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> read<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>read <span class="token operator">=</span> fileIs<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>read <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * 1 2 3 4 5  * Process finished with exit code 0 */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3、PipedOutputStream介绍"><a href="#3、PipedOutputStream介绍" class="headerlink" title="3、PipedOutputStream介绍"></a>3、PipedOutputStream介绍</h3><p>PipedOutputStream用于向管道的一端写入字节数据，与PipedInputStream配合使用，实现管道传输，代码可参考PipedInputStream介绍</p><h3 id="4、FilterOutputStream介绍"><a href="#4、FilterOutputStream介绍" class="headerlink" title="4、FilterOutputStream介绍"></a>4、FilterOutputStream介绍</h3><p>FilterOutputStream与FilterInputStream作用一致，作为装饰器接口的抽象类，装饰器用来为其他OutputStream类提供有用的功能，具体的装饰器类如下：</p><ul><li>DataOutputStream 与DataInputStream搭配使用，这样就能以可移植的方式向流中写入基本类型</li><li>PrintStream 用于生成格式化的输出。DataOutputStream负责处理数据的存储，而PrintStream则用来负责数据的展示，例如我们常用的System.out对象就是PrintStream</li><li>BufferedOutputStream 用来防止在每次发送数据的时候都发生物理写操作。相当于声明”使用缓冲“。可以调用flush来清空缓冲区</li></ul><h2 id="四、Reader和Writer"><a href="#四、Reader和Writer" class="headerlink" title="四、Reader和Writer"></a>四、Reader和Writer</h2><p>Reader、Writer是读取/写入字符流的抽象类，乍一看我们以为是用来替换InputStream和OutputStream，但实际上则是提供了兼容Unicode并且基于字符的I/O能力。虽然原始的流库在某些方面已被启用，但是InputStream和OutputStream类仍然以面向字节的I/O流提供了有价值的功能。具体的Reader和Writer如下：</p><ul><li>Reader<ul><li>InputStreamReader</li><li>FileReader</li><li>StringReader</li><li>CharArrayReader</li><li>PipedReader</li><li>FilterReader<ul><li>BufferedReader</li><li>LineNumberReader</li><li>PushbackReader</li></ul></li></ul></li><li>Writer<ul><li>OutputStreamWriter</li><li>FileWriter</li><li>StringWriter</li><li>CharArrayWriter</li><li>PipedWriter</li><li>FilterWriter</li><li>BufferedWriter</li><li>PrintWriter</li></ul></li></ul><p>上面的InputStreamReader、OutputStreamWriter则是对InputStream、OutputStream的适配，在我们工作中有时必须将字节流和字符流结合起来使用，所以增加适配器类是有必要的。</p><p>下面我们以FileReader和FileWriter为例，简单示范一下Reader和Writer的使用方式，其他Reader或者Writer类使用方式有兴趣大家可以私下尝试下，我这里就不做赘述了。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>markus<span class="token punctuation">.</span>java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>reader_writer<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author: markus * @date: 2023/2/5 4:40 PM * @Description: FileReader、FileWriter使用示例 * @Blog: https://markuszhang.com * It's my honor to share what I've learned with you! */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FileReaderAndWriterDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String PATH_NAME <span class="token operator">=</span> <span class="token string">"/Users/zhangchenglong/IdeaProjects/OnJava8-Examples/io/src/main/resources/file_writer.txt"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        FileWriter fw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileWriter</span><span class="token punctuation">(</span>PATH_NAME<span class="token punctuation">)</span><span class="token punctuation">;</span>        fw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"Hello,IO"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        fw<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        fw<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        FileInputStream fileOs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>PATH_NAME<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> len <span class="token operator">=</span> fileOs<span class="token punctuation">.</span><span class="token function">available</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        InputStreamReader fr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span>fileOs<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chars <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">char</span><span class="token punctuation">[</span>len<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> readLen <span class="token operator">=</span> fr<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>chars<span class="token punctuation">)</span><span class="token punctuation">;</span>        fr<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        fileOs<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>chars<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * Hello,IO * * Process finished with exit code 0 */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="六、RandomAccessFile"><a href="#六、RandomAccessFile" class="headerlink" title="六、RandomAccessFile"></a>六、RandomAccessFile</h2><p>RandomAccessFile适合用来处理大小已知的记录组成的文件，由此可以通过seek在各条记录上来回移动，然后读取或者修改记录。文件中的各条记录大小不必相同，只需要确定它们的大小以及在文件中的位置即可。我们查看类结构，发现RandomAccessFile并没有继承InputStream或者OutputStream，类比来看，它有点类似于DataInputStream和DataOutputStream结合起来使用，再加上几个方法：getFilePointer-获取当前所处的位置、seek-移动到文件中的某个文职、length-判断文件的最大大小。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>markus<span class="token punctuation">.</span>java<span class="token punctuation">.</span>io<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>File<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>FileNotFoundException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>RandomAccessFile<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author: markus * @date: 2023/2/5 4:58 PM * @Description: RandomAccessFile使用演示 * @Blog: https://markuszhang.com * It's my honor to share what I've learned with you! */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RandomAccessFileDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        RandomAccessFile raf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RandomAccessFile</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"/Users/zhangchenglong/IdeaProjects/OnJava8-Examples/io/src/main/resources/RandomAccessFile.txt"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"rw"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        raf<span class="token punctuation">.</span><span class="token function">writeDouble</span><span class="token punctuation">(</span><span class="token number">1d</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        raf<span class="token punctuation">.</span><span class="token function">writeDouble</span><span class="token punctuation">(</span><span class="token number">2d</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        raf<span class="token punctuation">.</span><span class="token function">writeInt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        raf<span class="token punctuation">.</span><span class="token function">writeUTF</span><span class="token punctuation">(</span><span class="token string">"Hello,RandomAccessFile"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        raf<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        raf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RandomAccessFile</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"/Users/zhangchenglong/IdeaProjects/OnJava8-Examples/io/src/main/resources/RandomAccessFile.txt"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"rw"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>raf<span class="token punctuation">.</span><span class="token function">readDouble</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        raf<span class="token punctuation">.</span><span class="token function">seek</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>raf<span class="token punctuation">.</span><span class="token function">readInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>raf<span class="token punctuation">.</span><span class="token function">readUTF</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>raf<span class="token punctuation">.</span><span class="token function">getFilePointer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        raf<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * 1.0 * 1 * Hello,RandomAccessFile * 44 * * Process finished with exit code 0 */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="七、全文总结"><a href="#七、全文总结" class="headerlink" title="七、全文总结"></a>七、全文总结</h2><p>Java I/O流库满足了基本的需求：可以对控制台、文件、内存甚至跨网络进行读写操作。但使用过程中的感受是复杂的，它的功能很多，并且很轻量。使用之前我们应该先理解下<strong>装饰器模式</strong>，这会大大提高我们学习I/O流类的效率。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> I/O </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux指令笔记</title>
      <link href="/linux-zhi-ling-bi-ji.html"/>
      <url>/linux-zhi-ling-bi-ji.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、帮助命令：man、help、info"><a href="#一、帮助命令：man、help、info" class="headerlink" title="一、帮助命令：man、help、info"></a>一、帮助命令：man、help、info</h2><blockquote><p>Linux命令非常的多，但大多数情况下我们不需要去死记硬背，主要是以理解为主，把握在什么情况下，应该使用哪方面的命令。</p></blockquote><h3 id="1、help"><a href="#1、help" class="headerlink" title="1、help"></a>1、help</h3><p>help的用法有两种：</p><ul><li><p>一种是针对内部命令</p><ul><li><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@VM-24-10-centos ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># help cd</span>cd: <span class="token function">cd</span> <span class="token punctuation">[</span>-L<span class="token operator">|</span><span class="token punctuation">[</span>-P <span class="token punctuation">[</span>-e<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token punctuation">[</span>dir<span class="token punctuation">]</span>    Change the shell working directory.    Change the current directory to DIR.  The default DIR is the value of the    HOME shell variable.    The variable CDPATH defines the search path <span class="token keyword">for</span> the directory containing    DIR.  Alternative directory names <span class="token keyword">in</span> CDPATH are separated by a colon <span class="token punctuation">(</span>:<span class="token punctuation">)</span>.    A null directory name is the same as the current directory.  If DIR begins    with a slash <span class="token punctuation">(</span>/<span class="token punctuation">)</span>, <span class="token keyword">then</span> CDPATH is not used.    If the directory is not found, and the shell option `cdable_vars<span class="token string">' is set,    the word is assumed to be  a variable name.  If that variable has a value,    its value is used for DIR.    Options:        -L    force symbolic links to be followed        -P    use the physical directory structure without following symbolic        links        -e    if the -P option is supplied, and the current working directory        cannot be determined successfully, exit with a non-zero status    The default is to follow symbolic links, as if `-L'</span> were specified.    Exit Status:    Returns 0 <span class="token keyword">if</span> the directory is changed, and <span class="token keyword">if</span> <span class="token variable">$PWD</span> is <span class="token keyword">set</span> successfully when    -P is used<span class="token punctuation">;</span> non-zero otherwise.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>一种是针对外部命令</p><ul><li><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@VM-24-10-centos ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ls --help</span>用法：ls <span class="token punctuation">[</span>选项<span class="token punctuation">]</span><span class="token punctuation">..</span>. <span class="token punctuation">[</span>文件<span class="token punctuation">]</span><span class="token punctuation">..</span>.List information about the FILEs <span class="token punctuation">(</span>the current directory by default<span class="token punctuation">)</span>.Sort entries alphabetically <span class="token keyword">if</span> none of -cftuvSUX nor --sort is specified.Mandatory arguments to long options are mandatory <span class="token keyword">for</span> short options too.  -a, --all            不隐藏任何以. 开始的项目  -A, --almost-all        列出除. 及<span class="token punctuation">..</span> 以外的任何项目      --author            与-l 同时使用时列出每个文件的作者  -b, --escape            以八进制溢出序列表示不可打印的字符<span class="token punctuation">..</span>. 省略<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><p>我们可以清楚的看到当我们记住常用的命令时，通过help就可以快速准确的查到相应的选项来操作具体的文件(Linux一切接文件)；上面提到了两个词：内部命令和外部命令，外部命令也称为文件系统命令，是 <strong>bash shell</strong> 之外的程序，它并不是 shell 的一部分，内部指令则是shell内的指令，一般是比较简单的指令。我们可以通过type command来区别该命令是内部还是外部，进而选择相应的help命令来查询命令选项</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@VM-24-10-centos ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># type cd</span><span class="token function">cd</span> 是 shell 内嵌<span class="token punctuation">[</span>root@VM-24-10-centos ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># type ls</span><span class="token function">ls</span> 是 `ls --color<span class="token operator">=</span>auto<span class="token string">' 的别名[root@VM-24-10-centos ~]# type pwdpwd 是 shell 内嵌[root@VM-24-10-centos ~]# type mvmv 是 `mv -i'</span> 的别名<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2、man"><a href="#2、man" class="headerlink" title="2、man"></a>2、man</h3><p>虽然【help】命令已经相当好用，不过，help命令通常是来协助我们查询曾经使用的命令所具备的选项与参数而已，当我们要使用从来没有用过的命令或者要查询的根本就不是命令而是文件的格式时，那就要通过【man】命令来解决了</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@VM-24-10-centos ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># man ls</span>LS<span class="token punctuation">(</span>1<span class="token punctuation">)</span>                                        User Commands                                        LS<span class="token punctuation">(</span>1<span class="token punctuation">)</span>NAME       <span class="token function">ls</span> - list directory contentsSYNOPSIS       <span class="token function">ls</span> <span class="token punctuation">[</span>OPTION<span class="token punctuation">]</span><span class="token punctuation">..</span>. <span class="token punctuation">[</span>FILE<span class="token punctuation">]</span><span class="token punctuation">..</span>.DESCRIPTION       List  information  about  the FILEs <span class="token punctuation">(</span>the current directory by default<span class="token punctuation">)</span>.  Sort entries alphabeti‐       cally <span class="token keyword">if</span> none of -cftuvSUX nor --sort is specified.       Mandatory arguments to long options are mandatory <span class="token keyword">for</span> short options too.       -a, --all              <span class="token keyword">do</span> not ignore entries starting with <span class="token keyword">.</span>       -A, --almost-all              <span class="token keyword">do</span> not list implied <span class="token keyword">.</span> and <span class="token punctuation">..</span>       --author              with -l, print the author of each <span class="token function">file</span>       -b, --escape              print C-style escapes <span class="token keyword">for</span> nongraphic characters       --block-size<span class="token operator">=</span>SIZE              scale sizes by SIZE before printing them<span class="token punctuation">;</span> e.g., <span class="token string">'--block-size=M'</span> prints sizes <span class="token keyword">in</span> <span class="token function">units</span> of              1,048,576 bytes<span class="token punctuation">;</span> see SIZE <span class="token function">format</span> below       -B, --ignore-backups              <span class="token keyword">do</span> not list implied entries ending with ~       -c     with  -lt:  <span class="token function">sort</span>  by,  and show, ctime <span class="token punctuation">(</span>time of last modification of <span class="token function">file</span> status informa‐              tion<span class="token punctuation">)</span><span class="token punctuation">;</span> with -l: show ctime and <span class="token function">sort</span> by name<span class="token punctuation">;</span> otherwise: <span class="token function">sort</span> by ctime, newest first       -C     list entries by columns       --color<span class="token punctuation">[</span><span class="token operator">=</span>WHEN<span class="token punctuation">]</span>              colorize the output<span class="token punctuation">;</span> WHEN can be <span class="token string">'never'</span>, <span class="token string">'auto'</span>, or <span class="token string">'always'</span> <span class="token punctuation">(</span>the  default<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">more</span>  info              below       -d, --directory              list directories themselves, not their contents       -D, --dired              generate output designed <span class="token keyword">for</span> Emacs' dired mode       -f     <span class="token keyword">do</span> not sort, <span class="token function">enable</span> -aU, disable -ls --color       -F, --classify              append indicator <span class="token punctuation">(</span>one of */<span class="token operator">=</span><span class="token operator">></span>@<span class="token operator">|</span><span class="token punctuation">)</span> to entries<span class="token punctuation">..</span>.省略<span class="token comment" spellcheck="true"># 只知道名字，不知道是命令还是文件，可以用这个命令</span><span class="token punctuation">[</span>root@VM-24-10-centos ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># man -a passwd</span><span class="token comment" spellcheck="true"># 指定章节，1一般不用写，可省略</span><span class="token punctuation">[</span>root@VM-24-10-centos ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># man 1 passwd</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>细心的同学可能会发现【man page】中的LS((1))字眼，这个((1))代表什么呢？它代表的是”用户指令”,在man命令中一共分为以下几个数字（其中下面的1,5,8要特殊掌握，特别重要）：</p><table><thead><tr><th align="center">代号</th><th align="center">代表内容</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">用户在shell环境中可以操作的命令或可执行文件</td></tr><tr><td align="center">2</td><td align="center">系统内核可调用的函数与工具等</td></tr><tr><td align="center">3</td><td align="center">一些常用函数（function）与函数库（library），大部分为C的函数库（libc）</td></tr><tr><td align="center">4</td><td align="center">设备文件的说明，通过在/dev下的文件</td></tr><tr><td align="center">5</td><td align="center">配置文件或是某些文件的格式</td></tr><tr><td align="center">6</td><td align="center">游戏</td></tr><tr><td align="center">7</td><td align="center">惯例与协议等，例如Linux文件系统、网络协议、ASCII代码等的说明</td></tr><tr><td align="center">8</td><td align="center">系统管理员可用的管理命令</td></tr><tr><td align="center">9</td><td align="center">跟内核有关的文件</td></tr></tbody></table><p>通过上面的man命令我们可以看到，全英文哈哈，下面再提供个汉化版，可以操作一下：</p><ul><li><a href="https://blog.csdn.net/huaweichenai/article/details/109766900" target="_blank" rel="noopener">Linux下man命令使用及man汉化_huaweichenai的博客-CSDN博客_linux man汉化</a></li></ul><h3 id="3、info"><a href="#3、info" class="headerlink" title="3、info"></a>3、info</h3><p>在所有的UNIX-like系统当中，都可以利用man来查询命令或是相关文件。但是，在Linux里面则又额外提供了一种在线求助的方法-info，它是help的补充</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@VM-24-10-centos ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># info ls</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="二、pwd命令"><a href="#二、pwd命令" class="headerlink" title="二、pwd命令"></a>二、pwd命令</h2><blockquote><p>打印当前工作目录的名字</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@VM-24-10-centos ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># help pwd</span>pwd: <span class="token function">pwd</span> <span class="token punctuation">[</span>-LP<span class="token punctuation">]</span>    打印当前工作目录的名字。    选项：      -L    打印 <span class="token variable">$PWD</span> 变量的值，如果它命名了当前的        工作目录      -P    打印当前的物理路径，不带有任何的符号链接    默认情况下，`pwd<span class="token string">' 的行为和带 `-L'</span> 选项一致    退出状态：    除非使用了无效选项或者当前目录不可读，否则    返回状态为0。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="三、ls命令"><a href="#三、ls命令" class="headerlink" title="三、ls命令"></a>三、ls命令</h2><blockquote><p>ls命令的选项非常多，我们选择几个常用的选项来进行记录学习</p></blockquote><h3 id="1、ls-a-path"><a href="#1、ls-a-path" class="headerlink" title="1、ls -a [path]"></a>1、ls -a [path]</h3><p>展示指定路径下的所有文件（包括隐藏文件 <strong>.</strong>开头的）</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@VM-24-10-centos ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ls -a ~/</span><span class="token keyword">.</span>   .bash_history  c        etc                       markus            .tcshrc<span class="token punctuation">..</span>  .bash_logout   .cache   .lesshst                  .pip              vim_demo1.txta   .bash_profile  .config  manpages-zh-1.5.1         .pydistutils.cfg  .vim_demo.txt.swpb   .bashrc        .cshrc   manpages-zh-1.5.1.tar.gz  .ssh              .viminfo<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2、ls-path-path-…"><a href="#2、ls-path-path-…" class="headerlink" title="2、ls [path] [path] …"></a>2、ls [path] [path] …</h3><p>展示多路径下的文件</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@VM-24-10-centos ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ls ~/ /home/markus</span>/home/markus:/root/:a  b  c  etc  manpages-zh-1.5.1  manpages-zh-1.5.1.tar.gz  markus  vim_demo1.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3、ls-l-path"><a href="#3、ls-l-path" class="headerlink" title="3、ls -l [path]"></a>3、ls -l [path]</h3><p>展示指定路径下的文件详细信息</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@VM-24-10-centos ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ls -l</span>总用量 1924drwxrwxrwx 5 lighthouse lighthouse    4096 1月  30 22:17 manpages-zh-1.5.1-rw-r--r-- 1 root       root       1965336 12月 17 2010 manpages-zh-1.5.1.tar.gz<span class="token comment" spellcheck="true"># ls -lh 展示文件大小时，以M为单位展示</span><span class="token punctuation">[</span>root@VM-24-10-centos ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ls -lh /tmp/etc-backup.tar*</span>-rw-r--r-- 1 root root 11M 1月  31 22:15 /tmp/etc-backup.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里多提一下，展示的详细信息如下图所示：</p><p><img src="/linux-zhi-ling-bi-ji/linux%E6%96%87%E4%BB%B6%E8%AF%A6%E7%BB%86%E4%BF%A1%E6%81%AF%E8%A7%A3%E9%87%8A%E5%9B%BE.jpg" alt="linux文件详细信息解释图"></p><h3 id="4、ls-r-path"><a href="#4、ls-r-path" class="headerlink" title="4、ls -r [path]"></a>4、ls -r [path]</h3><p>倒序展示指定路径下文件列表</p><pre><code># 普通展示[root@VM-24-10-centos ~]# ls -l总用量 1924drwxrwxrwx 5 lighthouse lighthouse    4096 1月  30 22:17 manpages-zh-1.5.1-rw-r--r-- 1 root       root       1965336 12月 17 2010 manpages-zh-1.5.1.tar.gz# 逆序展示[root@VM-24-10-centos ~]# ls -rl总用量 1924-rw-r--r-- 1 root       root       1965336 12月 17 2010 manpages-zh-1.5.1.tar.gzdrwxrwxrwx 5 lighthouse lighthouse    4096 1月  30 22:17 manpages-zh-1.5.1</code></pre><h3 id="5、ls-t"><a href="#5、ls-t" class="headerlink" title="5、ls -t"></a>5、ls -t</h3><p>按照时间顺序显示</p><h2 id="四、cd命令"><a href="#四、cd命令" class="headerlink" title="四、cd命令"></a>四、cd命令</h2><h2 id="五、文件操作命令"><a href="#五、文件操作命令" class="headerlink" title="五、文件操作命令"></a>五、文件操作命令</h2><h2 id="六、通配符"><a href="#六、通配符" class="headerlink" title="六、通配符"></a>六、通配符</h2><h2 id="七、文本查看命令"><a href="#七、文本查看命令" class="headerlink" title="七、文本查看命令"></a>七、文本查看命令</h2><h2 id="八、打包与压缩命令"><a href="#八、打包与压缩命令" class="headerlink" title="八、打包与压缩命令"></a>八、打包与压缩命令</h2><h2 id="九、文本编辑器vim"><a href="#九、文本编辑器vim" class="headerlink" title="九、文本编辑器vim"></a>九、文本编辑器vim</h2><h2 id="十、用户与权限管理命令"><a href="#十、用户与权限管理命令" class="headerlink" title="十、用户与权限管理命令"></a>十、用户与权限管理命令</h2>]]></content>
      
      
      <categories>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> command </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>@Autowired注入原理</title>
      <link href="/autowired-zhu-ru-yuan-li.html"/>
      <url>/autowired-zhu-ru-yuan-li.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、全文概览"><a href="#一、全文概览" class="headerlink" title="一、全文概览"></a>一、全文概览</h2><blockquote><p>依赖注入（DI）是Spring核心特性之一，而@Autowired也是我们日常高频使用的Spring依赖注入方式之一，因此有必要对它的使用以及原理做一个全面的掌握。本文从@Autowired使用、原理入手记录，并扩展延伸Spring中其他具备注入功能的注解。</p></blockquote><p><img src="/autowired-zhu-ru-yuan-li/%E6%9C%AC%E6%96%87%E6%A6%82%E8%A7%88.png" alt></p><h2 id="二、-Autowired简介与使用"><a href="#二、-Autowired简介与使用" class="headerlink" title="二、@Autowired简介与使用"></a>二、@Autowired简介与使用</h2><h3 id="1、简介"><a href="#1、简介" class="headerlink" title="1、简介"></a>1、简介</h3><p>我们直接通Autowired注解源码来看下该注解的简介</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 可以标注在构造器、方法、参数、字段、注解类型(做为元注解)上</span><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">{</span>ElementType<span class="token punctuation">.</span>CONSTRUCTOR<span class="token punctuation">,</span> ElementType<span class="token punctuation">.</span>METHOD<span class="token punctuation">,</span> ElementType<span class="token punctuation">.</span>PARAMETER<span class="token punctuation">,</span> ElementType<span class="token punctuation">.</span>FIELD<span class="token punctuation">,</span> ElementType<span class="token punctuation">.</span>ANNOTATION_TYPE<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 运行时注解</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>RetentionPolicy<span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token annotation punctuation">@Documented</span><span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">Autowired</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * Declares whether the annotated dependency is required.     * 声明该注解标注的依赖是否需要一定存在于Spring容器中     *                 true为必须存在，如果不存在的话就抛出NoSuchBeanDefinitionException异常     *                false不要求必须存在，如果不存在也不抛出异常（一般不建议设置，可能会引发线上事故）     * &lt;p>Defaults to {@code true}.     */</span>    <span class="token keyword">boolean</span> <span class="token function">required</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过上面代码我们可以看出@Autowired可以标注在构造器、方法、参数、字段以及派生注解上，所以注入时机非常多，可以准确的控制在何时、何处注入以及如何注入。</p><h3 id="2、使用"><a href="#2、使用" class="headerlink" title="2、使用"></a>2、使用</h3><p><strong>Bean配置类</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BeanConfiguration</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> User <span class="token function">user</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"markus"</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>演示类</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>markus<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>injection<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>markus<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>MyAutowired<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>markus<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>bean<span class="token punctuation">.</span>User<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>markus<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>configuration<span class="token punctuation">.</span>BeanConfiguration<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Autowired<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>AnnotationConfigApplicationContext<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Bean<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Import<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Collection<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Map<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author: markus * @date: 2023/2/5 10:43 PM * @Description: @Autowired注解示例 * @Blog: https://markuszhang.com * It's my honor to share what I've learned with you! */</span><span class="token comment" spellcheck="true">// 导入Bean配置</span><span class="token annotation punctuation">@Import</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        com<span class="token punctuation">.</span>markus<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>configuration<span class="token punctuation">.</span>BeanConfiguration<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AutowiredAnnotationDependencyInjectionDemo</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> User user<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> User<span class="token operator">></span> userMap<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> Collection<span class="token operator">&lt;</span>User<span class="token operator">></span> userCollection<span class="token punctuation">;</span>    <span class="token keyword">private</span> User userFromCtor<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//    @Autowired 可标注在构造器或者构造器的参数里面，两者取其一即可</span>    <span class="token keyword">public</span> <span class="token function">AutowiredAnnotationDependencyInjectionDemo</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Autowired</span> User user<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>userFromCtor <span class="token operator">=</span> user<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> User userFromMethod<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">autowiredUser</span><span class="token punctuation">(</span>User user<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>userFromMethod <span class="token operator">=</span> user<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@MyAutowired</span>    <span class="token keyword">private</span> User userFromCustomAnnotation<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        AnnotationConfigApplicationContext context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnnotationConfigApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        context<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>AutowiredAnnotationDependencyInjectionDemo<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        context<span class="token punctuation">.</span><span class="token function">refresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        AutowiredAnnotationDependencyInjectionDemo demo <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>AutowiredAnnotationDependencyInjectionDemo<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"demo.user : "</span> <span class="token operator">+</span> demo<span class="token punctuation">.</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"demo.userMap : "</span> <span class="token operator">+</span>demo<span class="token punctuation">.</span>userMap<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"demo.userCollection : "</span> <span class="token operator">+</span>demo<span class="token punctuation">.</span>userCollection<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"demo.userFromCtor : "</span> <span class="token operator">+</span>demo<span class="token punctuation">.</span>userFromCtor<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"demo.userFromMethod : "</span> <span class="token operator">+</span>demo<span class="token punctuation">.</span>userFromMethod<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"demo.userFromCustomAnnotation : "</span> <span class="token operator">+</span>demo<span class="token punctuation">.</span>userFromCustomAnnotation<span class="token punctuation">)</span><span class="token punctuation">;</span>        context<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="三、-Autowired原理"><a href="#三、-Autowired原理" class="headerlink" title="三、@Autowired原理"></a>三、@Autowired原理</h2><h2 id="四、其他注解注入方式"><a href="#四、其他注解注入方式" class="headerlink" title="四、其他注解注入方式"></a>四、其他注解注入方式</h2><h2 id="五、全文总结"><a href="#五、全文总结" class="headerlink" title="五、全文总结"></a>五、全文总结</h2>]]></content>
      
      
      <categories>
          
          <category> spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ioc </tag>
            
            <tag> 注解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ReentrantLock与AQS的源码学习笔记</title>
      <link href="/reentrantlock-yu-aqs-de-yuan-ma-xue-xi-bi-ji.html"/>
      <url>/reentrantlock-yu-aqs-de-yuan-ma-xue-xi-bi-ji.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>由ReentrantLock揭开AQS的大幕<br>先来段代码让我们更好的进入到ReentrantLock的世界</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">{</span>    ReentrantLock lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">try</span><span class="token punctuation">{</span>            lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//执行业务</span>        <span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span>            lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><p>上面这段代码，当运行到lock.lock()的时候，ReentrantLock是如何保证线程安全的呢？接下来就一起去揭秘ReentrantLock底层是怎么保证线程安全的吧！</p><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>要谈ReentrantLock，那就不得不谈下AbstractQueuedSynchronizer(AQS)！我们从ReentrantLock的Sync开始谈起，慢慢深入AQS！</p><p>先解释下AQS，它定义了一套多线程访问共享资源的同步器框架。很多同步类的实现都依赖于它，就比如接下来我们说的ReentrantLock。</p><p>ReentrantLock底层实现了一套自定义的同步队列器-Sync，我们来看看它的源码</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//它是ReentrantLock实现同步控制的根本，它的子类有fair和non-fair两个，一个是公平锁，一个是非公平，各有各的实现方式。这个基类借助AQS的state来展示持有锁的数量</span><span class="token keyword">abstract</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Sync</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractQueuedSynchronizer</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> <span class="token operator">-</span>5179523762034025860L<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * Performs {@link Lock#lock}. The main reason for subclassing     * is to allow fast path for nonfair version.     */</span>    <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * Performs non-fair tryLock.  tryAcquire is implemented in     * subclasses, but both need nonfair try for trylock method.     */</span>    <span class="token comment" spellcheck="true">//非公平锁尝试获取资源的方法</span>    <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">nonfairTryAcquire</span><span class="token punctuation">(</span><span class="token keyword">int</span> acquires<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">final</span> Thread current <span class="token operator">=</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">compareAndSetState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> acquires<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">setExclusiveOwnerThread</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>current <span class="token operator">==</span> <span class="token function">getExclusiveOwnerThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> nextc <span class="token operator">=</span> c <span class="token operator">+</span> acquires<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>nextc <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// overflow</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"Maximum lock count exceeded"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">setState</span><span class="token punctuation">(</span>nextc<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//尝试释放资源</span>    <span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">tryRelease</span><span class="token punctuation">(</span><span class="token keyword">int</span> releases<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> releases<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token function">getExclusiveOwnerThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalMonitorStateException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span> free <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            free <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token function">setExclusiveOwnerThread</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">setState</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> free<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//判断当前线程是否是持有资源的排他线程</span>    <span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">isHeldExclusively</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// While we must in general read state before owner,</span>        <span class="token comment" spellcheck="true">// we don't need to do so to check if current thread is owner</span>        <span class="token keyword">return</span> <span class="token function">getExclusiveOwnerThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//TODO:回头补一下</span>    <span class="token keyword">final</span> ConditionObject <span class="token function">newCondition</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ConditionObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// Methods relayed from outer class</span>    <span class="token comment" spellcheck="true">//获取拥有资源的线程</span>    <span class="token keyword">final</span> Thread <span class="token function">getOwner</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">?</span> null <span class="token operator">:</span> <span class="token function">getExclusiveOwnerThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//持有锁的数量</span>    <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token function">getHoldCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">isHeldExclusively</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//判断是否当前资源被占有</span>    <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">isLocked</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**         * Reconstitutes the instance from a stream (that is, deserializes it).         */</span>    <span class="token comment" spellcheck="true">//防止破坏单例</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">readObject</span><span class="token punctuation">(</span>java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>ObjectInputStream s<span class="token punctuation">)</span>        <span class="token keyword">throws</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">,</span> ClassNotFoundException <span class="token punctuation">{</span>        s<span class="token punctuation">.</span><span class="token function">defaultReadObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// reset to unlocked state</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>里面定义了多个方法，我们重点需要掌握它的lock和tryAcquire方法，接下来我们看看它的两个子类</p><p><strong>FairSync</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//公平锁</span><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">FairSync</span> <span class="token keyword">extends</span> <span class="token class-name">Sync</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> <span class="token operator">-</span>3000897897090466540L<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//加锁，这里的acquire是调用的AQS的方法，它有自己的一套流程</span>    <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">acquire</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//公平锁尝试获取资源的方法</span>    <span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">tryAcquire</span><span class="token punctuation">(</span><span class="token keyword">int</span> acquires<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">final</span> Thread current <span class="token operator">=</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//看看当前state是否是0，如果是0说明现在没有线程去获取</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//它很老实，需要先看下同步队列中是否也有想要获取相同资源的节点，如果有的话，就需要AQS的一套流程，入队列等</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">hasQueuedPredecessors</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>                <span class="token function">compareAndSetState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> acquires<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">setExclusiveOwnerThread</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//否则说明有线程持有它了，我们需要看看持有资源的那个线程和当前的线程是否是一致的。一致就可重入</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>current <span class="token operator">==</span> <span class="token function">getExclusiveOwnerThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> nextc <span class="token operator">=</span> c <span class="token operator">+</span> acquires<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>nextc <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"Maximum lock count exceeded"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">setState</span><span class="token punctuation">(</span>nextc<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//获取失败</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>NonFairSync</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//非公平锁</span><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">NonfairSync</span> <span class="token keyword">extends</span> <span class="token class-name">Sync</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> 7316153563782823691L<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//非公平锁，上来先去尝试一下获取资源，如果不成功，再走AQS那一套</span>    <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//如果抢占成功，就可以直接设置占有了。</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">compareAndSetState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token function">setExclusiveOwnerThread</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            <span class="token comment" spellcheck="true">//否则乖乖听话，走我AQS的那一套</span>            <span class="token function">acquire</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//尝试获取的方式，它是直接调用Sync的nonfairTryAcquire方法</span>    <span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">tryAcquire</span><span class="token punctuation">(</span><span class="token keyword">int</span> acquires<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">nonfairTryAcquire</span><span class="token punctuation">(</span>acquires<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其实ReentrantLock加锁机制就是：我有两种实现方式，一是公平锁机制，而是非公平锁机制，对于队列同步器各有一套方案，ReentrantLock只需要定义获取state的方式和释放方式即可，至于那些具体线程的队列的维护(获取失败入队和唤醒队列)都已经再AQS顶层封装好了。接下来我们来看下AQS框架吧！</p><h2 id="AQS框架"><a href="#AQS框架" class="headerlink" title="AQS框架"></a>AQS框架</h2><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vbWFya3VzemNsOTkvaW1hZ2VzL3Jhdy9tYXN0ZXIvMjAyMDA4MTMyMzI3MDIucG5n?x-oss-process=image/format,png" alt></p><p>AQS内部维护了一个Volatile int state的变量和一个FIFO的等待队列(线程获取资源失败后进入阻塞所加入的队列)，访问state的方式有三种：</p><ul><li>getState()：获取当前state的大小，就是当前持有多少个锁</li><li>setState()：设置state的大小</li><li>compareAndSetState()：通过CAS操作设置state的大小，它是线程安全的。</li></ul><p>接下来就需要了解下AQS里几个比较重要的方法了：</p><ul><li>isHeldExclusively()：该线程是否正在独占资源。只有用到condition才需要去实现它。</li><li>tryAcquire(int)：独占方式。尝试获取资源，成功则返回true，失败则返回false。</li><li>tryRelease(int)：独占方式。尝试释放资源，成功则返回true，失败则返回false。</li><li>tryAcquireShared(int)：共享方式。尝试获取资源。负数表示失败；0表示成功，但没有剩余可用资源；正数表示成功，且有剩余资源。</li><li>tryReleaseShared(int)：共享方式。尝试释放资源，如果释放后允许唤醒后续等待结点返回true，否则返回false。</li></ul><p>AQS定义两种资源共享方式：一种是独占资源，一种是共享资源，在当我们去自定义同步队列器的时候，我们并不是将上面的方法全部重写，而是相对应的进行重写：当我们定义的是独占资源的话，仅需要去实现tryAcquire(int)和tryRelease(int)方法即可；当我们定义的时候共享资源的话，仅需要器实现tryAcquireShared(int)和tryReleaseShared(int)方法即可。</p><p>这篇文章主要讲的是ReentrantLock，我们就拿ReentrantLock的资源方式来讲解，因为它是独占资源的方式，接下来我们就只需要分析独占资源重写的两种方式即可。</p><h2 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h2><p>在这一段，我们从acquire–&gt;release的次序来！</p><p>在这里先把队列的节点的几种状态先来列举一下，方便后来的分析：</p><ul><li><strong>CANCELLED</strong>(1)：表示当前结点已取消调度。当timeout或被中断（响应中断的情况下），会触发变更为此状态，进入该状态后的结点将不会再变化。</li><li><strong>SIGNAL</strong>(-1)：表示后继结点在等待当前结点唤醒。后继结点入队时，会将前继结点的状态更新为SIGNAL。</li><li><strong>CONDITION</strong>(-2)：表示结点等待在Condition上，当其他线程调用了Condition的signal()方法后，CONDITION状态的结点将<strong>从等待队列转移到同步队列中</strong>，等待获取同步锁。</li><li><strong>PROPAGATE</strong>(-3)：共享模式下，前继结点不仅会唤醒其后继结点，同时也可能会唤醒后继的后继结点。</li><li><strong>0</strong>：新结点入队时的默认状态。</li></ul><p>不知道大家还记不记得在前面我们看源码的东西：acquire(1)，这个方法，它是AQS已经写好的方法，接下来我们去看看它内部是怎样的。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//获取排他锁，忽略掉中断的线程</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">acquire</span><span class="token punctuation">(</span><span class="token keyword">int</span> arg<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//这里的几个函数是关键</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">tryAcquire</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>        <span class="token function">acquireQueued</span><span class="token punctuation">(</span><span class="token function">addWaiter</span><span class="token punctuation">(</span>Node<span class="token punctuation">.</span>EXCLUSIVE<span class="token punctuation">)</span><span class="token punctuation">,</span> arg<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token function">selfInterrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>函数流程是这样的：</strong></p><ol><li>tryAcquire：这个就是我们之前看到的ReentrantLock下Sync的子类实现的，公平锁和非公平锁各有一套。获取失败返回false</li><li>addWaiter(Node.EXCLUSIVE)：这是获取资源失败以后的操作，让当前阻塞线程入队列，设置独占模式的节点</li><li>acquireQueued()：这个函数的作用就是，让当前节点不断的自旋尝试获取资源，直到成功！</li><li>selfInterrupt()：能进入这个函数说明，当前这个线程获取到资源了，不过这个线程在获取到资源之前被中断过，正常来讲，它是不被响应的，所以出来之后，再进行自我中断，把中断补上。</li></ol><p>之前我们已经看过tryAcquire()了，现在我们直接从addWaiter开始看起</p><p><strong>addWaiter：</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Creates and enqueues node for current thread and given mode. * @param mode Node.EXCLUSIVE for exclusive, Node.SHARED for shared * @return the new node */</span><span class="token comment" spellcheck="true">//创建一个节点，将节点入队列</span><span class="token keyword">private</span> Node <span class="token function">addWaiter</span><span class="token punctuation">(</span>Node mode<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//有两种模式：独占模式，共享模式</span>    Node node <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> mode<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Try the fast path of enq; backup to full enq on failure</span>    <span class="token comment" spellcheck="true">//尝试快速方式直接放到队尾</span>    Node pred <span class="token operator">=</span> tail<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>pred <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        node<span class="token punctuation">.</span>prev <span class="token operator">=</span> pred<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">compareAndSetTail</span><span class="token punctuation">(</span>pred<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            pred<span class="token punctuation">.</span>next <span class="token operator">=</span> node<span class="token punctuation">;</span>            <span class="token keyword">return</span> node<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//上一步失败通过enq入队</span>    <span class="token function">enq</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> node<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>再来看enq的源码：</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Inserts node into queue, initializing if necessary. See picture above. * @param node the node to insert * @return node's predecessor */</span><span class="token keyword">private</span> Node <span class="token function">enq</span><span class="token punctuation">(</span><span class="token keyword">final</span> Node node<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Node t <span class="token operator">=</span> tail<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// Must initialize</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">compareAndSetHead</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                tail <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            node<span class="token punctuation">.</span>prev <span class="token operator">=</span> t<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">compareAndSetTail</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                t<span class="token punctuation">.</span>next <span class="token operator">=</span> node<span class="token punctuation">;</span>                <span class="token keyword">return</span> t<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这段代码是非常经典的CAS操作，确保节点能够安全的加入到队尾当中。</p><p><strong>再回来看下acquireQueued：</strong>从刚开始的获取资源失败，然后将节点加入到队尾，接下来线程该做什么了？<strong><font color="blue">那肯定是进入到休息状态，等待被唤醒然后去获取资源，干自己想干的事情了</font></strong>，这个函数非常关键，我们通过源码一行一行的分析:</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Acquires in exclusive uninterruptible mode for thread already in * queue. Used by condition wait methods as well as acquire. * @param node the node * @param arg the acquire argument * @return {@code true} if interrupted while waiting */</span><span class="token comment" spellcheck="true">//正如上面注释说的那样，我对这个方法的理解就是将这个入队的节点通过自旋获取资源</span><span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">acquireQueued</span><span class="token punctuation">(</span><span class="token keyword">final</span> Node node<span class="token punctuation">,</span> <span class="token keyword">int</span> arg<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//这个boolean变量用于表示当前节点是否获取资源失败的状态</span>    <span class="token keyword">boolean</span> failed <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//标记当前节点对应的线程是否被中断过，默认没有被中断</span>        <span class="token keyword">boolean</span> interrupted <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//接下来就是进入到一个死循环了，直到获取资源才返回</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//找到当前节点的前去节点</span>            <span class="token keyword">final</span> Node p <span class="token operator">=</span> node<span class="token punctuation">.</span><span class="token function">predecessor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//这个前驱节点是head节点吗？如果是的话，当前线程就可以尝试着再去获取一遍锁了</span>            <span class="token comment" spellcheck="true">//是头节点并且获取资源成功            </span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">==</span> head <span class="token operator">&amp;&amp;</span> <span class="token function">tryAcquire</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//将获取资源成功，那就将当前这个节点设置为head节点</span>                <span class="token function">setHead</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//将它原先的前驱结点与它断开联系，方便回收</span>                p<span class="token punctuation">.</span>next <span class="token operator">=</span> null<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// help GC</span>                <span class="token comment" spellcheck="true">//更改标志位，表示当前节点获取资源成功了</span>                failed <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//返回当前节点在被唤醒前是否被中断过</span>                <span class="token keyword">return</span> interrupted<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//第一个函数用来判断当前节点是否可以安心去休息了，如果可以安心秀习，调用第二个函数进入线程进入阻塞</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">shouldParkAfterFailedAcquire</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> node<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>                <span class="token function">parkAndCheckInterrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">//醒来之后发现当前线程被中断过，那就更改下标志，方便后续进行的自我中断</span>                interrupted <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 如果等待过程中没有成功获取资源（如timeout，或者可中断的情况下被中断了），那么取消结点在队列中的等待。</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>failed<span class="token punctuation">)</span>            <span class="token function">cancelAcquire</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>讲完这个函数，我们来看看他里面的另外几个函数：</p><p><strong>shouldParkAfterFailedAcquire：</strong> 它是用来判断当前节点是否可以安心的去休息了，假如我前面的节点已经放弃了，只是瞎站着，那么我还是有机会去获取锁的。我们来看看源码：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Checks and updates status for a node that failed to acquire. * Returns true if thread should block. This is the main signal * control in all acquire loops.  Requires that pred == node.prev. * @param pred node's predecessor holding status * @param node the node * @return {@code true} if thread should block */</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">shouldParkAfterFailedAcquire</span><span class="token punctuation">(</span>Node pred<span class="token punctuation">,</span> Node node<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//获取前驱节点的状态</span>    <span class="token keyword">int</span> ws <span class="token operator">=</span> pred<span class="token punctuation">.</span>waitStatus<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//如果是SIGNAL的话，我就可以安心的去休息了</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ws <span class="token operator">==</span> Node<span class="token punctuation">.</span>SIGNAL<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">/*             * This node has already set status asking a release             * to signal it, so it can safely park.             */</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ws <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/*             * Predecessor was cancelled. Skip over predecessors and             * indicate retry.             */</span>        <span class="token comment" spellcheck="true">//如果我前面的节点是取消状态，那就一直往前找，直到找到不是取消状态的节点，然后排在它后面</span>        <span class="token keyword">do</span> <span class="token punctuation">{</span>            node<span class="token punctuation">.</span>prev <span class="token operator">=</span> pred <span class="token operator">=</span> pred<span class="token punctuation">.</span>prev<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>pred<span class="token punctuation">.</span>waitStatus <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pred<span class="token punctuation">.</span>next <span class="token operator">=</span> node<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/*             * waitStatus must be 0 or PROPAGATE.  Indicate that we             * need a signal, but don't park yet.  Caller will need to             * retry to make sure it cannot acquire before parking.             */</span>        <span class="token comment" spellcheck="true">//设置前驱结点的状态为SIGNAL</span>        <span class="token function">compareAndSetWaitStatus</span><span class="token punctuation">(</span>pred<span class="token punctuation">,</span> ws<span class="token punctuation">,</span> Node<span class="token punctuation">.</span>SIGNAL<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//返回false是不确定前驱节点的状态是否是SIGNAL，需要再通过一遍循环来判断，最终确认一下才可以去休息</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>再来看下parkAndCheckInterrupt：</strong> 它是在前面函数确保当前节点可以去休息了，那么这个就是真正的去操作节点休息的函数。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Convenience method to park and then check if interrupted * @return {@code true} if interrupted */</span><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">parkAndCheckInterrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    LockSupport<span class="token punctuation">.</span><span class="token function">park</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//阻塞当前线程</span>    <span class="token keyword">return</span> Thread<span class="token punctuation">.</span><span class="token function">interrupted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//返回该线程被唤醒之前是否被中断过</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>小结一下：</strong></p><ol><li>节点在加入到队尾后，检查状态，找到休息的安全点</li><li>调用park进入到wait状态，等待unpark()或interrupt()唤醒自己</li><li>被唤醒后，看看自己是否有资格获取资源，如果自己之前被中断过，就没有资格去获取资源，没有的话，就继续第一步流程</li></ol><p><strong><font color="blue">最后总结一下整个acquire的流程：</font></strong></p><ol><li>先来调用一下自定义同步器的tryAcquire()，尝试获取一遍资源，如果失败进入流程2；</li><li>将当前线程封装成一个节点加入到AQS维护的FIFO队列的尾部，并标记为独占模式；</li><li>acquireQueued()是线程在等待队列中休息，如果有机会(轮到自己会被unpark())会去获取资源。获取到资源后才返回，如果在此期间当前线程被中断过就返回true，否则返回false；</li></ol><p><strong>最后再来张流程图加深一遍印象：</strong></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vbWFya3VzemNsOTkvaW1hZ2VzL3Jhdy9tYXN0ZXIvMjAyMDA4MTQwMDQ2NTUucG5n?x-oss-process=image/format,png" alt></p><p>至此，整个acquire(1)的流程就结束了！</p><p>上面是独占锁的抢占过程以及抢占不成功入队列的过程，下面就来看看独占锁的释放资源的过程。</p><p>先来看看顶层入口：<strong>release方法</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**     * Releases in exclusive mode.  Implemented by unblocking one or     * more threads if {@link #tryRelease} returns true.     * This method can be used to implement method {@link Lock#unlock}.     *     * @param arg the release argument.  This value is conveyed to     *        {@link #tryRelease} but is otherwise uninterpreted and     *        can represent anything you like.     * @return the value returned from {@link #tryRelease}     */</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">release</span><span class="token punctuation">(</span><span class="token keyword">int</span> arg<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//尝试着去释放资源，如果成功就往下走，否则直接返回</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">tryRelease</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Node h <span class="token operator">=</span> head<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//找到头结点</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>h <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> h<span class="token punctuation">.</span>waitStatus <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//这是下一个节点需要去唤醒的条件：头结点不为空或者当前节点状态为0</span>            <span class="token comment" spellcheck="true">//去唤醒下一个节点</span>            <span class="token function">unparkSuccessor</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>大家可能会想，去唤醒下一个节点为什么是那样的状态呢？我就说下我在分析的时候是怎么理解的吧：首先，当前节点的状态默认是0，这是大家都知道的。然后，这个节点的状态是由下一个节点是否阻塞来设置的，在获取资源的时候我们了解到，当要获取资源的状态获取失败的时候，它会去找一个安全点然后去阻塞，这个安全点就是让它的前一个节点状态设为SIGNAL。回到我们现在想要知道的缘由，所以，我想要去唤醒我的下一个节点的前提就是，我当前节点的状态不能为0和不能为空，为空说明我没有下一个节点了，自然就不用去唤醒了，为0说明我下一个节点现在没有阻塞，自然也不用去唤醒了。</p><p><strong>说完上面的，接下来我们再去看下tryRelease方法</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//这个方法是AQS交给自定义同步器去实现的</span><span class="token keyword">protected</span> <span class="token keyword">boolean</span> <span class="token function">tryRelease</span><span class="token punctuation">(</span><span class="token keyword">int</span> arg<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UnsupportedOperationException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//来看看这个ReentrantLock实现的。</span><span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">tryRelease</span><span class="token punctuation">(</span><span class="token keyword">int</span> releases<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//释放资源</span>    <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> releases<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//如果当前线程不是持有资源的线程，就抛异常</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token function">getExclusiveOwnerThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalMonitorStateException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//释放的标记</span>    <span class="token keyword">boolean</span> free <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//如果资源为0了，说明当前线程完全释放这个资源了</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//改变标记位</span>        free <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//将独占线程设为空</span>        <span class="token function">setExclusiveOwnerThread</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//设置资源的状态</span>    <span class="token function">setState</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//返回是否完全释放资源</span>    <span class="token keyword">return</span> free<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>再接着Release往下看unparkSuccessor这个方法：</strong></p><p>如果资源被完全释放的话，当前节点就可以去唤醒下一个节点的状态了，我们来看看它的源码</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**     * Wakes up node's successor, if one exists.     *     * @param node the node     */</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">unparkSuccessor</span><span class="token punctuation">(</span>Node node<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/*         * If status is negative (i.e., possibly needing signal) try         * to clear in anticipation of signalling.  It is OK if this         * fails or if status is changed by waiting thread.         */</span>    <span class="token keyword">int</span> ws <span class="token operator">=</span> node<span class="token punctuation">.</span>waitStatus<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ws <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//如果当前节点的状态是小于0，先去设置状态为0，允许失败</span>        <span class="token function">compareAndSetWaitStatus</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> ws<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*         * Thread to unpark is held in successor, which is normally         * just the next node.  But if cancelled or apparently null,         * traverse backwards from tail to find the actual         * non-cancelled successor.         */</span>    Node s <span class="token operator">=</span> node<span class="token punctuation">.</span>next<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//得到这个节点的后继节点</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">==</span> null <span class="token operator">||</span> s<span class="token punctuation">.</span>waitStatus <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//如果该节点为null或者状态>0就不唤醒</span>        s <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//从后往前找，找到最后一个可以被唤醒的节点，唤醒它。</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Node t <span class="token operator">=</span> tail<span class="token punctuation">;</span> t <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> t <span class="token operator">!=</span> node<span class="token punctuation">;</span> t <span class="token operator">=</span> t<span class="token punctuation">.</span>prev<span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>t<span class="token punctuation">.</span>waitStatus <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>                s <span class="token operator">=</span> t<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">!=</span> null<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">//唤醒该节点，这里就跟前面的parkAndCheckInterrupt方法对上了。</span>        LockSupport<span class="token punctuation">.</span><span class="token function">unpark</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>thread<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>至此，我们的ReentrantLock的加锁解锁的机制就完全结束了。接下来回去分析下AQS下的共享锁机制，后期补上笔记</p><h2 id="鸣谢"><a href="#鸣谢" class="headerlink" title="鸣谢"></a>鸣谢</h2><p>文章灵感来自这篇博客：<a href="https://www.cnblogs.com/waterystone/p/4920797.html，文章写的很好。" target="_blank" rel="noopener">https://www.cnblogs.com/waterystone/p/4920797.html，文章写的很好。</a></p>]]></content>
      
      
      <categories>
          
          <category> 并发编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ReentrantLock </tag>
            
            <tag> AQS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java后端技术栈知识体系</title>
      <link href="/zhi-shi-ti-xi.html"/>
      <url>/zhi-shi-ti-xi.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>以下是我对Java后端技术栈体系做了一个汇总罗列，并在后续的职业生涯中逐步填充这些内容。</p><ul><li>2023年规划<ul><li>对Java语言知识点、Spring框架、Redis、Git、Maven、设计模式做系统梳理，并完善文章。</li></ul></li><li>2024年规划</li></ul></blockquote><h2 id="一、Java知识点汇总（2023年）"><a href="#一、Java知识点汇总（2023年）" class="headerlink" title="一、Java知识点汇总（2023年）"></a>一、Java知识点汇总（2023年）</h2><h3 id="1、基础"><a href="#1、基础" class="headerlink" title="1、基础"></a>1、基础</h3><h3 id="2、集合"><a href="#2、集合" class="headerlink" title="2、集合"></a>2、集合</h3><h3 id="3、并发"><a href="#3、并发" class="headerlink" title="3、并发"></a>3、并发</h3><h3 id="4、IO系统与文件系统"><a href="#4、IO系统与文件系统" class="headerlink" title="4、IO系统与文件系统"></a>4、IO系统与文件系统</h3><ul><li><strong><a href="./i-o-liu.html">I/O流</a></strong></li><li><strong><a href="./biao-zhun-i-o.html">标准I/O</a></strong></li><li><strong><a href="./xin-i-o-xi-tong.html">新I/O系统</a></strong></li><li><strong><a href="./wen-jian-xi-tong.html">文件系统</a></strong></li></ul><h3 id="5、版本特性汇总"><a href="#5、版本特性汇总" class="headerlink" title="5、版本特性汇总"></a>5、版本特性汇总</h3><h3 id="6、Java虚拟机"><a href="#6、Java虚拟机" class="headerlink" title="6、Java虚拟机"></a>6、Java虚拟机</h3><h3 id="7、常用类库"><a href="#7、常用类库" class="headerlink" title="7、常用类库"></a>7、常用类库</h3><h2 id="二、数据库"><a href="#二、数据库" class="headerlink" title="二、数据库"></a>二、数据库</h2><h3 id="1、MySQL"><a href="#1、MySQL" class="headerlink" title="1、MySQL"></a>1、MySQL</h3><h3 id="2、Redis（2023年）"><a href="#2、Redis（2023年）" class="headerlink" title="2、Redis（2023年）"></a>2、Redis（2023年）</h3><h3 id="3、ElasticSearch"><a href="#3、ElasticSearch" class="headerlink" title="3、ElasticSearch"></a>3、ElasticSearch</h3><h2 id="三、常用框架和中间件"><a href="#三、常用框架和中间件" class="headerlink" title="三、常用框架和中间件"></a>三、常用框架和中间件</h2><h3 id="1、Spring（2023年）"><a href="#1、Spring（2023年）" class="headerlink" title="1、Spring（2023年）"></a>1、Spring（2023年）</h3><h3 id="2、SpringBoot"><a href="#2、SpringBoot" class="headerlink" title="2、SpringBoot"></a>2、SpringBoot</h3><h3 id="3、MyBatis"><a href="#3、MyBatis" class="headerlink" title="3、MyBatis"></a>3、MyBatis</h3><h3 id="4、Thrift"><a href="#4、Thrift" class="headerlink" title="4、Thrift"></a>4、Thrift</h3><h3 id="5、Dubbo"><a href="#5、Dubbo" class="headerlink" title="5、Dubbo"></a>5、Dubbo</h3><h3 id="6、Spring-Cloud"><a href="#6、Spring-Cloud" class="headerlink" title="6、Spring Cloud"></a>6、Spring Cloud</h3><h3 id="7、RocketMQ"><a href="#7、RocketMQ" class="headerlink" title="7、RocketMQ"></a>7、RocketMQ</h3><h3 id="8、Kafka"><a href="#8、Kafka" class="headerlink" title="8、Kafka"></a>8、Kafka</h3><h2 id="四、操作系统与计算机网络"><a href="#四、操作系统与计算机网络" class="headerlink" title="四、操作系统与计算机网络"></a>四、操作系统与计算机网络</h2><h3 id="1、操作系统"><a href="#1、操作系统" class="headerlink" title="1、操作系统"></a>1、操作系统</h3><h3 id="2、计算机网络"><a href="#2、计算机网络" class="headerlink" title="2、计算机网络"></a>2、计算机网络</h3><h2 id="五、开发工具（2023年）"><a href="#五、开发工具（2023年）" class="headerlink" title="五、开发工具（2023年）"></a>五、开发工具（2023年）</h2><h3 id="1、Git"><a href="#1、Git" class="headerlink" title="1、Git"></a>1、Git</h3><h3 id="2、Maven"><a href="#2、Maven" class="headerlink" title="2、Maven"></a>2、Maven</h3><h3 id="3、IDEA"><a href="#3、IDEA" class="headerlink" title="3、IDEA"></a>3、IDEA</h3><h2 id="六、分布式与微服务以及架构理念"><a href="#六、分布式与微服务以及架构理念" class="headerlink" title="六、分布式与微服务以及架构理念"></a>六、分布式与微服务以及架构理念</h2><h3 id="1、架构思想"><a href="#1、架构思想" class="headerlink" title="1、架构思想"></a>1、架构思想</h3><h3 id="2、分布式"><a href="#2、分布式" class="headerlink" title="2、分布式"></a>2、分布式</h3><h3 id="3、微服务"><a href="#3、微服务" class="headerlink" title="3、微服务"></a>3、微服务</h3><h2 id="七、编程素养与思想"><a href="#七、编程素养与思想" class="headerlink" title="七、编程素养与思想"></a>七、编程素养与思想</h2><h3 id="1、设计模式（2023年）"><a href="#1、设计模式（2023年）" class="headerlink" title="1、设计模式（2023年）"></a>1、设计模式（2023年）</h3><h3 id="2、代码整洁与重构"><a href="#2、代码整洁与重构" class="headerlink" title="2、代码整洁与重构"></a>2、代码整洁与重构</h3><h3 id="3、单元测试"><a href="#3、单元测试" class="headerlink" title="3、单元测试"></a>3、单元测试</h3><h2 id="八、数据结构和算法思想"><a href="#八、数据结构和算法思想" class="headerlink" title="八、数据结构和算法思想"></a>八、数据结构和算法思想</h2><h3 id="1、数据结构基础"><a href="#1、数据结构基础" class="headerlink" title="1、数据结构基础"></a>1、数据结构基础</h3><h3 id="2、算法思想"><a href="#2、算法思想" class="headerlink" title="2、算法思想"></a>2、算法思想</h3><h3 id="3、Leetcode算法题汇总"><a href="#3、Leetcode算法题汇总" class="headerlink" title="3、Leetcode算法题汇总"></a>3、Leetcode算法题汇总</h3>]]></content>
      
      
      <categories>
          
          <category> 知识体系 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 导航 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git踩坑-fatal:Unable to create“.../.git/index.lock“ 的错误</title>
      <link href="/git-cai-keng-fatal-unable-to-create-git-index-lock-de-cuo-wu.html"/>
      <url>/git-cai-keng-fatal-unable-to-create-git-index-lock-de-cuo-wu.html</url>
      
        <content type="html"><![CDATA[<h1 id="出现的错误"><a href="#出现的错误" class="headerlink" title="出现的错误"></a>出现的错误</h1><p><img src="https://img-blog.csdnimg.cn/img_convert/5af18fa9cf4a126df5549e11c0198cc7.png" alt></p><h1 id="出现错误的原因"><a href="#出现错误的原因" class="headerlink" title="出现错误的原因"></a>出现错误的原因</h1><p>我在更新笔记上传git的时候，出现了误操作，在commit的时候参数指定错误，正常流程是这样的：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> add ./xx<span class="token function">git</span> commit -m <span class="token string">"message"</span><span class="token function">git</span> push origin master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>但是，我再commit那块少加了一个 -m参数。然后接着推送到远端仓库，发现并没有生效，然后我又重复了上面的操作，就会出现图片所出现的错误了。<br><img src="https://img-blog.csdnimg.cn/img_convert/1f6a0760c6730130832320dcfb90b39b.png" alt></p><h1 id="错误的解决方法"><a href="#错误的解决方法" class="headerlink" title="错误的解决方法"></a>错误的解决方法</h1><p>首先，我们先来看看这个错误是什么？错误信息指出我们文件夹里的index.lock文件不能重复创建，它已经存在了。上网了解了下这个文件的作用是啥！官方是这么给出解释的：</p><blockquote><p>在进行某些比较费时的git操作时自动生成，操作结束后自动删除，相当于一个锁定文件，目的在于防止对一个目录同时进行多个操作。有时强制关闭进行中的git操作，这个文件没有被自动删除，之后你就无法进行其他操作，必须手动删除。</p></blockquote><p>说通俗点就是：我们在commit的时候，git会自动创建一个index.lock文件，操作完成后就会自动删除。但是如果在commit的时候出现误操作或者意外，那么就会导致这个文件不会自动删除，所以想要正常运行，就必须手动把这个文件删除，删除指令就是这个：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">rm</span> -rf xxx/index.lock<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><p>按照上面讲的删除了这个文件以后，我又重复做了一遍commit和push的正确操作，github上的文件得到更新！<br><img src="https://img-blog.csdnimg.cn/img_convert/6df549e8552e3f241a2379e70b129c3f.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> 踩坑 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ProtocolBuffer源码分析</title>
      <link href="/protocolbuffer-yuan-ma-fen-xi.html"/>
      <url>/protocolbuffer-yuan-ma-fen-xi.html</url>
      
        <content type="html"><![CDATA[<h1 id="ProtocolBuffer学习"><a href="#ProtocolBuffer学习" class="headerlink" title="ProtocolBuffer学习"></a>ProtocolBuffer学习</h1><blockquote><p>原文链接：</p></blockquote><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><p><img src="https://img-blog.csdnimg.cn/f2863290611d43b28a2f6396537cd52a.png" alt="在这里插入图片描述"></p><blockquote><p>在学习的过程当中，参考了很多高质量的博客，在此进行感谢，如果在内容中引用您的内容不当，请联系我删除，表示抱歉。</p></blockquote><h2 id="一、它是什么？"><a href="#一、它是什么？" class="headerlink" title="一、它是什么？"></a>一、它是什么？</h2><h3 id="1、简介"><a href="#1、简介" class="headerlink" title="1、简介"></a>1、简介</h3><p>Protocol Buffer（以下简称Protobuf）是由Google设计的一种高效、轻量级的信息描述格式，它具有语言中立、平台中立、高效、可扩展等特性。Protocol Buffer诞生之初是为了解决索引服务器端的请求、响应新旧协议(高低版本)兼容性问题，正如它的字面意思所示-“协议缓冲区”；后被Google开源出来，逐渐发展成用于传输数据场景。相比于json、xml，Protobuf的编码长度更短、传输效率更高。它非常适合用来做数据存储、RPC数据通信等工作。</p><p>Protobuf目前有两个版本：proto2和proto3，本章按照proto3的版本来进行学习记录的。</p><h3 id="2、作用"><a href="#2、作用" class="headerlink" title="2、作用"></a>2、作用</h3><p>Protobuf起初用来解决谷歌内部服务器端的请求与响应新旧协议兼容性问题，后被谷歌（2008年）开源出来，经过不断优化，现在Protobuf非常适合用来做数据存储、RPC数据通信等工作。</p><p>Protobuf的工作流程很简单，一句话概括就是：通过将<code>结构化数据</code>进行序列化，从而实现<code>数据存储</code>和<code>RPC数据交换</code>，对端拿到数据做反序列化处理加载到内存进行数据使用的功能。</p><h3 id="3、特点"><a href="#3、特点" class="headerlink" title="3、特点"></a>3、特点</h3><blockquote><p>简介里有提到Protobuf的优点，这里将优缺点详细罗列下。</p></blockquote><h4 id="a-优点"><a href="#a-优点" class="headerlink" title="a.优点"></a>a.优点</h4><ol><li>性能方面：<ol><li>体积小：序列化后，数据可缩小约3倍；</li><li>序列化速度快：比XML、json快，从吞吐量角度来讲，Protobuf要比json高5倍，比XML速度就更快了；</li><li>传输速度快：由于序列化后数据体检变小，所以在传输时，同样带宽下，数据包变小，传输速度也相应变少</li></ol></li><li>使用方面：<ol><li>使用方便：本地安装protoc编译器或者在idea上安装protoc插件，即可编译proto文件生成各语言的源码进行使用；</li><li>维护成本低：多个平台只需要维护一套对象协议文件（.proto文件）即可；</li><li>兼容性好，即扩展性好，在不改变旧协议格式内容的前提下，就可以直接对数据结构进行更新；<ol><li>向前兼容性好，老协议可以解析新协议内容，但是解析新的内容时，会丢掉协议中新增部分的数据</li><li>向后兼容性好，新协议可以解析旧协议内容，对于新增字段的内容将会使用默认值</li></ol></li><li>加密型好：HTTP传输内容抓包只能看到字节；</li></ol></li><li>使用范围：<ol><li>跨平台</li><li>跨语言</li></ol></li></ol><h4 id="b-缺点"><a href="#b-缺点" class="headerlink" title="b.缺点"></a>b.缺点</h4><ol><li>功能方面：<ol><li>不适合用于对基于文本的<a href="https://baike.baidu.com/item/%E6%A0%87%E8%AE%B0%E8%AF%AD%E8%A8%80/5964436" target="_blank" rel="noopener">标记语言</a>（如HTML）建模，因为文本不适合描述数据结构</li><li>数据结构不够丰富，不能支持Java的一些数据结构，例如Java中Date等对象</li></ol></li><li>其他方面：<ol><li>解释性较差，以二进制的形式进行存储和传输，可读性非常差，只能通过查看.proto文件才能够了解到数据结构</li></ol></li></ol><h3 id="4、性能对比"><a href="#4、性能对比" class="headerlink" title="4、性能对比"></a>4、性能对比</h3><blockquote><p>使用JMH性能测试工具，对Protobuf、XML、fastjson、jackson等序列化协议进行了测试，以吞吐量为单位，来对比下各序列化协议性能的优劣</p></blockquote><h4 id="a-测试基准环境"><a href="#a-测试基准环境" class="headerlink" title="a.测试基准环境"></a>a.测试基准环境</h4><p><strong>硬件资源</strong></p><pre class="line-numbers language-wiki"><code class="language-wiki">机型: MacBook Pro（2021年）芯片: Apple M1 Pro内存: 16 GB<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>java</strong></p><pre class="line-numbers language-wiki"><code class="language-wiki">java version "1.8.0_211"Java(TM) SE Runtime Environment (build 1.8.0_211-b12)Java HotSpot(TM) 64-Bit Server VM (build 25.211-b12, mixed mode)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>序列化协议工具版本</strong></p><pre class="line-numbers language-wiki"><code class="language-wiki">protobuf版本:  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>protobuf.java.version</span><span class="token punctuation">></span></span>3.19.4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>protobuf.java.version</span><span class="token punctuation">></span></span> protobuf框架protostuff版本              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>protostuff.core.version</span><span class="token punctuation">></span></span>1.8.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>protostuff.core.version</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>protostuff.runtime.version</span><span class="token punctuation">></span></span>1.8.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>protostuff.runtime.version</span><span class="token punctuation">></span></span>fastjson版本: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>fastjson.version</span><span class="token punctuation">></span></span>1.2.78<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>fastjson.version</span><span class="token punctuation">></span></span>jackson版本:    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>jackson.version</span><span class="token punctuation">></span></span>2.12.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>jackson.version</span><span class="token punctuation">></span></span>kryo版本:            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>kryo.version</span><span class="token punctuation">></span></span>5.3.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>kryo.version</span><span class="token punctuation">></span></span>fst版本:            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>fst.version</span><span class="token punctuation">></span></span>2.57<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>fst.version</span><span class="token punctuation">></span></span>xstream版本:  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>xstream.version</span><span class="token punctuation">></span></span>1.4.19<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>xstream.version</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="b-测试结果"><a href="#b-测试结果" class="headerlink" title="b.测试结果"></a>b.测试结果</h4><blockquote><p>测试源码我放到自己的github上了，有兴趣的话可以将其克隆到本地运行一下，这里就直接上图了。</p><p>GitHub链接：<a href="https://github.com/markuszcl99/BinaryProtocol" target="_blank" rel="noopener">markuszcl99/BinaryProtocol (github.com)</a></p></blockquote><p><strong>序列化结果图</strong></p><blockquote><p>结论如下图所示，比较直观</p></blockquote><p><img src="https://img-blog.csdnimg.cn/ec36c3863e6c49f994ddd2398201e4bc.png" alt="在这里插入图片描述"></p><p><strong>反序列化结果图</strong></p><p><img src="https://img-blog.csdnimg.cn/f196e9a8e91f4ffcbf20ab34eb9a7e23.png" alt="在这里插入图片描述"></p><p><strong>序列化后字节数对比</strong></p><blockquote><p>结论（空间占比从小到大）：kryo &lt; fst &lt; protobuf &lt; protostuff &lt; fastjson &lt; jackson &lt; jdk &lt; xml</p></blockquote><pre class="line-numbers language-java"><code class="language-java">kryo serialized data size<span class="token operator">:</span><span class="token number">1253</span>fst serialized data size<span class="token operator">:</span><span class="token number">1468</span>protobuf serialized data size<span class="token operator">:</span><span class="token number">1500</span>protostuff serialized data size<span class="token operator">:</span><span class="token number">1513</span>protostuff from utils serialized data size<span class="token operator">:</span><span class="token number">1513</span>fastjson serialized data size<span class="token operator">:</span><span class="token number">2968</span>jackson serialized data size<span class="token operator">:</span><span class="token number">2984</span>jdk serialized data size<span class="token operator">:</span><span class="token number">4049</span>xml serialized data size<span class="token operator">:</span><span class="token number">4610</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5、应用场景"><a href="#5、应用场景" class="headerlink" title="5、应用场景"></a>5、应用场景</h3><ol><li>跨平台的RPC数据传输</li><li>对数据量大小有要求</li><li>对性能有要求</li></ol><h2 id="二、如何使用？"><a href="#二、如何使用？" class="headerlink" title="二、如何使用？"></a>二、如何使用？</h2><h3 id="1、使用流程"><a href="#1、使用流程" class="headerlink" title="1、使用流程"></a>1、使用流程</h3><blockquote><p>使用步骤如下图所示：</p></blockquote><p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-42ptBg1D-1652596106144)(<a href="http://cdn.markuszhang.com/img/Protobuf%E4%BD%BF%E7%94%A8%E6%B5%81%E7%A8%8B%E5%9B%BE.png)]" target="_blank" rel="noopener">http://cdn.markuszhang.com/img/Protobuf%E4%BD%BF%E7%94%A8%E6%B5%81%E7%A8%8B%E5%9B%BE.png)]</a></p><h4 id="a-IDEA插件"><a href="#a-IDEA插件" class="headerlink" title="a.IDEA插件"></a>a.IDEA插件</h4><p>对于<code>通过IDEA插件</code>的方式<a href="https://github.com/markuszcl99/BinaryProtocol" target="_blank" rel="noopener">源码</a>中有，就不详细说了。在编写完.proto文件后，直接通过maven插件点击编译即可完成编译。</p><p><img src="https://img-blog.csdnimg.cn/f0dfb77d78424ae7988c4184af9a4c80.png" alt="在这里插入图片描述"></p><h4 id="b-命令行"><a href="#b-命令行" class="headerlink" title="b.命令行"></a>b.命令行</h4><ol><li><p>下载安装包：<a href="https://github.com/protocolbuffers/protobuf/releases" target="_blank" rel="noopener">安装包下载</a>，选择一个你需要的版本进行下载，</p></li><li><p>安装——打开终端，依次执行以下命令</p></li></ol><pre class="line-numbers language-bash"><code class="language-bash">// pre 如果电脑没有安装HOMEBREW工具，就先安装该工具，安装过的就跳过此步➜  ~ /usr/bin/ruby -e <span class="token string">"<span class="token variable"><span class="token variable">$(</span>curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install<span class="token variable">)</span></span>"</span>// 安装protobuf环境的命令➜  ~ brew <span class="token function">install</span> autoconf automake libtool curl// Step1：安装 Protocol Buffer 依赖// 注：Protocol Buffer 依赖于  autoconf、automake、libtool、curl➜  ~ <span class="token function">cd</span> env/path/protobuf-3.19.4➜  protobuf-3.19.4// Step2：进入 Protocol Buffer安装包 解压后的文件夹（我的解压文件放在桌面）➜  protobuf-3.19.4 ./autogen.sh// Step3：运行 autogen.sh 脚本➜  protobuf-3.19.4 ./configure// Step4：运行 configure.sh 脚本➜  protobuf-3.19.4 <span class="token function">make</span>// Step5：编译未编译的依赖包➜  protobuf-3.19.4 <span class="token function">make</span> check// Step6：检查依赖包是否完整➜  protobuf-3.19.4 <span class="token function">make</span> <span class="token function">install</span>// Step7：开始安装Protocol Buffer<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>检验Protobuf是否安装成功</li></ol><pre class="line-numbers language-bash"><code class="language-bash">➜  my-blog protoc --versionlibprotoc 3.19.4<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="2、实战记录"><a href="#2、实战记录" class="headerlink" title="2、实战记录"></a>2、实战记录</h3><blockquote><ol><li>编写 .proto 文件</li><li>使用IDEA插件编译 or 使用终端命令编译 文件</li><li>编译后的源码加入到工程中</li></ol></blockquote><h4 id="a-编写-proto文件"><a href="#a-编写-proto文件" class="headerlink" title="a.编写.proto文件"></a>a.编写.proto文件</h4><blockquote><p>在编写.proto文件之前，先学习下proto的语法（基于proto3）</p></blockquote><p><strong>protobuf支持的数据类型</strong></p><table><thead><tr><th>.proto Type</th><th>Notes</th><th>Java Type</th></tr></thead><tbody><tr><td>double</td><td></td><td>double</td></tr><tr><td>float</td><td></td><td>float</td></tr><tr><td>int32</td><td>使用可变长编码方式，但是对于负数的编码效率是非常低的，如果你的数据中有负数，请采用sint32</td><td>int</td></tr><tr><td>int64</td><td>使用可变长编码方式，但是对于负数的编码效率是非常低的，如果你的数据中有负数，请采用sint64</td><td>long</td></tr><tr><td>uint32</td><td>使用可变长编码方式</td><td>int^[1]^</td></tr><tr><td>uint64</td><td>使用可变长编码方式</td><td>long^[1]^</td></tr><tr><td>sint32</td><td>使用可变长编码方式，有符号的int类型值，该类型比普通的int32类型在编码上更高效</td><td>int</td></tr><tr><td>sint64</td><td>使用可变长编码方式，有符号的long类型值，该类型比普通的int64类型在编码上更高效</td><td>long</td></tr><tr><td>fixed32</td><td>使用固定4字节编码方式，如果你的数据值经常比2^28^更大的话，此类型编码会比uint32类型更高效</td><td>int^[1]^</td></tr><tr><td>fixed64</td><td>使用固定8字节编码方式，如果你的数据值经常比2^56^更大的话，此类型编码会比uint64类型更高效</td><td>long^[1]^</td></tr><tr><td>sfixed32</td><td>使用固定4字节编码方式</td><td>int</td></tr><tr><td>sfixed64</td><td>使用固定8字节编码方式</td><td>long</td></tr><tr><td>bool</td><td></td><td>boolean</td></tr><tr><td>string</td><td>字符串类型，它总是包含 UTF-8编码 或者7-bit ASCII文本，并且长度不能超过232</td><td>String</td></tr><tr><td>bytes</td><td>可以包含长度不超过232的任意字节序列</td><td>ByteString</td></tr></tbody></table><p><strong>protobuf语法</strong></p><blockquote><p>protobuf语法可以通过这边文章【<a href="https://juejin.cn/post/6978474549025177608" target="_blank" rel="noopener">戳此</a>】来学习，比较详细了，这里就不赘述了。</p></blockquote><p><strong>编写.proto文件</strong></p><p>编写一个简单示例，用于编译演示：</p><pre class="line-numbers language-protobuf"><code class="language-protobuf"><span class="token comment" spellcheck="true">/*    ProtoStudy.proto  头部相关声明*/</span>syntax <span class="token operator">=</span> <span class="token string">"proto3"</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 语法版本为protobuf3.0</span><span class="token keyword">package</span> com<span class="token punctuation">.</span>markus<span class="token punctuation">.</span>bp<span class="token punctuation">.</span>domain<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 定义包名</span><span class="token comment" spellcheck="true">//import "common.proto"; // 导入common.proto</span>option java_package <span class="token operator">=</span> <span class="token string">"com.markus.bp.domain"</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 指定java包</span><span class="token keyword">message</span> TypeStudy<span class="token punctuation">{</span>  <span class="token primitive symbol">double</span> double_type <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token primitive symbol">int32</span> int_type <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>  <span class="token primitive symbol">int64</span> long_type <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="b-编译-proto文件"><a href="#b-编译-proto文件" class="headerlink" title="b.编译.proto文件"></a>b.编译.proto文件</h4><p>上面提到了用IDEA插件进行文件编译，下面记录下用终端命令来进行文件编译：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 进入到对应编写文件的路径中</span>➜  resources git:<span class="token punctuation">(</span>master<span class="token punctuation">)</span> ✗ <span class="token function">cd</span> proto➜  proto git:<span class="token punctuation">(</span>master<span class="token punctuation">)</span> ✗ <span class="token function">ls</span>ProtoStudy.proto UserProto.proto<span class="token comment" spellcheck="true"># 对ProtoStudy.proto文件进行编译,输出到指定目录下</span>➜  proto git:<span class="token punctuation">(</span>master<span class="token punctuation">)</span> ✗ protoc --java_out<span class="token operator">=</span><span class="token punctuation">..</span>/<span class="token punctuation">..</span>/java/  ProtoStudy.proto<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>下图即为编译成功后的Java文件</p><p><img src="https://img-blog.csdnimg.cn/img_convert/a8dcf49304d76f5ecd997a1a0af4f674.png" alt="image-20220513114016623"></p><h4 id="c-使用编译后的Java类实现数据序列化与反序列化"><a href="#c-使用编译后的Java类实现数据序列化与反序列化" class="headerlink" title="c.使用编译后的Java类实现数据序列化与反序列化"></a>c.使用编译后的Java类实现数据序列化与反序列化</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>markus<span class="token punctuation">.</span>bp<span class="token punctuation">.</span>study<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>google<span class="token punctuation">.</span>protobuf<span class="token punctuation">.</span>InvalidProtocolBufferException<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>markus<span class="token punctuation">.</span>bp<span class="token punctuation">.</span>domain<span class="token punctuation">.</span>ProtoStudy<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author: markus * @Description: protobuf 使用学习 * @Blog: http://markuszhang.com/ */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProtoUseStudy</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> InvalidProtocolBufferException <span class="token punctuation">{</span>        ProtoStudy<span class="token punctuation">.</span>TypeStudy typeStudy <span class="token operator">=</span> ProtoStudy<span class="token punctuation">.</span>TypeStudy<span class="token punctuation">.</span><span class="token function">newBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">setDoubleType</span><span class="token punctuation">(</span><span class="token number">1.03D</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">setIntType</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">setLongType</span><span class="token punctuation">(</span>123L<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> typeStudy<span class="token punctuation">.</span><span class="token function">toByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 将对象序列化为字节数据</span>        ProtoStudy<span class="token punctuation">.</span>TypeStudy typeStudyFromDeserialize <span class="token operator">=</span> ProtoStudy<span class="token punctuation">.</span>TypeStudy<span class="token punctuation">.</span><span class="token function">parseFrom</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 反序列化</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>typeStudyFromDeserialize<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*double_type: 1.03int_type: 123long_type: 123Process finished with exit code 0 */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="三、原理分析"><a href="#三、原理分析" class="headerlink" title="三、原理分析"></a>三、原理分析</h2><h3 id="1、知识储备"><a href="#1、知识储备" class="headerlink" title="1、知识储备"></a>1、知识储备</h3><h4 id="a-网络通信协议"><a href="#a-网络通信协议" class="headerlink" title="a.网络通信协议"></a>a.网络通信协议</h4><p>TODO–&gt;网络相关的文章</p><p>OSI七层模型、TCP/IP四层模型    </p><h4 id="b-序列化与反序列化"><a href="#b-序列化与反序列化" class="headerlink" title="b.序列化与反序列化"></a>b.序列化与反序列化</h4><blockquote><p>序列化与反序列化的过程是属于TCP/IP四层模型中的应用层、OSI七层模型的表示层。</p></blockquote><p>序列化与反序列化的作用就是在两台机器通信之间建立的一种数据表示的一种协议，能够让提供信息的机器制造的数据在接收信息的机器上能够正确的解析识别。</p><ol><li>序列化：把应用层的对象转换成二进制串（编码+存储）；</li><li>反序列化：将二进制串转换成应用层的对象（解码+赋值）。</li></ol><h4 id="c-数据结构、对象与二进制串"><a href="#c-数据结构、对象与二进制串" class="headerlink" title="c.数据结构、对象与二进制串"></a>c.数据结构、对象与二进制串</h4><p>从Java维度来讲，对象 = Object = 类实例；二进制串 = byte[]；数据结构类似于POJO（Plain Old Java Object）或者JavaBean（只有getter和setter方法）</p><h4 id="d-T-L-V数据存储格式"><a href="#d-T-L-V数据存储格式" class="headerlink" title="d.T-L-V数据存储格式"></a>d.T-L-V数据存储格式</h4><blockquote><p>Tag-Length-Value是T-L-V的全称，即标识-长度-值的存储方式（其中长度length是可选的，比如Varint编码数据就不需要存储Length，下面会提到）</p></blockquote><p>数据可以通过Tag-Length-Value的方式来进行表示，多个数据以此种类型表示并进行拼接最终形成一个字节流，从而能实现数据的存储和通信</p><p>示意图如下：<br><img src="https://img-blog.csdnimg.cn/67bf1947dc1645d1a251c293e7402f72.png" alt="在这里插入图片描述"></p><p><strong>Tag</strong>是经过PB采用Varint &amp; Zigzag编码后的消息字段标识号 &amp; 数据类型的值；字段标识号就是.proto文件中的字段序号，数据类型值就是Wire Type值</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">WireFormat</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// wire type取值如下</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> WIRETYPE_VARINT <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> WIRETYPE_FIXED64 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> WIRETYPE_LENGTH_DELIMITED <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> WIRETYPE_START_GROUP <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> WIRETYPE_END_GROUP <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> WIRETYPE_FIXED32 <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过这种格式进行数据拼凑有以下特点：</p><ul><li>不需要分隔符就能区分字段，避免了分割符的使用；</li><li>数据十分的紧凑，空间利用率非常高；</li><li>对于没有设置值的字段不会进行编码，在字节流中完全不存在。<ul><li>只有在解码的时候，如果这个字段不存在，会设置默认值</li></ul></li></ul><h4 id="e-小端序与大端序"><a href="#e-小端序与大端序" class="headerlink" title="e.小端序与大端序"></a>e.小端序与大端序</h4><blockquote><p>这里就是说明一下 x86系列CPU是小端序，即低位字节存入低地址、高位字节存入高地址；Java数据和网络传输采用大端序，即高位字节存入低地址、低位字节存储高地址</p><p><code>什么是高地址？什么是低地址？</code>:根据不同机型的堆栈设计，有两种情况：一是每入栈一个数，栈顶地址加1，每出栈一个数，栈顶地址减1，即堆栈区是由内存的低地址向高地址。另一种是每入栈一个数，栈顶地址减1，每出栈一个数，栈顶地址加1，即堆栈区是由内存的高地址向低地址。</p></blockquote><p><a href="https://blog.csdn.net/Casuall/article/details/98481469" target="_blank" rel="noopener">大端序和小端序_Casuall的博客-CSDN博客</a></p><p>[java – Big Endian and Little Endian 大端和小端概念讲解及如何转换](<a href="https://blog.csdn.net/penriver/article/details/124765592#:~:text=java" target="_blank" rel="noopener">https://blog.csdn.net/penriver/article/details/124765592#:~:text=java</a> 全部为大端 (与平台无关) ： Java二进制文件中的所有内容都以 大端顺序,存储。 这意味着如果您只使用Java，那么所有文件在所有平台 (Mac、PC、UNIX等)上的处理方式都是相同的。 C语言默认是小端模式 ：用C语言编写的程序通常使用 小端顺序)</p><h3 id="2、PB的序列化与反序列化过程"><a href="#2、PB的序列化与反序列化过程" class="headerlink" title="2、PB的序列化与反序列化过程"></a>2、PB的序列化与反序列化过程</h3><blockquote><p>序列化与反序列化过程直接通过自身框架和编译器就能完成，编译器将编写的.proto文件编译成相应语言的代码，通过方法调用就能实现序列化和反序列化。</p></blockquote><p><img src="https://img-blog.csdnimg.cn/0aae6102fefa4326bf9d38d57c60d000.png" alt="在这里插入图片描述"></p><h4 id="a-PB序列化过程"><a href="#a-PB序列化过程" class="headerlink" title="a.PB序列化过程"></a>a.PB序列化过程</h4><p><code>序列化使用：protoObject.toByteArray();</code></p><ol><li>判断每个字段是否设置了值，只有在有值的情况下才会进行相应的编码；</li><li>根据字段的<code>标识号</code>以及<code>数据类型</code>，使用相对应的数据编码方式进行编码。</li></ol><h4 id="b-PB反序列化过程"><a href="#b-PB反序列化过程" class="headerlink" title="b.PB反序列化过程"></a>b.PB反序列化过程</h4><p><code>反序列化使用：ProtoObject.parseFrom(byte[]);</code></p><ol><li>通过将字节流读入，将字节流解码；</li><li>将解析出来的数据，转换成相应语言的对象对于的数据结构里。</li></ol><h3 id="3、PB的序列化与反序列化原理"><a href="#3、PB的序列化与反序列化原理" class="headerlink" title="3、PB的序列化与反序列化原理"></a>3、PB的序列化与反序列化原理</h3><blockquote><p>上面简单说了下Protobuf对数据进行序列化和反序列化的过程，接下来记录下它内部的原理。</p><p>核心的类：CodedOutputStream、CodedInputStream</p></blockquote><p>前面我们说到，序列化就是对数据编码+存储的一个过程。Protobuf内部不同的数据类型，其编码格式以及存储方式如下图所示：</p><table><thead><tr><th align="center">Wire Type值</th><th align="center">编码方式</th><th align="center">编码长度</th><th align="center">存储方式</th><th align="center">相应的数据类型</th></tr></thead><tbody><tr><td align="center">0</td><td align="center">Varint<br>（负数时，采用Zigzag辅助编码）</td><td align="center">变长（1-10字节）</td><td align="center">T-V</td><td align="center">int32,int64,uint32,uint64,bool,enum,sint32,sint64</td></tr><tr><td align="center">1</td><td align="center">64-bit</td><td align="center">固定8字节</td><td align="center">T-V</td><td align="center">fixed64,sfixed64,double</td></tr><tr><td align="center">2</td><td align="center">Length-delimi</td><td align="center">变长</td><td align="center">T-L-V</td><td align="center">string,bytes,embedded messages,packed repeated fields</td></tr><tr><td align="center">3</td><td align="center">Start Group</td><td align="center">已弃用</td><td align="center">已弃用</td><td align="center">Group（已弃用）</td></tr><tr><td align="center">4</td><td align="center">End Group</td><td align="center">已弃用</td><td align="center">已弃用</td><td align="center">Group（已弃用）</td></tr><tr><td align="center">5</td><td align="center">32-bit</td><td align="center">固定4字节</td><td align="center">T-V</td><td align="center">fixed32,sfixed64,float</td></tr></tbody></table><h4 id="a-Varint编码（wiretype-0）"><a href="#a-Varint编码（wiretype-0）" class="headerlink" title="a.Varint编码（wiretype=0）"></a>a.Varint编码（wiretype=0）</h4><blockquote><ul><li>一种可变长的编码方式</li><li>值越小，使用它编码后字节数越少，这样就起到了对数据进行压缩的作用</li><li>不适合对负数用此方式编码</li></ul></blockquote><p>接下来我们看下源码中的核心流程</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// proto编译器编译后的类，比如编写的.proto文件有三个字段，分别是double类型、int32类型以及int64类型，对应编译器就生成了这样的一段代码</span><span class="token comment" spellcheck="true">// 下面这段代码也阐述之前的一个点：字段没有被设置值时，则会跳过不管</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">writeTo</span><span class="token punctuation">(</span>com<span class="token punctuation">.</span>google<span class="token punctuation">.</span>protobuf<span class="token punctuation">.</span>CodedOutputStream output<span class="token punctuation">)</span>  <span class="token keyword">throws</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>Double<span class="token punctuation">.</span><span class="token function">doubleToRawLongBits</span><span class="token punctuation">(</span>doubleType_<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 字段值不为空时，调用此方法对double类型数值进行编码</span>    output<span class="token punctuation">.</span><span class="token function">writeDouble</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> doubleType_<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>intType_ <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 字段值不为空时，调用此方法对int32类型数值进行编码</span>    output<span class="token punctuation">.</span><span class="token function">writeInt32</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> intType_<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>longType_ <span class="token operator">!=</span> 0L<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 字段值不为空时，调用此方法对int64类型数值进行编码</span>    output<span class="token punctuation">.</span><span class="token function">writeInt64</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> longType_<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  unknownFields<span class="token punctuation">.</span><span class="token function">writeTo</span><span class="token punctuation">(</span>output<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 这里以int32类型来看Varint编码流程</span><span class="token comment" spellcheck="true">// CodedOutputStream#writeInt32</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">writeInt32</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token keyword">int</span> fieldNumber<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//写入标识，也就是Tag-Length-Value中的Tag（此方法内部就是将字段号+wiretype用一个或多个字节表示，低三位表示wiretype，高位表示字段号，字段越大，占用的字节数越多）</span>  <span class="token function">writeTag</span><span class="token punctuation">(</span>fieldNumber<span class="token punctuation">,</span> WireFormat<span class="token punctuation">.</span>WIRETYPE_VARINT<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//开始对数据进行编码</span>  <span class="token function">writeInt32NoTag</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// CodedOutputStream#writeInt32NoTag</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">writeInt32NoTag</span><span class="token punctuation">(</span><span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 正数，直接使用Varint编码，我们先分析这个方法</span>    <span class="token function">writeUInt32NoTag</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 负数，就会通过int64类型Varint编码来做，会始终使用10字节表示数据（想要避免这种情况就采用sint32来编码负数）</span>    <span class="token comment" spellcheck="true">// Must sign-extend.</span>    <span class="token function">writeUInt64NoTag</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">writeUInt32NoTag</span><span class="token punctuation">(</span><span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>HAS_UNSAFE_ARRAY_OPERATIONS      <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>Android<span class="token punctuation">.</span><span class="token function">isOnAndroidDevice</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token operator">&amp;&amp;</span> <span class="token function">spaceLeft</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">>=</span> MAX_VARINT32_SIZE<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// xxx 此处代码不关心</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// Varint编码的核心流程</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>      <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 判断value(31bit-8bit)是否还有有效数字，如果没有的话，说明这次循环是最后一次右移操作</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>value <span class="token operator">&amp;</span> <span class="token operator">~</span><span class="token number">0x7F</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// 将value转为byte类型值，低七位为有效数字，第八位补0得到1字节数据</span>          buffer<span class="token punctuation">[</span>position<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span> value<span class="token punctuation">;</span>          <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// &lt;1> (value &amp; 0x7F) --> 得到字节串低七位数据</span>          <span class="token comment" spellcheck="true">// &lt;2> (value &amp; 0x7F) | 0x80 --> 高位补1得到1字节数据</span>          buffer<span class="token punctuation">[</span>position<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>value <span class="token operator">&amp;</span> <span class="token number">0x7F</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token number">0x80</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// &lt;3> 将字节串无符号右移7位</span>          value <span class="token operator">>>>=</span> <span class="token number">7</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IndexOutOfBoundsException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">OutOfSpaceException</span><span class="token punctuation">(</span>        String<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"Pos: %d, limit: %d, len: %d"</span><span class="token punctuation">,</span> position<span class="token punctuation">,</span> limit<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// CodedInputStream#readRawVarint64SlowPath 解码的核心代码</span><span class="token comment" spellcheck="true">// 在调用此方法的时候就已经确定了当前字段值的字节串的起始位置</span><span class="token keyword">long</span> <span class="token function">readRawVarint64SlowPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>  <span class="token keyword">long</span> result <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> shift <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> shift <span class="token operator">&lt;</span> <span class="token number">64</span><span class="token punctuation">;</span> shift <span class="token operator">+=</span> <span class="token number">7</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//&lt;1> 顺序读入字节</span>    <span class="token keyword">final</span> <span class="token keyword">byte</span> b <span class="token operator">=</span> <span class="token function">readRawByte</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//&lt;2> (b &amp; 0x7F) 将当前字节最高位置为0</span>    <span class="token comment" spellcheck="true">//&lt;3> (b &amp; 0x7F) &lt;&lt; shift 左移shift位 （这里也是Protobuf采用小端序存储，转换为Java大端序存储的处理方法）</span>    <span class="token comment" spellcheck="true">//&lt;4> 将result 与(long) (b &amp; 0x7F) &lt;&lt; shift做或等操作</span>    result <span class="token operator">|=</span> <span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>b <span class="token operator">&amp;</span> <span class="token number">0x7F</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> shift<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>b <span class="token operator">&amp;</span> <span class="token number">0x80</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">throw</span> InvalidProtocolBufferException<span class="token punctuation">.</span><span class="token function">malformedVarint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>看完源码后，我们可能会有一个疑问：在编码时，在高位有数据时，用7bit有效位+0组成1字节数据；高位无数据时用7bit有效位+1组成1字节数据呢？</p><p>这个问题其实也侧面反映了为什么Varint编码不需要<code>T-L-V</code>中的<code>L</code>了，它会将数值每7位为一组，第8位表示符号位，告诉程序当前字段数据是否到最后了，在解析时，遍历字节时，当判断第8位为1的时候说明此字段数据还没有结束，直到遍历到一个字节的高8位是0时结束，这样就省去Length来代表数据的长度了。</p><p>下面通过两个例子来顺一下源码的意思：</p><p><img src="https://img-blog.csdnimg.cn/18314c44b9074c639562c7094ce8d601.png" alt="在这里插入图片描述"></p><p>从上图可以看出：</p><ul><li>对于int32类型值来说，普通存储的话得需要4字节，而通过Varint编码可以让其降到更低；</li><li>当数据超过2^28^时，才会使用5字节来表示4字节数据；当数据在小于2^21^时，数据会使用3字节以内来表示数据；也就是说当数据小于2^21^时，就达到了数据压缩的效果。                                                                                                                                                                              </li></ul><p>接下来再来看下Varint解码的过程</p><p><img src="https://img-blog.csdnimg.cn/b4fe3de26bc1459a902e16c19c656f8d.png" alt="在这里插入图片描述"></p><h4 id="b-Zigzag编码-wiretype-0"><a href="#b-Zigzag编码-wiretype-0" class="headerlink" title="b.Zigzag编码(wiretype=0)"></a>b.Zigzag编码(wiretype=0)</h4><blockquote><p>上面记录了Varint编码的过程，我们知道越小的数据，编码后占用的字节数越少，那么问题来了，当数据表示的是负数时怎么办呢？负数的最高位为1，如果单纯的用Varint编码的话，负数会被认为成一个很大的数，会使用10字节表示数据，那怎么办呢？Zigzag就解决了这个问题。</p><ul><li>Zigzag也是一种可变长编码方式</li><li>通过使用<code>无符号数</code>来表示 <code>有符号数字</code>，这样使得绝对值小的数据就可以采用较少<code>字节</code>来表示</li></ul></blockquote><p>针对上述情况，protobuf通过将数据先进行Zigzag编码再进行Varint编码，我们将字段类型更换为sint32类型：</p><pre class="line-numbers language-protobuf"><code class="language-protobuf"><span class="token comment" spellcheck="true">/*  头部相关声明*/</span>syntax <span class="token operator">=</span> <span class="token string">"proto3"</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 语法版本为protobuf3.0</span><span class="token keyword">package</span> com<span class="token punctuation">.</span>markus<span class="token punctuation">.</span>bp<span class="token punctuation">.</span>domain<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 定义包名</span><span class="token comment" spellcheck="true">//import "common.proto"; // 导入common.proto</span>option java_package <span class="token operator">=</span> <span class="token string">"com.markus.bp.domain"</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 指定java包</span><span class="token keyword">message</span> TypeStudy<span class="token punctuation">{</span>  <span class="token primitive symbol">double</span> double_type <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token primitive symbol">int32</span> int_type <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>  <span class="token primitive symbol">int64</span> long_type <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>  <span class="token primitive symbol">sint32</span> sint_type <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 本次新增</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们来看下示例: </p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProtoUseStudy</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> InvalidProtocolBufferException <span class="token punctuation">{</span>        ProtoStudy<span class="token punctuation">.</span>TypeStudy typeStudy <span class="token operator">=</span> ProtoStudy<span class="token punctuation">.</span>TypeStudy<span class="token punctuation">.</span><span class="token function">newBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">setDoubleType</span><span class="token punctuation">(</span><span class="token number">1.03D</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">setIntType</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">setLongType</span><span class="token punctuation">(</span>123L<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">setSintType</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 本次调试这个源码</span>                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> typeStudy<span class="token punctuation">.</span><span class="token function">toByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 将对象序列化为字节数据</span>        ProtoStudy<span class="token punctuation">.</span>TypeStudy typeStudyFromDeserialize <span class="token operator">=</span> ProtoStudy<span class="token punctuation">.</span>TypeStudy<span class="token punctuation">.</span><span class="token function">parseFrom</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>typeStudyFromDeserialize<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们来看下源码:</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// CodedOutputStream#writeSInt32</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">writeSInt32</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token keyword">int</span> fieldNumber<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//&lt;1> encodeZigZag32(value) --> 使用ZigZag编码</span>  <span class="token comment" spellcheck="true">//&lt;2> 和int32流程一样（本次不赘述了）</span>  <span class="token function">writeUInt32</span><span class="token punctuation">(</span>fieldNumber<span class="token punctuation">,</span> <span class="token function">encodeZigZag32</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// CodedOutputStream#encodeZigZag32</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">encodeZigZag32</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// Note:  the right-shift must be arithmetic --> 右移操作必须是算术右移，也就是有符号右移，最高位为1时，右移高位补1，否则补0</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span>n <span class="token operator">>></span> <span class="token number">31</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//&lt;1> n &lt;&lt; 1 --> 将二进制数据左移1位</span>  <span class="token comment" spellcheck="true">//&lt;2> n >> 31 --> 将二进制数据右移31位</span>  <span class="token comment" spellcheck="true">//&lt;3> 两者结果做异或运算</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// CodedInputStream#decodeZigZag32</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">decodeZigZag32</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>n <span class="token operator">>>></span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token operator">-</span><span class="token punctuation">(</span>n <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Zigzag编码流程图如下（更直观）</p><p><img src="https://img-blog.csdnimg.cn/0dcda3073ec44e0386bac9960c19958a.png" alt="\[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-I6QgiWo1-1652596106145)(http://cdn.markuszhang.com/img/fced6eee5ebcb842abbfc0d905efcdb3.png)\]"></p><p>Zigzag编码就是对Varint编码的补充，从而更好的进行数据压缩。所以当我们提前已经知道我们的数据可能有负数时，应该提早采用<code>sint32/sint64</code>数据类型</p><h4 id="c-64-32-bit固定编码-wiretype-1-amp-5"><a href="#c-64-32-bit固定编码-wiretype-1-amp-5" class="headerlink" title="c.64(32)-bit固定编码(wiretype=1&amp;5)"></a>c.64(32)-bit固定编码(wiretype=1&amp;5)</h4><blockquote><p>64(32)-bit编码方式：编码后的数据具备固定大小 = 64位（8字节）/32位（4字节）</p><p>使用类型：</p><ul><li>64-bit: fixed64 sfixed64 double</li><li>32-bit: fixed32 sfixed32 int</li></ul></blockquote><p>这里我们拿double(64-bit编码)来举例：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// CodedOutputStream#writeDouble</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">writeDouble</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token keyword">int</span> fieldNumber<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token keyword">double</span> value<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//&lt;1> Double.doubleToRawLongBits(value) 将double值转为8字节表示</span>  <span class="token comment" spellcheck="true">//&lt;2> writeFixed64()进行固定64-bit编码</span>  <span class="token function">writeFixed64</span><span class="token punctuation">(</span>fieldNumber<span class="token punctuation">,</span> Double<span class="token punctuation">.</span><span class="token function">doubleToRawLongBits</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// CodedOutputStream#writeFixed64</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">writeFixed64</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token keyword">int</span> fieldNumber<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token keyword">long</span> value<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//&lt;1> 写入Tag</span>  <span class="token function">writeTag</span><span class="token punctuation">(</span>fieldNumber<span class="token punctuation">,</span> WireFormat<span class="token punctuation">.</span>WIRETYPE_FIXED64<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//&lt;2> 对Value进行编码</span>  <span class="token function">writeFixed64NoTag</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 固定编码比较简单（高位在后，低位在前）</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">writeFixed64NoTag</span><span class="token punctuation">(</span><span class="token keyword">long</span> value<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>  <span class="token keyword">try</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 从低位开始，依次进行编码</span>    buffer<span class="token punctuation">[</span>position<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xFF</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    buffer<span class="token punctuation">[</span>position<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>value <span class="token operator">>></span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xFF</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    buffer<span class="token punctuation">[</span>position<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>value <span class="token operator">>></span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xFF</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    buffer<span class="token punctuation">[</span>position<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>value <span class="token operator">>></span> <span class="token number">24</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xFF</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    buffer<span class="token punctuation">[</span>position<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>value <span class="token operator">>></span> <span class="token number">32</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xFF</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    buffer<span class="token punctuation">[</span>position<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>value <span class="token operator">>></span> <span class="token number">40</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xFF</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    buffer<span class="token punctuation">[</span>position<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>value <span class="token operator">>></span> <span class="token number">48</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xFF</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    buffer<span class="token punctuation">[</span>position<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>value <span class="token operator">>></span> <span class="token number">56</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xFF</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IndexOutOfBoundsException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">OutOfSpaceException</span><span class="token punctuation">(</span>      String<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"Pos: %d, limit: %d, len: %d"</span><span class="token punctuation">,</span> position<span class="token punctuation">,</span> limit<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过源码，我们也可以看到固定编码方式也是通过Tag-Value的方式进行存储的。</p><h4 id="d-Length-delimi编码-wiretype-2"><a href="#d-Length-delimi编码-wiretype-2" class="headerlink" title="d.Length-delimi编码(wiretype=2)"></a>d.Length-delimi编码(wiretype=2)</h4><blockquote><ul><li>string、bytes类型编码</li><li>message嵌套编码</li><li>repeated编码</li></ul></blockquote><p><strong>string、bytes类型编码：</strong></p><p>这次我们通过string类型来分析源码：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// GeneratedMessageV3#writeString</span><span class="token keyword">protected</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">writeString</span><span class="token punctuation">(</span>  CodedOutputStream output<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token keyword">int</span> fieldNumber<span class="token punctuation">,</span> <span class="token keyword">final</span> Object value<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 两种编码方式</span>  <span class="token comment" spellcheck="true">// string类型</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token keyword">instanceof</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    output<span class="token punctuation">.</span><span class="token function">writeString</span><span class="token punctuation">(</span>fieldNumber<span class="token punctuation">,</span> <span class="token punctuation">(</span>String<span class="token punctuation">)</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// bytes类型</span>    output<span class="token punctuation">.</span><span class="token function">writeBytes</span><span class="token punctuation">(</span>fieldNumber<span class="token punctuation">,</span> <span class="token punctuation">(</span>ByteString<span class="token punctuation">)</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// GeneratedMessageV3#writeStringNoTag</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">writeStringNoTag</span><span class="token punctuation">(</span>String value<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>  <span class="token keyword">final</span> <span class="token keyword">int</span> oldPosition <span class="token operator">=</span> position<span class="token punctuation">;</span>  <span class="token keyword">try</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// UTF-8 byte length of the string is at least its UTF-16 code unit length (value.length()),</span>    <span class="token comment" spellcheck="true">// and at most 3 times of it. We take advantage of this in both branches below.</span>    <span class="token comment" spellcheck="true">// UTF-16 固定2字节</span>    <span class="token comment" spellcheck="true">// UTF-8 有可能1字节、2字节、3字节，但最多不超过3个。</span>    <span class="token comment" spellcheck="true">// 如果全部为英文或大部分都是英文的话，那么UTF-8占优势；相反如果全部是中文或者大部分是中文的话，UTF-16占优势</span>    <span class="token keyword">final</span> <span class="token keyword">int</span> maxLength <span class="token operator">=</span> value<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> Utf8<span class="token punctuation">.</span>MAX_BYTES_PER_CHAR<span class="token punctuation">;</span>    <span class="token keyword">final</span> <span class="token keyword">int</span> maxLengthVarIntSize <span class="token operator">=</span> <span class="token function">computeUInt32SizeNoTag</span><span class="token punctuation">(</span>maxLength<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">final</span> <span class="token keyword">int</span> minLengthVarIntSize <span class="token operator">=</span> <span class="token function">computeUInt32SizeNoTag</span><span class="token punctuation">(</span>value<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>minLengthVarIntSize <span class="token operator">==</span> maxLengthVarIntSize<span class="token punctuation">)</span> <span class="token punctuation">{</span>      position <span class="token operator">=</span> oldPosition <span class="token operator">+</span> minLengthVarIntSize<span class="token punctuation">;</span>      <span class="token keyword">int</span> newPosition <span class="token operator">=</span> Utf8<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> buffer<span class="token punctuation">,</span> position<span class="token punctuation">,</span> <span class="token function">spaceLeft</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// Since this class is stateful and tracks the position, we rewind and store the state,</span>      <span class="token comment" spellcheck="true">// prepend the length, then reset it back to the end of the string.</span>      position <span class="token operator">=</span> oldPosition<span class="token punctuation">;</span>      <span class="token keyword">int</span> length <span class="token operator">=</span> newPosition <span class="token operator">-</span> oldPosition <span class="token operator">-</span> minLengthVarIntSize<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 长度采用Varint编码</span>      <span class="token function">writeUInt32NoTag</span><span class="token punctuation">(</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>      position <span class="token operator">=</span> newPosition<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token keyword">int</span> length <span class="token operator">=</span> Utf8<span class="token punctuation">.</span><span class="token function">encodedLength</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 长度采用Varint编码</span>      <span class="token function">writeUInt32NoTag</span><span class="token punctuation">(</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>      position <span class="token operator">=</span> Utf8<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> buffer<span class="token punctuation">,</span> position<span class="token punctuation">,</span> <span class="token function">spaceLeft</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">UnpairedSurrogateException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// Roll back the change - we fall back to inefficient path.</span>    position <span class="token operator">=</span> oldPosition<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// TODO(nathanmittler): We should throw an IOException here instead.</span>    <span class="token function">inefficientWriteStringNoTag</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IndexOutOfBoundsException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">OutOfSpaceException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/1e92243464524ade994abe7219848176.png" alt></p><p><strong>message嵌套编码</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// CodedOutputStream#writeMessage</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">writeMessage</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token keyword">int</span> fieldNumber<span class="token punctuation">,</span> <span class="token keyword">final</span> MessageLite value<span class="token punctuation">)</span>  <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>  <span class="token function">writeTag</span><span class="token punctuation">(</span>fieldNumber<span class="token punctuation">,</span> WireFormat<span class="token punctuation">.</span>WIRETYPE_LENGTH_DELIMITED<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">writeMessageNoTag</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// CodedOutputStream#writeMessageNoTag</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">writeMessageNoTag</span><span class="token punctuation">(</span><span class="token keyword">final</span> MessageLite value<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//&lt;1> 采用varint编码写入长度</span>  <span class="token function">writeUInt32NoTag</span><span class="token punctuation">(</span>value<span class="token punctuation">.</span><span class="token function">getSerializedSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//&lt;2> 其实就递归调用write，进行嵌套message里的类型编码</span>  value<span class="token punctuation">.</span><span class="token function">writeTo</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-HI8woxmf-1652596106146)(<a href="http://cdn.markuszhang.com/img/483dc0b911ff535efba0c42d8a75d49e.png)]" target="_blank" rel="noopener">http://cdn.markuszhang.com/img/483dc0b911ff535efba0c42d8a75d49e.png)]</a></p><p><strong>repeated编码</strong></p><pre class="line-numbers language-protobuf"><code class="language-protobuf"><span class="token keyword">message</span> TypeStudy<span class="token punctuation">{</span>  <span class="token primitive symbol">double</span> double_type <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token primitive symbol">int32</span> int_type <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>  <span class="token primitive symbol">int64</span> long_type <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>  <span class="token primitive symbol">sint32</span> sint_type <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>  <span class="token builtin">repeated</span> <span class="token primitive symbol">int32</span> int_list <span class="token operator">=</span> <span class="token number">5</span> <span class="token punctuation">[</span>packed <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 通过packed修饰，proto3默认为true</span>  <span class="token primitive symbol">string</span> string_type <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span>  Learn learn_type <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">message</span> Learn<span class="token punctuation">{</span>  <span class="token primitive symbol">int32</span> int_type <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token primitive symbol">int64</span> long_type <span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// packed=true</span><span class="token comment" spellcheck="true">// proto类的writeTo方法</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">getIntListList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  output<span class="token punctuation">.</span><span class="token function">writeUInt32NoTag</span><span class="token punctuation">(</span><span class="token number">42</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 只设置一遍</span>  output<span class="token punctuation">.</span><span class="token function">writeUInt32NoTag</span><span class="token punctuation">(</span>intListMemoizedSerializedSize<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> intList_<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 就不用设置集合内每一个数值的Tag了。</span>  output<span class="token punctuation">.</span><span class="token function">writeInt32NoTag</span><span class="token punctuation">(</span>intList_<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// packed=false</span><span class="token comment" spellcheck="true">// proto类的writeTo方法</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> intList_<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 每个值都设置相同的Tag标识</span>  output<span class="token punctuation">.</span><span class="token function">writeInt32</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> intList_<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h2><p>对于protobuf的学习记录就这些了，下面对Protobuf做一个简单的总结。</p><ol><li>对于性能分析那块，吞吐量的值不一定正确，不同机器环境不同，测试的结果也有不同，我在尽量保证版本发布时期一致的情况下给出了各序列化协议的性能分析<ol><li>序列化速度：protobuf &gt; jackson &gt; kryo &gt; protostuff &gt; fst &gt; fastJson &gt; jdk &gt; xml</li><li>反序列化速度：protobuf &gt; fst &gt; protostuff &gt; kryo &gt; jackson &gt; fastJson &gt; jdk &gt; xml</li><li>当然，我这里测试代码可能会使用的不当，如果有不同意见的朋友也可评论一下原因和真实情况，再附上我的测试代码：<a href="https://github.com/markuszcl99/BinaryProtocol/tree/master/src/main/java/com/markus/bp/test" target="_blank" rel="noopener">源码链接</a></li></ol></li><li>当我们的系统需要使用序列化，并且对性能和空间有要求的话，可以了解下protobuf的解决方案</li><li>我们经常所说的protobuf具有数据压缩的效果就是通过它的Varint的编码方式以及T-L-V紧凑的存储方式来实现的</li><li>protobuf序列化&amp;反序列化速度快的原因是它的编码&amp;解码方式简单（只需要进行简单的数学运算操作来完成的）</li><li>本文测试的对象进行序列化：protobuf的压缩效果是fastjson的1/3，和protostuff的压缩效果接近，当我们对系统的性能要求不是很大的情况下，可以考虑protostuff来解决<ol><li>protostuff是面向Java语言的protobuf框架，它能支持Java的复杂对象(无法通过proto文件编写的)，也就是说数据结构支持的更好；对Java语言友好</li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> 协议 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> protobuf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《Spring 5.x源码解析之Spring AOP 注解驱动使用及其实现原理》</title>
      <link href="/spring-aop-zhu-jie-qu-dong-shi-yong-ji-qi-shi-xian-yuan-li.html"/>
      <url>/spring-aop-zhu-jie-qu-dong-shi-yong-ji-qi-shi-xian-yuan-li.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>学好路更宽，钱多少加班。—- mercyblitz</p></blockquote><h2 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h2><blockquote><p>大家好，欢迎阅读《Spring 5.x源码解析》系列，本篇作为该系列的第二篇，重点介绍Spring AOP在注解驱动编程模式上的使用及其实现原理。文章内容基于<a href="https://time.geekbang.org/course/intro/100066301?tab=catalog" target="_blank" rel="noopener">小马哥讲 Spring AOP 编程思想</a>以及<a href="https://book.douban.com/subject/30452948/" target="_blank" rel="noopener">Spring源码深度解析（第2版）</a>。笔者多次阅读上述学习资料，形成个人关于Spring的知识总结，希望能帮助各位小伙伴！</p></blockquote><h2 id="二、本文概览"><a href="#二、本文概览" class="headerlink" title="二、本文概览"></a>二、本文概览</h2><p><img src="https://img-blog.csdnimg.cn/a213e3cc90ad4f7ea2b55b7536ff7ed0.png" alt="在这里插入图片描述"></p><h2 id="三、使用示例"><a href="#三、使用示例" class="headerlink" title="三、使用示例"></a>三、使用示例</h2><blockquote><p>在本节，我们详细介绍Spring AOP所支持的AspectJ注解使用，在目标方法拦截上介绍@Before、@After、@AfterReturning、@AfterThrowing、@Around、@DeclareParents以及在切入点表达式上介绍execution、within、target、this、args、@args、@target、@within、@annotation的使用</p></blockquote><h3 id="1、-Aspect"><a href="#1、-Aspect" class="headerlink" title="1、@Aspect"></a>1、@Aspect</h3><p>该注解的作用就是定义该类是一个切面，在Spring IoC容器会根据Aspect标记拿出该类，创建对应的Advisor，详细动作会在下节实现原理说。</p><h3 id="2、AOP通知注解使用"><a href="#2、AOP通知注解使用" class="headerlink" title="2、AOP通知注解使用"></a>2、AOP通知注解使用</h3><p>Spring支持AspectJ拦截注解包括@Before、@After、@AfterReturning、@AfterThrowing、@Around，下面简单介绍下他们的作用以及使用方式: </p><ul><li>@Before: 该注解的作用是定义连接点的前置通知方法，在目标方法调用前执行</li><li>@After: 该注解的作用是定义连接点的最终通知方法，在目标方法执行后执行(目标方法正常或异常情况均会执行)</li><li>@AfterReturning: 该注解的作用是定义连接点的后置返回通知方法，在目标方法成功返回后执行</li><li>@AfterThrowing: 该注解的作用是定义在连接点的后置异常返回通知方法，在目标方法执行异常后执行</li><li>@Around: 环绕通知，可以在目标方法执行前后任意时机执行，目标的方法调用是方法内主动去调用，而上面四个注解是被动调用。</li></ul><p>下面看下他们的使用示例:</p><ul><li>切面以及通知定义</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>markus<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>aop<span class="token punctuation">.</span>feature<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>aspect<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>ProceedingJoinPoint<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author: markus * @date: 2022/11/29 1:16 PM * @Description: 前置方法拦截 * @Blog: http://markuszhang.com * It's my honor to share what I've learned with you! */</span><span class="token annotation punctuation">@Aspect</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AspectJAnnotationConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Before</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"target(com.markus.aop.overview.EchoService)"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">before</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"这是前置通知"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@After</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"target(com.markus.aop.overview.EchoService)"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">after</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"这是方法最终通知"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@AfterReturning</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"target(com.markus.aop.overview.EchoService)"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterReturning</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"这是方法返回通知"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@AfterThrowing</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"target(com.markus.aop.overview.EchoService)"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterThrowing</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"这是方法异常通知"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Around</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"target(com.markus.aop.overview.EchoService)"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Object <span class="token function">around</span><span class="token punctuation">(</span>ProceedingJoinPoint pjp<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"这是方法环绕前置通知"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            Object obj <span class="token operator">=</span> pjp<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"这是方法环绕返回通知"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> obj<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"这是方法环绕异常通知"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">throw</span> e<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"这是方法环绕最终通知"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>使用</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>markus<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>aop<span class="token punctuation">.</span>feature<span class="token punctuation">.</span>blog<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>markus<span class="token punctuation">.</span>aop<span class="token punctuation">.</span>overview<span class="token punctuation">.</span>DefaultEchoService<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>markus<span class="token punctuation">.</span>aop<span class="token punctuation">.</span>overview<span class="token punctuation">.</span>EchoService<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>markus<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>aop<span class="token punctuation">.</span>feature<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>aspect<span class="token punctuation">.</span>AspectJAnnotationConfig<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>AnnotationConfigApplicationContext<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Bean<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>EnableAspectJAutoProxy<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author: markus * @date: 2022/11/29 1:20 PM * @Description: AspectJ注解使用示例 * @Blog: http://markuszhang.com * It's my honor to share what I've learned with you! */</span><span class="token annotation punctuation">@EnableAspectJAutoProxy</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AspectJAnnotationDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        AnnotationConfigApplicationContext context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnnotationConfigApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        context<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>AspectJAnnotationDemo<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> AspectJAnnotationConfig<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        context<span class="token punctuation">.</span><span class="token function">refresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        EchoService echoService <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>EchoService<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        echoService<span class="token punctuation">.</span><span class="token function">echo</span><span class="token punctuation">(</span><span class="token string">"Hello World!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        context<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> EchoService <span class="token function">echoService</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DefaultEchoService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>控制台结果</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 方法正常执行</span>这是方法环绕前置通知这是前置通知<span class="token punctuation">[</span>echo<span class="token punctuation">]</span> Hello World<span class="token operator">!</span>这是方法环绕返回通知这是方法环绕最终通知这是方法最终通知这是方法返回通知Process finished with exit code <span class="token number">0</span><span class="token comment" spellcheck="true">// 方法异常执行</span>这是方法环绕前置通知这是前置通知这是方法环绕异常通知这是方法环绕最终通知这是方法最终通知这是方法异常通知Exception in thread <span class="token string">"main"</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>RuntimeException<span class="token operator">:</span> 有一定几率异常    at com<span class="token punctuation">.</span>markus<span class="token punctuation">.</span>aop<span class="token punctuation">.</span>overview<span class="token punctuation">.</span>DefaultEchoService<span class="token punctuation">.</span><span class="token function">echo</span><span class="token punctuation">(</span>DefaultEchoService<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">23</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3、Pointcut切入点表达式"><a href="#3、Pointcut切入点表达式" class="headerlink" title="3、Pointcut切入点表达式"></a>3、Pointcut切入点表达式</h3><blockquote><p>在上面我们看到@Before等等注解内都会有一个value = “target(com.markus.aop.overview.EchoService)”，这个value内容是匹配目标方法的表达式，表达式类型有许多并且也可以通过@Pointcut注解来统一处理，@Before等通知注解引用这个Pointcut即可。下面来逐一介绍下表达式的种类以及其使用方法</p></blockquote><ul><li>第一种: execution(modifiers-pattern? ret-type-pattern declare-type-pattern.? name-pattern(param-pattern) throws-pattern?)<ul><li>其中带”?”的表示在表达式中可有可无的</li><li>modifiers-pattern 表示方法的访问类型</li><li>ret-type-pattern 表示方法的返回值类型</li><li>declare-type-pattern 表示方法所在类的类型</li><li>name-pattern 表示方法签名</li><li>param-pattern 表示参数的类型</li><li>throws-pattern 表示异常抛出的类型</li></ul></li><li>第二种: within(package),对指定模块下的方法进行匹配<ul><li>package 表示模块，可使用通配符</li></ul></li><li>第三种: this(package.class),对指定类下的方法进行匹配<ul><li>package.class 指向代理对象，不可以使用通配符</li></ul></li><li>第四种: target(package.class),对指定类下的方法进行匹配<ul><li>package.class 指向目标对象，不可以使用通配符</li></ul></li><li>第五种: args(ParameterType,…),对指定参数类型的方法进行匹配<ul><li>ParameterType 表示目标方法的参数类型</li></ul></li><li>第六种: @target(package.class),执行方法所在的对象是否被目标注解定义<ul><li>执行方法的对象，不一定是定义方法的对象，属于运行时匹配，所以@target会将所有原始对象生成代理，所以慎用！</li></ul></li><li>第七种: @within(package.class),定义方法所在的对象是否被目标注解匹配<ul><li>定义方法的对象，属于静态对象</li></ul></li><li>第八种: @args(annotationType),目标方法的参数是否被目标注解定义<ul><li>annotationType 注解类型，匹配目标方法的参数是否具备目标注解</li></ul></li><li>第九种: @annotation(annotationType),目标方法是否被目标注解定义<ul><li>annotationType 注解类型</li></ul></li></ul><p>上面介绍了各种表达式的定义以及作用，下面来介绍下他们的使用方法：</p><ul><li>切面以及表达式定义:</li></ul><pre class="line-numbers language-java"><code class="language-java"> <span class="token keyword">package</span> com<span class="token punctuation">.</span>markus<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>aop<span class="token punctuation">.</span>feature<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>aspect<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Aspect<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Before<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Pointcut<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author: markus * @date: 2022/12/1 1:27 PM * @Description: 横切点表达式使用演示 * @Blog: http://markuszhang.com * It's my honor to share what I've learned with you! */</span><span class="token annotation punctuation">@Aspect</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AspectJPointcutExpressionConfig</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 表示 方法的访问类型为public 任意返回类型 任意类型的specialReferenceDemo方法 参数可有可无</span>    <span class="token annotation punctuation">@Pointcut</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"execution(public * *.specialReferenceDemo(..))"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">executionPointcut</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 表示 匹配在com.markus.spring.aop.feature.blog子模块下的方法</span>    <span class="token annotation punctuation">@Pointcut</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"within(com.markus.spring.aop.feature.blog.domain.*)"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">withinPointcut</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 表示 匹配目标对象是com.markus.spring.aop.feature.blog.domain.DefaultPointcutDemo下的方法</span>    <span class="token annotation punctuation">@Pointcut</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"target(com.markus.spring.aop.feature.blog.domain.DefaultPointcutDemo)"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">targetPointcut</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 表示 匹配代理对象是com.markus.spring.aop.feature.blog.domain.PointcutDemo下的方法</span>    <span class="token annotation punctuation">@Pointcut</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"this(com.markus.spring.aop.feature.blog.domain.PointcutDemo)"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">thisPointcut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 表示 匹配的方法中参数是ArgsDemo类型</span>    <span class="token annotation punctuation">@Pointcut</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"args(com.markus.spring.aop.feature.blog.domain.ArgsDemo)"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">argsPointcut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 表示 匹配被@EchoInterface定义的对象下的方法</span>    <span class="token comment" spellcheck="true">// 它是动态匹配的，会为所有目标对象生成代理，所以慎用！例如AOP动态代理通过cglib实现，遇到被final修饰的bean对象，就会抛出异常</span>    <span class="token annotation punctuation">@Pointcut</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"@target(com.markus.aop.overview.annotation.EchoInterface)"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">atTargetPointcut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 表示 匹配被@EchoInterface定义的对象下的方法</span>    <span class="token comment" spellcheck="true">// 与@target不同，它是属于静态匹配，描述为定义方法的对象被@EchoInterface注释</span>    <span class="token annotation punctuation">@Pointcut</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"@within(com.markus.aop.overview.annotation.EchoInterface)"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">atWithinPointcut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 表示 匹配参数所属的类型被@EchoInterface注释的所有方法</span>    <span class="token annotation punctuation">@Pointcut</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"@args(com.markus.aop.overview.annotation.EchoInterface)"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">atArgsPointcut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 表示 匹配被@EchoInterface注释的所有方法</span>    <span class="token annotation punctuation">@Pointcut</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"@annotation(com.markus.aop.overview.annotation.EchoInterface)"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">atAnnotationPointcut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Before</span><span class="token punctuation">(</span><span class="token string">"executionPointcut()"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">executionPointcutBefore</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"this is execution pointcut"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Before</span><span class="token punctuation">(</span><span class="token string">"withinPointcut()"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">withinPointcutBefore</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"this is within pointcut"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Before</span><span class="token punctuation">(</span><span class="token string">"targetPointcut()"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">targetPointcutBefore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"this is target pointcut"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Before</span><span class="token punctuation">(</span><span class="token string">"thisPointcut()"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">thisPointcutBefore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"this.is this pointcut"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Before</span><span class="token punctuation">(</span><span class="token string">"argsPointcut())"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">argsPointcutBefore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"this is args pointcut"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Before</span><span class="token punctuation">(</span><span class="token string">"atTargetPointcut()"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">atTargetPointcutBefore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"this is @target pointcut"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Before</span><span class="token punctuation">(</span><span class="token string">"atWithinPointcut()"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">atWithinPointcutBefore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"this is @within pointcut"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Before</span><span class="token punctuation">(</span><span class="token string">"atArgsPointcut()"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">atArgsPointcutBefore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"this is @args pointcut"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Before</span><span class="token punctuation">(</span><span class="token string">"atAnnotationPointcut()"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">atAnnotationPointBefore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"this is @annotation pointcut"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>客户端</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>markus<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>aop<span class="token punctuation">.</span>feature<span class="token punctuation">.</span>blog<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>markus<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>aop<span class="token punctuation">.</span>feature<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>aspect<span class="token punctuation">.</span>AspectJPointcutExpressionConfig<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>markus<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>aop<span class="token punctuation">.</span>feature<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>domain<span class="token punctuation">.</span>ArgsDemo<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>markus<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>aop<span class="token punctuation">.</span>feature<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>domain<span class="token punctuation">.</span>DefaultPointcutDemo<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>markus<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>aop<span class="token punctuation">.</span>feature<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>domain<span class="token punctuation">.</span>PointcutDemo<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>AnnotationConfigApplicationContext<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Bean<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>EnableAspectJAutoProxy<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author: markus * @date: 2022/12/1 10:24 PM * @Description: 横切点表达式使用示例 * @Blog: http://markuszhang.com * It's my honor to share what I've learned with you! */</span><span class="token annotation punctuation">@EnableAspectJAutoProxy</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AspectJPointcutExpressionDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        AnnotationConfigApplicationContext context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnnotationConfigApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        context<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>AspectJPointcutExpressionDemo<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> AspectJPointcutExpressionConfig<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        context<span class="token punctuation">.</span><span class="token function">refresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        PointcutDemo pointcutDemo <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>PointcutDemo<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ArgsDemo argsDemo <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>ArgsDemo<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"-----start-----"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pointcutDemo<span class="token punctuation">.</span><span class="token function">specialReferenceDemo</span><span class="token punctuation">(</span>argsDemo<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"-----end-----"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        context<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> PointcutDemo <span class="token function">pointcutDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DefaultPointcutDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> ArgsDemo <span class="token function">argsDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ArgsDemo</span><span class="token punctuation">(</span><span class="token string">"Hello World!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>控制台</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>start<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token keyword">this</span> is args pointcut<span class="token keyword">this</span> is <span class="token annotation punctuation">@annotation</span> pointcut<span class="token keyword">this</span> is <span class="token annotation punctuation">@args</span> pointcut<span class="token keyword">this</span> is <span class="token annotation punctuation">@target</span> pointcut<span class="token keyword">this</span> is <span class="token annotation punctuation">@within</span> pointcut<span class="token keyword">this</span> is execution pointcut<span class="token keyword">this</span> is target pointcut<span class="token keyword">this</span><span class="token punctuation">.</span>is <span class="token keyword">this</span> pointcut<span class="token keyword">this</span> is within pointcutspecial reference demo content is <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>end<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>Process finished with exit code <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4、-DeclareParents-接口增强"><a href="#4、-DeclareParents-接口增强" class="headerlink" title="4、@DeclareParents-接口增强"></a>4、@DeclareParents-接口增强</h3><blockquote><p>@DeclareParents可以声明在切面类里，可以起到对拦截器进行增强的作用。下面通过代码演示一下</p></blockquote><ul><li>切面类</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Aspect</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AspectJDeclareParentsConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@DeclareParents</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"com.markus.spring.aop.feature.blog.domain.DefaultPointcutDemo"</span><span class="token punctuation">,</span> defaultImpl <span class="token operator">=</span> DefaultUsageTracked<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> UsageTracked usageTracked<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Before</span><span class="token punctuation">(</span><span class="token string">"target(com.markus.spring.aop.feature.blog.domain.PointcutDemo) &amp;&amp; this(usageTracked)"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">before</span><span class="token punctuation">(</span>UsageTracked usageTracked<span class="token punctuation">)</span><span class="token punctuation">{</span>        usageTracked<span class="token punctuation">.</span><span class="token function">echoMethodInvokeCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>启动类</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@EnableAspectJAutoProxy</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AspectJDeclareParentsDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        AnnotationConfigApplicationContext context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnnotationConfigApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        context<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>AspectJDeclareParentsDemo<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> AspectJDeclareParentsConfig<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        context<span class="token punctuation">.</span><span class="token function">refresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        PointcutDemo pointcutDemo <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>PointcutDemo<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pointcutDemo<span class="token punctuation">.</span><span class="token function">commonDemo</span><span class="token punctuation">(</span><span class="token string">"Hello World!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        context<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> PointcutDemo <span class="token function">pointcutDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DefaultPointcutDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>控制台打印</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token number">1</span>common demo content is Hello World<span class="token operator">!</span>Process finished with exit code <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="四、实现原理"><a href="#四、实现原理" class="headerlink" title="四、实现原理"></a>四、实现原理</h2><h3 id="1、时序图"><a href="#1、时序图" class="headerlink" title="1、时序图"></a>1、时序图</h3><blockquote><p>注解驱动实现原理时序图流程可分为三部分来看: </p><ul><li>IoC容器启动过程AOP前期准备-注册AnnotationAwareAspectJAutoProxyCreator</li><li>用户获取指定的Spring Bean-为当前Bean创建代理对象</li><li>调用Bean的目标方法-采用动态代理，调用目标方法，在其过程中获取匹配的MethodInterceptor并依次调用实现对目标方法的拦截后，最终通过反射调用目标方法</li></ul></blockquote><p><img src="https://img-blog.csdnimg.cn/301bd1f2797741a0b816576dea3b51d9.png" alt="在这里插入图片描述"></p><h3 id="2、关键代码"><a href="#2、关键代码" class="headerlink" title="2、关键代码"></a>2、关键代码</h3><blockquote><p>如上时序图，可以较为清晰的看到Spring是如何给IoC容器中Bean创建代理对象，并且通过代理对象的调用实现对目标方法的拦截。这里再介绍下内部的细节，内容如下: </p><ul><li>Spring是如何开启自动代理的？</li><li>Spring是如何将用户定义的Advice构建为Advisor的？</li><li>Spring是如何创建代理对象的？</li><li>Spring是如何将advisor适配为MethodInterceptor并分配给匹配的方法上的？</li><li>Spring AOP的五种advice执行的先后顺序是如何定义的？</li></ul></blockquote><h4 id="a-Spring是如何开启自动代理的？"><a href="#a-Spring是如何开启自动代理的？" class="headerlink" title="a.Spring是如何开启自动代理的？"></a>a.Spring是如何开启自动代理的？</h4><blockquote><p>Spring通过@EnableAspectJAutoProxy开启AspectJ自动代理，主要是在加载BeanDefinition时动态注册AnnotationAwareAspectJAutoProxyCreator，使的Bean生命周期中创建Bean实例可以有被代理的机会。</p></blockquote><ul><li>@EnableAspectJAutoProxy</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span>ElementType<span class="token punctuation">.</span>TYPE<span class="token punctuation">)</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>RetentionPolicy<span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token annotation punctuation">@Documented</span><span class="token comment" spellcheck="true">// 重点在这，通过@Import导入具体的注册器类，在该类下注册相应的BeanDefinition 这也是使用@EnableXXX注解驱动的大致逻辑</span><span class="token annotation punctuation">@Import</span><span class="token punctuation">(</span>AspectJAutoProxyRegistrar<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 值得注意的是该注解是要注释到配置类上的</span><span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">EnableAspectJAutoProxy</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * Indicate whether subclass-based (CGLIB) proxies are to be created as opposed     * to standard Java interface-based proxies. The default is {@code false}.     * 可以通过该字段标注Spring是采用jdk动态代理还是CGLIB字节码提升创建代理     * true 使用CGLIB     * false 使用标准方式     */</span>    <span class="token keyword">boolean</span> <span class="token function">proxyTargetClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * Indicate that the proxy should be exposed by the AOP framework as a {@code ThreadLocal}     * for retrieval via the {@link org.springframework.aop.framework.AopContext} class.     * Off by default, i.e. no guarantees that {@code AopContext} access will work.     * @since 4.3.1     * 标识代理是否被可以被当前线程本地缓存 AopContext#setCurrentProxy(proxy)     */</span>    <span class="token keyword">boolean</span> <span class="token function">exposeProxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>AspectJAutoProxyRegistrar</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 定义AspectJAutoProxyRegistrar 实现ImportBeanDefinitionRegistrar的registerBeanDefinitions方法，在加载BeanDefinition的时候注册自定义的BeanDefinition</span><span class="token keyword">class</span> <span class="token class-name">AspectJAutoProxyRegistrar</span> <span class="token keyword">implements</span> <span class="token class-name">ImportBeanDefinitionRegistrar</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * Register, escalate, and configure the AspectJ auto proxy creator based on the value     * of the @{@link EnableAspectJAutoProxy#proxyTargetClass()} attribute on the importing     * {@code @Configuration} class.     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">registerBeanDefinitions</span><span class="token punctuation">(</span>            AnnotationMetadata importingClassMetadata<span class="token punctuation">,</span> BeanDefinitionRegistry registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 向BeanDefinitionRegistry中注册AnnotationAwareAspectJAutoProxyCreator</span>        AopConfigUtils<span class="token punctuation">.</span><span class="token function">registerAspectJAnnotationAutoProxyCreatorIfNecessary</span><span class="token punctuation">(</span>registry<span class="token punctuation">)</span><span class="token punctuation">;</span>        AnnotationAttributes enableAspectJAutoProxy <span class="token operator">=</span>                AnnotationConfigUtils<span class="token punctuation">.</span><span class="token function">attributesFor</span><span class="token punctuation">(</span>importingClassMetadata<span class="token punctuation">,</span> EnableAspectJAutoProxy<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>enableAspectJAutoProxy <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// @EnableAspectJAutoProxy中的proxyTargetClass配置</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>enableAspectJAutoProxy<span class="token punctuation">.</span><span class="token function">getBoolean</span><span class="token punctuation">(</span><span class="token string">"proxyTargetClass"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                AopConfigUtils<span class="token punctuation">.</span><span class="token function">forceAutoProxyCreatorToUseClassProxying</span><span class="token punctuation">(</span>registry<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">// @EnableAspectJAutoProxy中的exposeProxy配置</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>enableAspectJAutoProxy<span class="token punctuation">.</span><span class="token function">getBoolean</span><span class="token punctuation">(</span><span class="token string">"exposeProxy"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                AopConfigUtils<span class="token punctuation">.</span><span class="token function">forceAutoProxyCreatorToExposeProxy</span><span class="token punctuation">(</span>registry<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>AopConfigUtils</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Nullable</span><span class="token comment" spellcheck="true">// 在@EnableAspectJAutoProxy中cls指的是的AnnotationAwareAspectJAutoProxyCreator</span><span class="token keyword">private</span> <span class="token keyword">static</span> BeanDefinition <span class="token function">registerOrEscalateApcAsRequired</span><span class="token punctuation">(</span>  Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> cls<span class="token punctuation">,</span> BeanDefinitionRegistry registry<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> Object source<span class="token punctuation">)</span> <span class="token punctuation">{</span>  Assert<span class="token punctuation">.</span><span class="token function">notNull</span><span class="token punctuation">(</span>registry<span class="token punctuation">,</span> <span class="token string">"BeanDefinitionRegistry must not be null"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 处理Spring中自动代理创建器的优先级问题 如果即将被注册的cls比IoC容器中已存在的自动代理创建器有冲突，则选择优先级最高的进行定义</span>  <span class="token comment" spellcheck="true">// 优先级从小到大: InfrastructureAdvisorAutoProxyCreator &lt; AspectJAwareAdvisorAutoProxyCreator &lt; AnnotationAwareAspectJAutoProxyCreator</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>registry<span class="token punctuation">.</span><span class="token function">containsBeanDefinition</span><span class="token punctuation">(</span>AUTO_PROXY_CREATOR_BEAN_NAME<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    BeanDefinition apcDefinition <span class="token operator">=</span> registry<span class="token punctuation">.</span><span class="token function">getBeanDefinition</span><span class="token punctuation">(</span>AUTO_PROXY_CREATOR_BEAN_NAME<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>cls<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>apcDefinition<span class="token punctuation">.</span><span class="token function">getBeanClassName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">int</span> currentPriority <span class="token operator">=</span> <span class="token function">findPriorityForClass</span><span class="token punctuation">(</span>apcDefinition<span class="token punctuation">.</span><span class="token function">getBeanClassName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">int</span> requiredPriority <span class="token operator">=</span> <span class="token function">findPriorityForClass</span><span class="token punctuation">(</span>cls<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>currentPriority <span class="token operator">&lt;</span> requiredPriority<span class="token punctuation">)</span> <span class="token punctuation">{</span>        apcDefinition<span class="token punctuation">.</span><span class="token function">setBeanClassName</span><span class="token punctuation">(</span>cls<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> null<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 无优先级冲突，则创建该类的RootBeanDefinition并注册到BeanDefinitionRegistry中</span>  RootBeanDefinition beanDefinition <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RootBeanDefinition</span><span class="token punctuation">(</span>cls<span class="token punctuation">)</span><span class="token punctuation">;</span>  beanDefinition<span class="token punctuation">.</span><span class="token function">setSource</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span>  beanDefinition<span class="token punctuation">.</span><span class="token function">getPropertyValues</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"order"</span><span class="token punctuation">,</span> Ordered<span class="token punctuation">.</span>HIGHEST_PRECEDENCE<span class="token punctuation">)</span><span class="token punctuation">;</span>  beanDefinition<span class="token punctuation">.</span><span class="token function">setRole</span><span class="token punctuation">(</span>BeanDefinition<span class="token punctuation">.</span>ROLE_INFRASTRUCTURE<span class="token punctuation">)</span><span class="token punctuation">;</span>  registry<span class="token punctuation">.</span><span class="token function">registerBeanDefinition</span><span class="token punctuation">(</span>AUTO_PROXY_CREATOR_BEAN_NAME<span class="token punctuation">,</span> beanDefinition<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> beanDefinition<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="b-Spring是如何将用户定义的Advice构建为Advisor的？"><a href="#b-Spring是如何将用户定义的Advice构建为Advisor的？" class="headerlink" title="b.Spring是如何将用户定义的Advice构建为Advisor的？"></a>b.Spring是如何将用户定义的Advice构建为Advisor的？</h4><blockquote><p>讲述这个问题前，我们先了解下哪些内容可以被Spring认为成Advisor</p><ul><li>IoC容器中注册的Advisor Bean</li><li>IoC容器中注册的Aspect Bean中的Advice method</li></ul><p>第一个很好理解，Spring通过依赖查找找到IoC容器注册的Advisor相关Bean，将其加入到List&lt;Advisor&gt;集合中，那第二种Spring是如何进行转换的呢，我们下面来详细了解下</p></blockquote><ul><li>AbstractAdvisorAutoProxyCreator</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token annotation punctuation">@Nullable</span><span class="token comment" spellcheck="true">// Spring在给Bean创建代理对象时，会为该Bean查找所有的Advice和Advisor</span><span class="token keyword">protected</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getAdvicesAndAdvisorsForBean</span><span class="token punctuation">(</span>  Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> beanClass<span class="token punctuation">,</span> String beanName<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> TargetSource targetSource<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 查找所有符合条件的Advisor</span>  List<span class="token operator">&lt;</span>Advisor<span class="token operator">></span> advisors <span class="token operator">=</span> <span class="token function">findEligibleAdvisors</span><span class="token punctuation">(</span>beanClass<span class="token punctuation">,</span> beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>advisors<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> DO_NOT_PROXY<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> advisors<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 查找所有符合条件的Advisor</span><span class="token keyword">protected</span> List<span class="token operator">&lt;</span>Advisor<span class="token operator">></span> <span class="token function">findEligibleAdvisors</span><span class="token punctuation">(</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> beanClass<span class="token punctuation">,</span> String beanName<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 查找所有的Advisor</span>  List<span class="token operator">&lt;</span>Advisor<span class="token operator">></span> candidateAdvisors <span class="token operator">=</span> <span class="token function">findCandidateAdvisors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 筛选出符合条件的Advisor</span>  List<span class="token operator">&lt;</span>Advisor<span class="token operator">></span> eligibleAdvisors <span class="token operator">=</span> <span class="token function">findAdvisorsThatCanApply</span><span class="token punctuation">(</span>candidateAdvisors<span class="token punctuation">,</span> beanClass<span class="token punctuation">,</span> beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 拓展Advisor，目前在AnnotationAwareAspectJAutoProxyCreator中拓展了此功能，在执行链中增加了ExposeInvocationInterceptor，用于感知目前进行的执行链执行的上下文。</span>  <span class="token comment" spellcheck="true">// ExposeInvocationInterceptor拦截器不需要用户感知，只有在AspectJ注解风格下 Spring才会使用</span>  <span class="token function">extendAdvisors</span><span class="token punctuation">(</span>eligibleAdvisors<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>eligibleAdvisors<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    eligibleAdvisors <span class="token operator">=</span> <span class="token function">sortAdvisors</span><span class="token punctuation">(</span>eligibleAdvisors<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> eligibleAdvisors<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 查询候选的Advisor Bean，子类可以重写此方法来丰富Advisor来源</span><span class="token keyword">protected</span> List<span class="token operator">&lt;</span>Advisor<span class="token operator">></span> <span class="token function">findCandidateAdvisors</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  Assert<span class="token punctuation">.</span><span class="token function">state</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>advisorRetrievalHelper <span class="token operator">!=</span> null<span class="token punctuation">,</span> <span class="token string">"No BeanFactoryAdvisorRetrievalHelper available"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 这里面就是通过BeanFactory依赖查找Advisor的相关Bean集合，不做赘述了</span>  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>advisorRetrievalHelper<span class="token punctuation">.</span><span class="token function">findAdvisorBeans</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>AnnotationAwareAspectJAutoProxyCreator</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token comment" spellcheck="true">// 重写AbstractAdvisorAutoProxyCreator中的findCandidateAdvisors方法</span><span class="token keyword">protected</span> List<span class="token operator">&lt;</span>Advisor<span class="token operator">></span> <span class="token function">findCandidateAdvisors</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// Add all the Spring advisors found according to superclass rules.</span>  <span class="token comment" spellcheck="true">// 父类提供的查询规则</span>  List<span class="token operator">&lt;</span>Advisor<span class="token operator">></span> advisors <span class="token operator">=</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">findCandidateAdvisors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// Build Advisors for all AspectJ aspects in the bean factory.</span>  <span class="token comment" spellcheck="true">// 基于AspectJ注解，搜寻其切面下的Advice方法 并转换为Advisor</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>aspectJAdvisorsBuilder <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>    advisors<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>aspectJAdvisorsBuilder<span class="token punctuation">.</span><span class="token function">buildAspectJAdvisors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> advisors<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>BeanFactoryAspectJAdvisorBuilderAdapter</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> List<span class="token operator">&lt;</span>Advisor<span class="token operator">></span> <span class="token function">buildAspectJAdvisors</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// &lt;1> 找到IoC容所有的Aspect Bean名称</span>  List<span class="token operator">&lt;</span>String<span class="token operator">></span> aspectNames <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>aspectBeanNames<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>aspectNames <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      aspectNames <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>aspectBeanNames<span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>aspectNames <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>Advisor<span class="token operator">></span> advisors <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        aspectNames <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 也是通过依赖查找，是查找到所有的Bean名称集合</span>        String<span class="token punctuation">[</span><span class="token punctuation">]</span> beanNames <span class="token operator">=</span> BeanFactoryUtils<span class="token punctuation">.</span><span class="token function">beanNamesForTypeIncludingAncestors</span><span class="token punctuation">(</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>beanFactory<span class="token punctuation">,</span> Object<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>String beanName <span class="token operator">:</span> beanNames<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// 遍历所有的Bean名称，排除一些不符合条件的Bean</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isEligibleBean</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">continue</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>          <span class="token comment" spellcheck="true">// We must be careful not to instantiate beans eagerly as in this case they</span>          <span class="token comment" spellcheck="true">// would be cached by the Spring container but would not have been weaved.</span>          <span class="token comment" spellcheck="true">// 这里作者解释了，为什么采用类型查找，而不是实例查找</span>          Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> beanType <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>beanFactory<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>beanType <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">continue</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>          <span class="token comment" spellcheck="true">// 通过AspectJAdvisorFactory判断当前类是否被@Aspect注释</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>advisorFactory<span class="token punctuation">.</span><span class="token function">isAspect</span><span class="token punctuation">(</span>beanType<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            aspectNames<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>            AspectMetadata amd <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AspectMetadata</span><span class="token punctuation">(</span>beanType<span class="token punctuation">,</span> beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>amd<span class="token punctuation">.</span><span class="token function">getAjType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPerClause</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getKind</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> PerClauseKind<span class="token punctuation">.</span>SINGLETON<span class="token punctuation">)</span> <span class="token punctuation">{</span>              MetadataAwareAspectInstanceFactory factory <span class="token operator">=</span>                <span class="token keyword">new</span> <span class="token class-name">BeanFactoryAspectInstanceFactory</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>beanFactory<span class="token punctuation">,</span> beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">// 获取该切面下的所有advisor</span>              List<span class="token operator">&lt;</span>Advisor<span class="token operator">></span> classAdvisors <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>advisorFactory<span class="token punctuation">.</span><span class="token function">getAdvisors</span><span class="token punctuation">(</span>factory<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>beanFactory<span class="token punctuation">.</span><span class="token function">isSingleton</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 缓存切面下对应的advisor</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>advisorsCache<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> classAdvisors<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span>              <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 缓存切面下对应的实例工厂</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>aspectFactoryCache<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> factory<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span>              advisors<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>classAdvisors<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span> <span class="token punctuation">{</span>              <span class="token comment" spellcheck="true">// Per target or per this.</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>beanFactory<span class="token punctuation">.</span><span class="token function">isSingleton</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"Bean with name '"</span> <span class="token operator">+</span> beanName <span class="token operator">+</span>                                                   <span class="token string">"' is a singleton, but aspect instantiation model is not singleton"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span>              <span class="token comment" spellcheck="true">// 原型模式</span>              MetadataAwareAspectInstanceFactory factory <span class="token operator">=</span>                <span class="token keyword">new</span> <span class="token class-name">PrototypeAspectInstanceFactory</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>beanFactory<span class="token punctuation">,</span> beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">this</span><span class="token punctuation">.</span>aspectFactoryCache<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> factory<span class="token punctuation">)</span><span class="token punctuation">;</span>              advisors<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>advisorFactory<span class="token punctuation">.</span><span class="token function">getAdvisors</span><span class="token punctuation">(</span>factory<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>aspectBeanNames <span class="token operator">=</span> aspectNames<span class="token punctuation">;</span>        <span class="token keyword">return</span> advisors<span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>aspectNames<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> Collections<span class="token punctuation">.</span><span class="token function">emptyList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 利用缓存进行性能优化</span>  List<span class="token operator">&lt;</span>Advisor<span class="token operator">></span> advisors <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span>String aspectName <span class="token operator">:</span> aspectNames<span class="token punctuation">)</span> <span class="token punctuation">{</span>    List<span class="token operator">&lt;</span>Advisor<span class="token operator">></span> cachedAdvisors <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>advisorsCache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>aspectName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>cachedAdvisors <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>      advisors<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>cachedAdvisors<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token punctuation">{</span>      MetadataAwareAspectInstanceFactory factory <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>aspectFactoryCache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>aspectName<span class="token punctuation">)</span><span class="token punctuation">;</span>      advisors<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>advisorFactory<span class="token punctuation">.</span><span class="token function">getAdvisors</span><span class="token punctuation">(</span>factory<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> advisors<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>ReflectiveAspectJAdvisorFactory</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token comment" spellcheck="true">// 通过AspectInstanceFactory获取Advisor集合</span><span class="token keyword">public</span> List<span class="token operator">&lt;</span>Advisor<span class="token operator">></span> <span class="token function">getAdvisors</span><span class="token punctuation">(</span>MetadataAwareAspectInstanceFactory aspectInstanceFactory<span class="token punctuation">)</span> <span class="token punctuation">{</span>  Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> aspectClass <span class="token operator">=</span> aspectInstanceFactory<span class="token punctuation">.</span><span class="token function">getAspectMetadata</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAspectClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  String aspectName <span class="token operator">=</span> aspectInstanceFactory<span class="token punctuation">.</span><span class="token function">getAspectMetadata</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAspectName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// &lt;1> 校验切面类</span>  <span class="token function">validate</span><span class="token punctuation">(</span>aspectClass<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// We need to wrap the MetadataAwareAspectInstanceFactory with a decorator</span>  <span class="token comment" spellcheck="true">// so that it will only instantiate once.</span>  <span class="token comment" spellcheck="true">// 装饰者模式-增强AspectJInstanceFactory功能，使得该切面只被实例化一次</span>  MetadataAwareAspectInstanceFactory lazySingletonAspectInstanceFactory <span class="token operator">=</span>    <span class="token keyword">new</span> <span class="token class-name">LazySingletonAspectInstanceFactoryDecorator</span><span class="token punctuation">(</span>aspectInstanceFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>  List<span class="token operator">&lt;</span>Advisor<span class="token operator">></span> advisors <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// &lt;2> 查找该类下所有的非Pointcut注解的方法</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span>Method method <span class="token operator">:</span> <span class="token function">getAdvisorMethods</span><span class="token punctuation">(</span>aspectClass<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// &lt;3> 获取Advisor</span>    Advisor advisor <span class="token operator">=</span> <span class="token function">getAdvisor</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> lazySingletonAspectInstanceFactory<span class="token punctuation">,</span> advisors<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> aspectName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>advisor <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>      advisors<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>advisor<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// If it's a per target aspect, emit the dummy instantiating aspect.</span>  <span class="token comment" spellcheck="true">// &lt;4> 如果切面是延迟初始化特性，则在执行链最开始增加一个advisor，直到目标方法被调用时再被初始化</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>advisors<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> lazySingletonAspectInstanceFactory<span class="token punctuation">.</span><span class="token function">getAspectMetadata</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isLazilyInstantiated</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    Advisor instantiationAdvisor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SyntheticInstantiationAdvisor</span><span class="token punctuation">(</span>lazySingletonAspectInstanceFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>    advisors<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> instantiationAdvisor<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// Find introduction fields.</span>  <span class="token comment" spellcheck="true">// &lt;5> 接口增强特性-@DeclareParents字段为拦截器增强动作</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span>Field field <span class="token operator">:</span> aspectClass<span class="token punctuation">.</span><span class="token function">getDeclaredFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    Advisor advisor <span class="token operator">=</span> <span class="token function">getDeclareParentsAdvisor</span><span class="token punctuation">(</span>field<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>advisor <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>      advisors<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>advisor<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// &lt;6> 返回所有的Advisor数据</span>  <span class="token keyword">return</span> advisors<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> List<span class="token operator">&lt;</span>Method<span class="token operator">></span> <span class="token function">getAdvisorMethods</span><span class="token punctuation">(</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> aspectClass<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">final</span> List<span class="token operator">&lt;</span>Method<span class="token operator">></span> methods <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 通过反射 查找Advisor目标方法，通过排除Pointcut注解方式实现</span>  ReflectionUtils<span class="token punctuation">.</span><span class="token function">doWithMethods</span><span class="token punctuation">(</span>aspectClass<span class="token punctuation">,</span> method <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// Exclude pointcuts</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>AnnotationUtils<span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> Pointcut<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>      methods<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span> ReflectionUtils<span class="token punctuation">.</span>USER_DECLARED_METHODS<span class="token punctuation">)</span><span class="token punctuation">;</span>  methods<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>METHOD_COMPARATOR<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> methods<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Override</span><span class="token annotation punctuation">@Nullable</span><span class="token keyword">public</span> Advisor <span class="token function">getAdvisor</span><span class="token punctuation">(</span>Method candidateAdviceMethod<span class="token punctuation">,</span> MetadataAwareAspectInstanceFactory aspectInstanceFactory<span class="token punctuation">,</span>                          <span class="token keyword">int</span> declarationOrderInAspect<span class="token punctuation">,</span> String aspectName<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">validate</span><span class="token punctuation">(</span>aspectInstanceFactory<span class="token punctuation">.</span><span class="token function">getAspectMetadata</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAspectClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 根据候选Advice方法的AspectJ注解 构建AspectJExpressionPointcut</span>  AspectJExpressionPointcut expressionPointcut <span class="token operator">=</span> <span class="token function">getPointcut</span><span class="token punctuation">(</span>    candidateAdviceMethod<span class="token punctuation">,</span> aspectInstanceFactory<span class="token punctuation">.</span><span class="token function">getAspectMetadata</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAspectClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>expressionPointcut <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> null<span class="token punctuation">;</span>  <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 将方法包装为Advisor并返回</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">InstantiationModelAwarePointcutAdvisorImpl</span><span class="token punctuation">(</span>expressionPointcut<span class="token punctuation">,</span> candidateAdviceMethod<span class="token punctuation">,</span>                                                        <span class="token keyword">this</span><span class="token punctuation">,</span> aspectInstanceFactory<span class="token punctuation">,</span> declarationOrderInAspect<span class="token punctuation">,</span> aspectName<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="c-Spring是如何创建代理对象的？"><a href="#c-Spring是如何创建代理对象的？" class="headerlink" title="c.Spring是如何创建代理对象的？"></a>c.Spring是如何创建代理对象的？</h4><blockquote><p>Spring创建代理对象是通过ProxyFactory、AopProxyFactory、AopProxy协作创建代理对象</p></blockquote><ul><li>AbstractAutoProxyCreator</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">protected</span> Object <span class="token function">createProxy</span><span class="token punctuation">(</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> beanClass<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> String beanName<span class="token punctuation">,</span>                             <span class="token annotation punctuation">@Nullable</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> specificInterceptors<span class="token punctuation">,</span> TargetSource targetSource<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>beanFactory <span class="token keyword">instanceof</span> <span class="token class-name">ConfigurableListableBeanFactory</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 一般BeanFactory都会走这个流程 将当前Bean的原始类填充到该Bean的BeanDefinition中</span>    AutoProxyUtils<span class="token punctuation">.</span><span class="token function">exposeTargetClass</span><span class="token punctuation">(</span><span class="token punctuation">(</span>ConfigurableListableBeanFactory<span class="token punctuation">)</span> <span class="token keyword">this</span><span class="token punctuation">.</span>beanFactory<span class="token punctuation">,</span> beanName<span class="token punctuation">,</span> beanClass<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// &lt;1> ProxyFactory</span>  ProxyFactory proxyFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ProxyFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// &lt;2> 将ProxyConfig信息拷贝一份</span>  proxyFactory<span class="token punctuation">.</span><span class="token function">copyFrom</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// &lt;3> 是否代理目标类 如果为true 则直接采用CGLIB字节码提升，便没有必要再计算代理接口了。CGLIB是通过生成目标类的子类来进行字节码提升的</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>proxyFactory<span class="token punctuation">.</span><span class="token function">isProxyTargetClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// &lt;3.1> 是否应该代理目标类 也就是是否采用CGLIB，这是通过BeanDefinition的Attribute属性决定的</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">shouldProxyTargetClass</span><span class="token punctuation">(</span>beanClass<span class="token punctuation">,</span> beanName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      proxyFactory<span class="token punctuation">.</span><span class="token function">setProxyTargetClass</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// &lt;3.2> 计算所要代理的接口</span>      <span class="token function">evaluateProxyInterfaces</span><span class="token punctuation">(</span>beanClass<span class="token punctuation">,</span> proxyFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// &lt;4> 获取Advisor数组对象</span>  Advisor<span class="token punctuation">[</span><span class="token punctuation">]</span> advisors <span class="token operator">=</span> <span class="token function">buildAdvisors</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> specificInterceptors<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// &lt;5> 将Advisor对象添加至代理工厂</span>  proxyFactory<span class="token punctuation">.</span><span class="token function">addAdvisors</span><span class="token punctuation">(</span>advisors<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// &lt;6> 设置目标源</span>  proxyFactory<span class="token punctuation">.</span><span class="token function">setTargetSource</span><span class="token punctuation">(</span>targetSource<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// &lt;7> 自定义代理工厂-子类去扩展</span>  <span class="token function">customizeProxyFactory</span><span class="token punctuation">(</span>proxyFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// &lt;8> 设置代理工厂是否被冻结</span>  proxyFactory<span class="token punctuation">.</span><span class="token function">setFrozen</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>freezeProxy<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// &lt;9> 在Advisor匹配时 是否跳过类过滤(ClassFilter)检查</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">advisorsPreFiltered</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    proxyFactory<span class="token punctuation">.</span><span class="token function">setPreFiltered</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// &lt;10> 最终创建代理对象并返回</span>  <span class="token keyword">return</span> proxyFactory<span class="token punctuation">.</span><span class="token function">getProxy</span><span class="token punctuation">(</span><span class="token function">getProxyClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 构建Advisor数组</span><span class="token keyword">protected</span> Advisor<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">buildAdvisors</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Nullable</span> String beanName<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> specificInterceptors<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// Handle prototypes correctly...</span>  <span class="token comment" spellcheck="true">// 处理指定的拦截器</span>  Advisor<span class="token punctuation">[</span><span class="token punctuation">]</span> commonInterceptors <span class="token operator">=</span> <span class="token function">resolveInterceptorNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  List<span class="token operator">&lt;</span>Object<span class="token operator">></span> allInterceptors <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>specificInterceptors <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>    allInterceptors<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>specificInterceptors<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>commonInterceptors<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>applyCommonInterceptorsFirst<span class="token punctuation">)</span> <span class="token punctuation">{</span>        allInterceptors<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>commonInterceptors<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">else</span> <span class="token punctuation">{</span>        allInterceptors<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>commonInterceptors<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isTraceEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> nrOfCommonInterceptors <span class="token operator">=</span> commonInterceptors<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">int</span> nrOfSpecificInterceptors <span class="token operator">=</span> <span class="token punctuation">(</span>specificInterceptors <span class="token operator">!=</span> null <span class="token operator">?</span> specificInterceptors<span class="token punctuation">.</span>length <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    logger<span class="token punctuation">.</span><span class="token function">trace</span><span class="token punctuation">(</span><span class="token string">"Creating implicit proxy for bean '"</span> <span class="token operator">+</span> beanName <span class="token operator">+</span> <span class="token string">"' with "</span> <span class="token operator">+</span> nrOfCommonInterceptors <span class="token operator">+</span>                 <span class="token string">" common interceptors and "</span> <span class="token operator">+</span> nrOfSpecificInterceptors <span class="token operator">+</span> <span class="token string">" specific interceptors"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  Advisor<span class="token punctuation">[</span><span class="token punctuation">]</span> advisors <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Advisor</span><span class="token punctuation">[</span>allInterceptors<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> allInterceptors<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 通过AdvisorAdapterRegistry将specificInterceptors适配为Advisor</span>    advisors<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>advisorAdapterRegistry<span class="token punctuation">.</span><span class="token function">wrap</span><span class="token punctuation">(</span>allInterceptors<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> advisors<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>ProxyProcessorSupport</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 计算需要代理的接口</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">evaluateProxyInterfaces</span><span class="token punctuation">(</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> beanClass<span class="token punctuation">,</span> ProxyFactory proxyFactory<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 获取该类的所有接口</span>  Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> targetInterfaces <span class="token operator">=</span> ClassUtils<span class="token punctuation">.</span><span class="token function">getAllInterfacesForClass</span><span class="token punctuation">(</span>beanClass<span class="token punctuation">,</span> <span class="token function">getProxyClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">boolean</span> hasReasonableProxyInterface <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> ifc <span class="token operator">:</span> targetInterfaces<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 过滤出非Spring内部配置、基建接口并且该接口非标记接口</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isConfigurationCallbackInterface</span><span class="token punctuation">(</span>ifc<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">isInternalLanguageInterface</span><span class="token punctuation">(</span>ifc<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>        ifc<span class="token punctuation">.</span><span class="token function">getMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      hasReasonableProxyInterface <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>hasReasonableProxyInterface<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// Must allow for introductions; can't just set interfaces to the target's interfaces only.</span>    <span class="token comment" spellcheck="true">// 将可以被代理的接口 添加至ProxyFactory中</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> ifc <span class="token operator">:</span> targetInterfaces<span class="token punctuation">)</span> <span class="token punctuation">{</span>      proxyFactory<span class="token punctuation">.</span><span class="token function">addInterface</span><span class="token punctuation">(</span>ifc<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 否则 只能代理目标类</span>    proxyFactory<span class="token punctuation">.</span><span class="token function">setProxyTargetClass</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 创建AOP代理类</span><span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token keyword">synchronized</span> AopProxy <span class="token function">createAopProxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>active<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">activate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 通过AopProxyFactory创建具体的AOP代理</span>  <span class="token comment" spellcheck="true">// AopProxyFactory 默认实现: DefaultAopProxyFactory</span>  <span class="token comment" spellcheck="true">// AopProxy : JdkDynamicAopProxy、CglibAopProxy</span>  <span class="token keyword">return</span> <span class="token function">getAopProxyFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">createAopProxy</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>DefaultAopProxyFactory</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 三种条件满足其一，则使用CglibAopProxy</span><span class="token comment" spellcheck="true">// 1. 配置优化标识被设置为true</span><span class="token comment" spellcheck="true">// 2. 代理目标类标识被设置为true</span><span class="token comment" spellcheck="true">// 3. 无代理接口可被使用</span><span class="token comment" spellcheck="true">// 其余情况均使用JdkDynamicAopProxy</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> AopProxy <span class="token function">createAopProxy</span><span class="token punctuation">(</span>AdvisedSupport config<span class="token punctuation">)</span> <span class="token keyword">throws</span> AopConfigException <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>config<span class="token punctuation">.</span><span class="token function">isOptimize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> config<span class="token punctuation">.</span><span class="token function">isProxyTargetClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">hasNoUserSuppliedProxyInterfaces</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> targetClass <span class="token operator">=</span> config<span class="token punctuation">.</span><span class="token function">getTargetClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>targetClass <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">AopConfigException</span><span class="token punctuation">(</span><span class="token string">"TargetSource cannot determine target class: "</span> <span class="token operator">+</span>                                   <span class="token string">"Either an interface or a target is required for proxy creation."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>targetClass<span class="token punctuation">.</span><span class="token function">isInterface</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> Proxy<span class="token punctuation">.</span><span class="token function">isProxyClass</span><span class="token punctuation">(</span>targetClass<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">JdkDynamicAopProxy</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ObjenesisCglibAopProxy</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">JdkDynamicAopProxy</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>剩余的采用JdkDynamicAopProxy以及CglibAopProxy创建代理的步骤就不赘述了。JdkDynamicAopProxy则是使用Proxy.newProxyInstance(xx)，CglibAopProxy则是使用Enhancer。</p><h4 id="d-Spring是如何将advisor适配为MethodInterceptor并分配给匹配的方法上的？"><a href="#d-Spring是如何将advisor适配为MethodInterceptor并分配给匹配的方法上的？" class="headerlink" title="d.Spring是如何将advisor适配为MethodInterceptor并分配给匹配的方法上的？"></a>d.Spring是如何将advisor适配为MethodInterceptor并分配给匹配的方法上的？</h4><blockquote><p>我们以JdkDynamicAopProxy创建的代理对象为例，介绍该问题。一句话概括就是在调用目标方法时，代理对象进行目标方法的拦截回调invoke，invoke环节里先获取MethodInterceptor执行链，执行链的获取是通过DefaultAdvisorChainFactory获取，在AdvisedSupport中通过PointcutAdvisor筛选出目标的MethodInterceptor获取最终的拦截器执行链，最终通过MethodInvocation#proceed()调用，实现拦截器对目标方法的拦截，内部通过递归调用。</p></blockquote><ul><li>JdkDynamicAopProxy</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token annotation punctuation">@Nullable</span><span class="token comment" spellcheck="true">// 调用目标方法的回调</span><span class="token keyword">public</span> Object <span class="token function">invoke</span><span class="token punctuation">(</span>Object proxy<span class="token punctuation">,</span> Method method<span class="token punctuation">,</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>  Object oldProxy <span class="token operator">=</span> null<span class="token punctuation">;</span>  <span class="token keyword">boolean</span> setProxyContext <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 获取代理配置的目标源</span>  TargetSource targetSource <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>advised<span class="token punctuation">.</span>targetSource<span class="token punctuation">;</span>  Object target <span class="token operator">=</span> null<span class="token punctuation">;</span>  <span class="token keyword">try</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 没有定义equal方法并且当前调用的还是equals方法，则调用代理类实现的equals方法</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>equalsDefined <span class="token operator">&amp;&amp;</span> AopUtils<span class="token punctuation">.</span><span class="token function">isEqualsMethod</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// The target does not implement the equals(Object) method itself.</span>      <span class="token keyword">return</span> <span class="token function">equals</span><span class="token punctuation">(</span>args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 和equals方法一样的情况</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>hashCodeDefined <span class="token operator">&amp;&amp;</span> AopUtils<span class="token punctuation">.</span><span class="token function">isHashCodeMethod</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// The target does not implement the hashCode() method itself.</span>      <span class="token keyword">return</span> <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 装饰器代理 确定给定实例的最终目标类</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">getDeclaringClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> DecoratingProxy<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// There is only getDecoratedClass() declared -> dispatch to proxy config.</span>      <span class="token keyword">return</span> AopProxyUtils<span class="token punctuation">.</span><span class="token function">ultimateTargetClass</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>advised<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// Advise接口上的方法调用</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>advised<span class="token punctuation">.</span>opaque <span class="token operator">&amp;&amp;</span> method<span class="token punctuation">.</span><span class="token function">getDeclaringClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isInterface</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>             method<span class="token punctuation">.</span><span class="token function">getDeclaringClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isAssignableFrom</span><span class="token punctuation">(</span>Advised<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// Service invocations on ProxyConfig with the proxy config...</span>      <span class="token keyword">return</span> AopUtils<span class="token punctuation">.</span><span class="token function">invokeJoinpointUsingReflection</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>advised<span class="token punctuation">,</span> method<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 上面说的四种情况一般不会进入，一般情况下都是如下流程</span>    Object retVal<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 1. 是否曝光代理类</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>advised<span class="token punctuation">.</span>exposeProxy<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// Make invocation available if necessary.</span>      oldProxy <span class="token operator">=</span> AopContext<span class="token punctuation">.</span><span class="token function">setCurrentProxy</span><span class="token punctuation">(</span>proxy<span class="token punctuation">)</span><span class="token punctuation">;</span>      setProxyContext <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// Get as late as possible to minimize the time we "own" the target,</span>    <span class="token comment" spellcheck="true">// in case it comes from a pool.</span>    <span class="token comment" spellcheck="true">// 获取目标对象</span>    target <span class="token operator">=</span> targetSource<span class="token punctuation">.</span><span class="token function">getTarget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> targetClass <span class="token operator">=</span> <span class="token punctuation">(</span>target <span class="token operator">!=</span> null <span class="token operator">?</span> target<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Get the interception chain for this method.</span>    <span class="token comment" spellcheck="true">// 获取该方法的拦截器执行链，这里是将advisor适配为MethodInterceptor并且返回和方法匹配的MethodInterceptor执行链。</span>    List<span class="token operator">&lt;</span>Object<span class="token operator">></span> chain <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>advised<span class="token punctuation">.</span><span class="token function">getInterceptorsAndDynamicInterceptionAdvice</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> targetClass<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Check whether we have any advice. If we don't, we can fallback on direct</span>    <span class="token comment" spellcheck="true">// reflective invocation of the target, and avoid creating a MethodInvocation.</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>chain<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// We can skip creating a MethodInvocation: just invoke the target directly</span>      <span class="token comment" spellcheck="true">// Note that the final invoker must be an InvokerInterceptor so we know it does</span>      <span class="token comment" spellcheck="true">// nothing but a reflective operation on the target, and no hot swapping or fancy proxying.</span>      Object<span class="token punctuation">[</span><span class="token punctuation">]</span> argsToUse <span class="token operator">=</span> AopProxyUtils<span class="token punctuation">.</span><span class="token function">adaptArgumentsIfNecessary</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>      retVal <span class="token operator">=</span> AopUtils<span class="token punctuation">.</span><span class="token function">invokeJoinpointUsingReflection</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> method<span class="token punctuation">,</span> argsToUse<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// We need to create a method invocation...</span>      <span class="token comment" spellcheck="true">// 方法调用前的最后一步: 创建MethodInvocation，它是作为拦截器之间执行传递的媒介</span>      MethodInvocation invocation <span class="token operator">=</span>        <span class="token keyword">new</span> <span class="token class-name">ReflectiveMethodInvocation</span><span class="token punctuation">(</span>proxy<span class="token punctuation">,</span> target<span class="token punctuation">,</span> method<span class="token punctuation">,</span> args<span class="token punctuation">,</span> targetClass<span class="token punctuation">,</span> chain<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// Proceed to the joinpoint through the interceptor chain.</span>      <span class="token comment" spellcheck="true">// 方法调用，内部通过递归调用实现拦截器对目标方法的拦截</span>      retVal <span class="token operator">=</span> invocation<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// Massage return value if necessary.</span>    Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> returnType <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">getReturnType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>retVal <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> retVal <span class="token operator">==</span> target <span class="token operator">&amp;&amp;</span>        returnType <span class="token operator">!=</span> Object<span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token operator">&amp;&amp;</span> returnType<span class="token punctuation">.</span><span class="token function">isInstance</span><span class="token punctuation">(</span>proxy<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>        <span class="token operator">!</span>RawTargetAccess<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">isAssignableFrom</span><span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">getDeclaringClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// Special case: it returned "this" and the return type of the method</span>      <span class="token comment" spellcheck="true">// is type-compatible. Note that we can't help if the target sets</span>      <span class="token comment" spellcheck="true">// a reference to itself in another returned object.</span>      retVal <span class="token operator">=</span> proxy<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>retVal <span class="token operator">==</span> null <span class="token operator">&amp;&amp;</span> returnType <span class="token operator">!=</span> Void<span class="token punctuation">.</span>TYPE <span class="token operator">&amp;&amp;</span> returnType<span class="token punctuation">.</span><span class="token function">isPrimitive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">AopInvocationException</span><span class="token punctuation">(</span>        <span class="token string">"Null return value from advice does not match primitive return type for: "</span> <span class="token operator">+</span> method<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> retVal<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">finally</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>target <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>targetSource<span class="token punctuation">.</span><span class="token function">isStatic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// Must have come from TargetSource.</span>      targetSource<span class="token punctuation">.</span><span class="token function">releaseTarget</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>setProxyContext<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// Restore old proxy.</span>      AopContext<span class="token punctuation">.</span><span class="token function">setCurrentProxy</span><span class="token punctuation">(</span>oldProxy<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>AdvisedSupport</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> List<span class="token operator">&lt;</span>Object<span class="token operator">></span> <span class="token function">getInterceptorsAndDynamicInterceptionAdvice</span><span class="token punctuation">(</span>Method method<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> targetClass<span class="token punctuation">)</span> <span class="token punctuation">{</span>  MethodCacheKey cacheKey <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MethodCacheKey</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 先去获取缓存，拿到对应的执行链</span>  List<span class="token operator">&lt;</span>Object<span class="token operator">></span> cached <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>methodCache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>cacheKey<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>cached <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 缓存中没有 则通过AdvisorChainFactory获取执行链</span>    cached <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>advisorChainFactory<span class="token punctuation">.</span><span class="token function">getInterceptorsAndDynamicInterceptionAdvice</span><span class="token punctuation">(</span>      <span class="token keyword">this</span><span class="token punctuation">,</span> method<span class="token punctuation">,</span> targetClass<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 将执行链添加到缓存中</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>methodCache<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>cacheKey<span class="token punctuation">,</span> cached<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> cached<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>DefaultAdvisorChainFactory</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DefaultAdvisorChainFactory</span> <span class="token keyword">implements</span> <span class="token class-name">AdvisorChainFactory</span><span class="token punctuation">,</span> Serializable <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>Object<span class="token operator">></span> <span class="token function">getInterceptorsAndDynamicInterceptionAdvice</span><span class="token punctuation">(</span>            Advised config<span class="token punctuation">,</span> Method method<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> targetClass<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// This is somewhat tricky... We have to process introductions first,</span>        <span class="token comment" spellcheck="true">// but we need to preserve order in the ultimate list.</span>    <span class="token comment" spellcheck="true">// 获取Advisor适配器注册工厂</span>        AdvisorAdapterRegistry registry <span class="token operator">=</span> GlobalAdvisorAdapterRegistry<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 获取配置中的Advisor</span>        Advisor<span class="token punctuation">[</span><span class="token punctuation">]</span> advisors <span class="token operator">=</span> config<span class="token punctuation">.</span><span class="token function">getAdvisors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>Object<span class="token operator">></span> interceptorList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>advisors<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>        Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> actualClass <span class="token operator">=</span> <span class="token punctuation">(</span>targetClass <span class="token operator">!=</span> null <span class="token operator">?</span> targetClass <span class="token operator">:</span> method<span class="token punctuation">.</span><span class="token function">getDeclaringClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Boolean hasIntroductions <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Advisor advisor <span class="token operator">:</span> advisors<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>advisor <span class="token keyword">instanceof</span> <span class="token class-name">PointcutAdvisor</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// Add it conditionally.</span>        <span class="token comment" spellcheck="true">// 下面这一大串则是将配置中Advisor与当前方法进行匹配，如果匹配的上则加入到执行链中，否则跳过</span>                PointcutAdvisor pointcutAdvisor <span class="token operator">=</span> <span class="token punctuation">(</span>PointcutAdvisor<span class="token punctuation">)</span> advisor<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>config<span class="token punctuation">.</span><span class="token function">isPreFiltered</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> pointcutAdvisor<span class="token punctuation">.</span><span class="token function">getPointcut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span>actualClass<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    MethodMatcher mm <span class="token operator">=</span> pointcutAdvisor<span class="token punctuation">.</span><span class="token function">getPointcut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMethodMatcher</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">boolean</span> match<span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>mm <span class="token keyword">instanceof</span> <span class="token class-name">IntroductionAwareMethodMatcher</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>hasIntroductions <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                            hasIntroductions <span class="token operator">=</span> <span class="token function">hasMatchingIntroductions</span><span class="token punctuation">(</span>advisors<span class="token punctuation">,</span> actualClass<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                        match <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>IntroductionAwareMethodMatcher<span class="token punctuation">)</span> mm<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> actualClass<span class="token punctuation">,</span> hasIntroductions<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">else</span> <span class="token punctuation">{</span>                        match <span class="token operator">=</span> mm<span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> actualClass<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>match<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        MethodInterceptor<span class="token punctuation">[</span><span class="token punctuation">]</span> interceptors <span class="token operator">=</span> registry<span class="token punctuation">.</span><span class="token function">getInterceptors</span><span class="token punctuation">(</span>advisor<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>mm<span class="token punctuation">.</span><span class="token function">isRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                            <span class="token comment" spellcheck="true">// Creating a new object instance in the getInterceptors() method</span>                            <span class="token comment" spellcheck="true">// isn't a problem as we normally cache created chains.</span>                            <span class="token keyword">for</span> <span class="token punctuation">(</span>MethodInterceptor interceptor <span class="token operator">:</span> interceptors<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 运行时匹配，创建一个新对象，对象内容包含拦截器和方法匹配器</span>                                interceptorList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InterceptorAndDynamicMethodMatcher</span><span class="token punctuation">(</span>interceptor<span class="token punctuation">,</span> mm<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token punctuation">}</span>                        <span class="token punctuation">}</span>                        <span class="token keyword">else</span> <span class="token punctuation">{</span>                            interceptorList<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>interceptors<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>advisor <span class="token keyword">instanceof</span> <span class="token class-name">IntroductionAdvisor</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 需要处理接口增强Advisor</span>                IntroductionAdvisor ia <span class="token operator">=</span> <span class="token punctuation">(</span>IntroductionAdvisor<span class="token punctuation">)</span> advisor<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>config<span class="token punctuation">.</span><span class="token function">isPreFiltered</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> ia<span class="token punctuation">.</span><span class="token function">getClassFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span>actualClass<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    Interceptor<span class="token punctuation">[</span><span class="token punctuation">]</span> interceptors <span class="token operator">=</span> registry<span class="token punctuation">.</span><span class="token function">getInterceptors</span><span class="token punctuation">(</span>advisor<span class="token punctuation">)</span><span class="token punctuation">;</span>                    interceptorList<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>interceptors<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 其他类型的Advisor</span>                Interceptor<span class="token punctuation">[</span><span class="token punctuation">]</span> interceptors <span class="token operator">=</span> registry<span class="token punctuation">.</span><span class="token function">getInterceptors</span><span class="token punctuation">(</span>advisor<span class="token punctuation">)</span><span class="token punctuation">;</span>                interceptorList<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>interceptors<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> interceptorList<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * Determine whether the Advisors contain matching introductions.     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">hasMatchingIntroductions</span><span class="token punctuation">(</span>Advisor<span class="token punctuation">[</span><span class="token punctuation">]</span> advisors<span class="token punctuation">,</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> actualClass<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Advisor advisor <span class="token operator">:</span> advisors<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>advisor <span class="token keyword">instanceof</span> <span class="token class-name">IntroductionAdvisor</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                IntroductionAdvisor ia <span class="token operator">=</span> <span class="token punctuation">(</span>IntroductionAdvisor<span class="token punctuation">)</span> advisor<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>ia<span class="token punctuation">.</span><span class="token function">getClassFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span>actualClass<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>ReflectiveMethoInvocation</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token annotation punctuation">@Nullable</span><span class="token keyword">public</span> Object <span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// We start with an index of -1 and increment early.</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>currentInterceptorIndex <span class="token operator">==</span> <span class="token keyword">this</span><span class="token punctuation">.</span>interceptorsAndDynamicMethodMatchers<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 执行目标连接点</span>    <span class="token keyword">return</span> <span class="token function">invokeJoinpoint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  Object interceptorOrInterceptionAdvice <span class="token operator">=</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>interceptorsAndDynamicMethodMatchers<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token operator">++</span><span class="token keyword">this</span><span class="token punctuation">.</span>currentInterceptorIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>interceptorOrInterceptionAdvice <span class="token keyword">instanceof</span> <span class="token class-name">InterceptorAndDynamicMethodMatcher</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// Evaluate dynamic method matcher here: static part will already have</span>    <span class="token comment" spellcheck="true">// been evaluated and found to match.</span>    InterceptorAndDynamicMethodMatcher dm <span class="token operator">=</span>      <span class="token punctuation">(</span>InterceptorAndDynamicMethodMatcher<span class="token punctuation">)</span> interceptorOrInterceptionAdvice<span class="token punctuation">;</span>    Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> targetClass <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>targetClass <span class="token operator">!=</span> null <span class="token operator">?</span> <span class="token keyword">this</span><span class="token punctuation">.</span>targetClass <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>method<span class="token punctuation">.</span><span class="token function">getDeclaringClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>dm<span class="token punctuation">.</span>methodMatcher<span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>method<span class="token punctuation">,</span> targetClass<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>arguments<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> dm<span class="token punctuation">.</span>interceptor<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// Dynamic matching failed.</span>      <span class="token comment" spellcheck="true">// Skip this interceptor and invoke the next in the chain.</span>      <span class="token keyword">return</span> <span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// It's an interceptor, so we just invoke it: The pointcut will have</span>    <span class="token comment" spellcheck="true">// been evaluated statically before this object was constructed.</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>MethodInterceptor<span class="token punctuation">)</span> interceptorOrInterceptionAdvice<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="e-Spring-AOP的五种advice执行的先后顺序是如何定义的？"><a href="#e-Spring-AOP的五种advice执行的先后顺序是如何定义的？" class="headerlink" title="e.Spring AOP的五种advice执行的先后顺序是如何定义的？"></a>e.Spring AOP的五种advice执行的先后顺序是如何定义的？</h4><blockquote><p>在上面说到MethodInterceptor执行链，我们知道在注解配置中@Before、@After、@AfterReturning、@AfterThrowing以及@Around对应的方法都会被Spring生成相应的MethodInterceptor，那么他们之间的执行顺序是如何的呢？先来说下结论：</p><ul><li>不同切面下，advisor所属的切面的优先级谁高谁在前</li><li>相同切面下，两个advisor如果其中至少一个是AfterAdvice的情况下，谁的声明顺序高(Java Method反射获取方法集合的index)谁在前；两个Advisor均不是AfterAdvice的情况，谁的声明顺序低，谁在前。</li></ul><p>下面我们来介绍下: </p></blockquote><ul><li>AspectJAwareAdvisorAutoProxyCreator</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 给Advisor进行排序，该方法是在构建完Advisor集合之后进行调用的</span><span class="token keyword">protected</span> List<span class="token operator">&lt;</span>Advisor<span class="token operator">></span> <span class="token function">sortAdvisors</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>Advisor<span class="token operator">></span> advisors<span class="token punctuation">)</span> <span class="token punctuation">{</span>  List<span class="token operator">&lt;</span>PartiallyComparableAdvisorHolder<span class="token operator">></span> partiallyComparableAdvisors <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>advisors<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span>Advisor element <span class="token operator">:</span> advisors<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 这里面有个关键类DEFAULT_PRECEDENCE_COMPARATOR，也就是AspectJPrecedenceComparator</span>    partiallyComparableAdvisors<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>      <span class="token keyword">new</span> <span class="token class-name">PartiallyComparableAdvisorHolder</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span> DEFAULT_PRECEDENCE_COMPARATOR<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 进行排序，排序算法我们可以看下AspectJPrecedenceComparator内部的实现</span>  List<span class="token operator">&lt;</span>PartiallyComparableAdvisorHolder<span class="token operator">></span> sorted <span class="token operator">=</span> PartialOrder<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>partiallyComparableAdvisors<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>sorted <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>    List<span class="token operator">&lt;</span>Advisor<span class="token operator">></span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>advisors<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>PartiallyComparableAdvisorHolder pcAdvisor <span class="token operator">:</span> sorted<span class="token punctuation">)</span> <span class="token punctuation">{</span>      result<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>pcAdvisor<span class="token punctuation">.</span><span class="token function">getAdvisor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">sortAdvisors</span><span class="token punctuation">(</span>advisors<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>AspectJPrecedenceComparator-排序算法</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span>Advisor o1<span class="token punctuation">,</span> Advisor o2<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 这里依赖AnnotationAwareOrderComparator比较器，该比较器能够得出不同切面内的两个Advisor的优先级</span>  <span class="token keyword">int</span> advisorPrecedence <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>advisorComparator<span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span>o1<span class="token punctuation">,</span> o2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 当两个Advisor之间是相同优先级并且定义在相同切面时，需要区分出优先级</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>advisorPrecedence <span class="token operator">==</span> SAME_PRECEDENCE <span class="token operator">&amp;&amp;</span> <span class="token function">declaredInSameAspect</span><span class="token punctuation">(</span>o1<span class="token punctuation">,</span> o2<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    advisorPrecedence <span class="token operator">=</span> <span class="token function">comparePrecedenceWithinAspect</span><span class="token punctuation">(</span>o1<span class="token punctuation">,</span> o2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> advisorPrecedence<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 这里备注下五种Advice的DeclarationOrder</span><span class="token comment" spellcheck="true">// AspectJAfterThrowingAdvice 4</span><span class="token comment" spellcheck="true">// AspectJAfterReturningAdvice 3</span><span class="token comment" spellcheck="true">// AspectJAfterAdvice 2</span><span class="token comment" spellcheck="true">// AspectJBeforeAdvice 1</span><span class="token comment" spellcheck="true">// AspectJAroundAdvice 0</span><span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">comparePrecedenceWithinAspect</span><span class="token punctuation">(</span>Advisor advisor1<span class="token punctuation">,</span> Advisor advisor2<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 两个advisor中是否至少有一个AfterAdvice</span>  <span class="token keyword">boolean</span> oneOrOtherIsAfterAdvice <span class="token operator">=</span>    <span class="token punctuation">(</span>AspectJAopUtils<span class="token punctuation">.</span><span class="token function">isAfterAdvice</span><span class="token punctuation">(</span>advisor1<span class="token punctuation">)</span> <span class="token operator">||</span> AspectJAopUtils<span class="token punctuation">.</span><span class="token function">isAfterAdvice</span><span class="token punctuation">(</span>advisor2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 取出Advisor的声明顺序差</span>  <span class="token keyword">int</span> adviceDeclarationOrderDelta <span class="token operator">=</span> <span class="token function">getAspectDeclarationOrder</span><span class="token punctuation">(</span>advisor1<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">getAspectDeclarationOrder</span><span class="token punctuation">(</span>advisor2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 如果至少有一个为AfterAdvice</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>oneOrOtherIsAfterAdvice<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// the advice declared last has higher precedence</span>    <span class="token comment" spellcheck="true">// 在两个Advisor中，如果至少其中有一个为AfterAdvice的情况下，谁的DeclarationOrder大 谁的优先级高</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>adviceDeclarationOrderDelta <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// advice1 was declared before advice2</span>      <span class="token comment" spellcheck="true">// so advice1 has lower precedence</span>      <span class="token keyword">return</span> LOWER_PRECEDENCE<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>adviceDeclarationOrderDelta <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> SAME_PRECEDENCE<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> HIGHER_PRECEDENCE<span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// the advice declared first has higher precedence</span>    <span class="token comment" spellcheck="true">// 在两个Advisor中，如果没有AfterAdvice的情况下，谁的DeclarationOrder小，谁的优先极高</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>adviceDeclarationOrderDelta <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// advice1 was declared before advice2</span>      <span class="token comment" spellcheck="true">// so advice1 has higher precedence</span>      <span class="token keyword">return</span> HIGHER_PRECEDENCE<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>adviceDeclarationOrderDelta <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> SAME_PRECEDENCE<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> LOWER_PRECEDENCE<span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="五、XML注解驱动实现原理"><a href="#五、XML注解驱动实现原理" class="headerlink" title="五、XML注解驱动实现原理"></a>五、XML注解驱动实现原理</h2><blockquote><p>在写完注解驱动原理后，想另起一篇写一下关于XML配置aop拦截的使用与原理，发现其背后的原理与注解驱动几乎一致，除了配置来源发生变化，一个是基于注解，一个是基于Xml。所以便在本篇文章最后简单说一下在Xml文件中使用aop的示例，原理就不做赘述了，和注解驱动一致。</p></blockquote><ul><li>首先关注一下Xml配置文件</li></ul><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>aop</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/aop<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>        http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd        http://www.springframework.org/schema/aop https://www.springframework.org/schema/aop/spring-aop.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--开启AspectJ自动代理--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>aspectj-autoproxy</span><span class="token punctuation">/></span></span>    <span class="token comment" spellcheck="true">&lt;!--配置切面--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>aspectJXmlConfig<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.markus.spring.aop.feature.aspect.AspectJXmlConfig<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>aspect</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>aspectJXmlConfig<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>pointcut</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pointcut<span class="token punctuation">"</span></span> <span class="token attr-name">expression</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>execution(public * *(..))<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>before</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>before<span class="token punctuation">"</span></span> <span class="token attr-name">pointcut-ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pointcut<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>after</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>after<span class="token punctuation">"</span></span> <span class="token attr-name">pointcut-ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pointcut<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>after-returning</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>afterReturn<span class="token punctuation">"</span></span> <span class="token attr-name">pointcut-ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pointcut<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>after-throwing</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>throwException<span class="token punctuation">"</span></span> <span class="token attr-name">pointcut-ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pointcut<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>around</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>around<span class="token punctuation">"</span></span> <span class="token attr-name">pointcut-ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pointcut<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>aspect</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--注册业务Bean--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>echoService<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.markus.aop.overview.DefaultEchoService<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>AspectJXmlConfig</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>markus<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>aop<span class="token punctuation">.</span>feature<span class="token punctuation">.</span>aspect<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>ProceedingJoinPoint<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author: markus * @date: 2022/11/4 11:26 PM * @Description: 切面，用于xml使用 * @Blog: http://markuszhang.com * It's my honor to share what I've learned with you! */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AspectJXmlConfig</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">pointcut</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">before</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"AspectJXmlConfig#before"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">after</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"AspectJXmlConfig#after"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterReturn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"AspectJXmlConfig#afterReturn"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">throwException</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"AspectJXmlConfig#throwException"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Object <span class="token function">around</span><span class="token punctuation">(</span>ProceedingJoinPoint pjp<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"------around before------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Object result <span class="token operator">=</span> pjp<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"------around after------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>启动类</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>markus<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>aop<span class="token punctuation">.</span>feature<span class="token punctuation">.</span>blog<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>markus<span class="token punctuation">.</span>aop<span class="token punctuation">.</span>overview<span class="token punctuation">.</span>EchoService<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>support<span class="token punctuation">.</span>ClassPathXmlApplicationContext<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author: markus * @date: 2022/12/4 10:11 PM * @Description: 基于Xml的aop拦截示例 * @Blog: http://markuszhang.com * It's my honor to share what I've learned with you! */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AspectJXmlDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ClassPathXmlApplicationContext context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"classpath:/META-INF/spring-aop-advice-application-context.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        EchoService echoService <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>EchoService<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        echoService<span class="token punctuation">.</span><span class="token function">echo</span><span class="token punctuation">(</span><span class="token string">"Hello World!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        context<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>控制台</li></ul><pre class="line-numbers language-java"><code class="language-java">AspectJXmlConfig#before<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span>around before<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span>AspectJXmlConfig#throwExceptionAspectJXmlConfig#afterException in thread <span class="token string">"main"</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>RuntimeException<span class="token operator">:</span> 有一定几率异常    at com<span class="token punctuation">.</span>markus<span class="token punctuation">.</span>aop<span class="token punctuation">.</span>overview<span class="token punctuation">.</span>DefaultEchoService<span class="token punctuation">.</span><span class="token function">echo</span><span class="token punctuation">(</span>DefaultEchoService<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">23</span><span class="token punctuation">)</span>    at sun<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>NativeMethodAccessorImpl<span class="token punctuation">.</span><span class="token function">invoke0</span><span class="token punctuation">(</span>Native Method<span class="token punctuation">)</span>    at sun<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>NativeMethodAccessorImpl<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>NativeMethodAccessorImpl<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">62</span><span class="token punctuation">)</span>    at sun<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>DelegatingMethodAccessorImpl<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>DelegatingMethodAccessorImpl<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">43</span><span class="token punctuation">)</span>    at java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>Method<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">498</span><span class="token punctuation">)</span>    at org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>aop<span class="token punctuation">.</span>support<span class="token punctuation">.</span>AopUtils<span class="token punctuation">.</span><span class="token function">invokeJoinpointUsingReflection</span><span class="token punctuation">(</span>AopUtils<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">344</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们可以看到下图中的aspectj-autoproxy标签，与@EnableAspectJAutoProxy注解内容一致<br><img src="https://img-blog.csdnimg.cn/8609b0361c1a43ca824271914a6767eb.png" alt="在这里插入图片描述"></p><h2 id="六、本文总结"><a href="#六、本文总结" class="headerlink" title="六、本文总结"></a>六、本文总结</h2><p>本文对Spring AOP在注解驱动编程模式上的使用及其实现原理进行了详细的介绍，从用户角度实际使用出发，介绍了AspectJ五种Advice注解的使用，并对Pointcut切入点表达式的种类进行了详细的介绍并进行示例演示。介绍完使用后，又对其内部实现原理进行了详细的介绍，以时序图展示Spring在AOP上的实现概览，接着又对其中几处比较重要的实现细节进行了梳理介绍，并且在最后也简要介绍了Xml的使用方式。看完此篇之后，相信大家能够对Spring AOP注解驱动的使用、Xml配置驱动的使用以及其内部原理有个比较好的认知了。下一篇我们将介绍设计模式在Spring AOP中的应用，剖析在框架中应用到的设计模式并且能够将其应用到自己工作中的业务代码，这将是很大的一份收益。</p>]]></content>
      
      
      <categories>
          
          <category> spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 注解 </tag>
            
            <tag> aop </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring源码系列文章</title>
      <link href="/spring-yuan-ma-shu-li-xi-lie-wen-zhang.html"/>
      <url>/spring-yuan-ma-shu-li-xi-lie-wen-zhang.html</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h1 id="一、系列篇"><a href="#一、系列篇" class="headerlink" title="一、系列篇"></a>一、系列篇</h1><ul><li><a href>【spring源码分析】SpringFramework简介</a></li><li>【spring源码分析】Spring IoC容器概览</li><li>【spring源码分析】Spring IoC容器生命周期(一)之refresh主流程</li><li>【spring源码分析】Spring IoC容器生命周期(二)之start流程</li><li>【spring源码分析】Spring IoC容器生命周期(三)之close流程</li><li>【spring源码分析】Spring IoC容器生命周期(二)之stop流程</li><li>【spring源码分析】Spring Bean概览(一)之Bean基础</li><li>【spring源码分析】Spring Bean概览(二)之Bean作用域</li><li>【spring源码分析】Spring Bean生命周期(一)之加载BeanDefinition</li><li>【spring源码分析】Spring Bean生命周期(二)之解析BeanDefinition</li><li>【spring源码分析】Spring Bean生命周期(三)之注册BeanDefinition</li><li>【spring源码分析】Spring Bean生命周期(四)之合并BeanDefinition</li><li>【spring源码分析】Spring Bean生命周期(五)之Bean实例创建</li><li>【spring源码分析】Spring Bean生命周期(六)之Bean属性填充</li><li>【spring源码分析】Spring Bean生命周期(七)之Bean功能拓展</li><li>【Spring源码分析】Spring Bean生命周期(八)之Bean循环依赖处理</li><li>【spring源码分析】Spring IoC容器之基于Java注解的容器配置</li><li>【spring源码分析】Spring IoC容器之泛型处理</li><li>【spring源码分析】Spring IoC容器之事件处理</li><li>【spring源码分析】Spring IoC容器之Environment抽象</li><li>【spring源码分析】Spring IoC容器之数据绑定</li><li>【spring源码分析】Spring IoC容器之数据校验</li><li>【spring源码分析】Spring IoC容器之SpEL表达式</li></ul><h1 id="二、随笔篇"><a href="#二、随笔篇" class="headerlink" title="二、随笔篇"></a>二、随笔篇</h1><ul><li><a href="/autowired-zhu-ru-yuan-li.html">@Autowired注入原理</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 导航 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>lz4压缩算法</title>
      <link href="/lz4-ya-suo-suan-fa.html"/>
      <url>/lz4-ya-suo-suan-fa.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h2><p>Lz4压缩算法是由Yann Collet在2011年设计实现的，lz4属于lz77系列的压缩算法。lz77严格意义上来说不是一种算法，而是一种编码理论，它只定义了原理，并没有定义如何实现。基于lz77理论衍生的算法除lz4以外，还有lzss、lzb、lzh等。</p><p>lz4是目前基于综合来看效率最高的压缩算法，更加侧重于压缩解压缩速度，压缩比并不突出，本质上就是时间换空间。</p><p>对于github上给出的lz4性能介绍：每核压缩速度大于500MB/s，多核CPU可叠加；它所提供的解码器也是极其快速的，每核可达GB/s量级。</p><h2 id="二、算法思想"><a href="#二、算法思想" class="headerlink" title="二、算法思想"></a>二、算法思想</h2><p>lz77编码思想：它是一种基于字典的算法，它将长字符串（也可以称为匹配项或者短语）编码成短小的标记，用小标记代替字典中的短语，也就是说，它通过用小的标记来代替数据中多次重复出现的长字符串来达到数据压缩的目的。其处理的符号不一定是文本字符，也可以是其他任意大小的符号。</p><p>短语字典维护：lz77使用的是一个前向缓冲区和一个滑动窗口。它首先将数据载入到前向缓冲区，形成一批短语，再由滑动窗口滑动时，变成字典的一部分。</p><h2 id="三、算法实现"><a href="#三、算法实现" class="headerlink" title="三、算法实现"></a>三、算法实现</h2><blockquote><p>作者没有看过lz4的源码，c语言看起来太费劲了😭，对压缩过程、解压过程是通过一些比较好博客进行了学习，并简单总结了一些。</p><p>有兴趣的同学可以看下：<a href="https://github.com/lz4/lz4" target="_blank" rel="noopener">lz4 GitHub链接</a></p></blockquote><h3 id="1、lz4数据格式"><a href="#1、lz4数据格式" class="headerlink" title="1、lz4数据格式"></a>1、lz4数据格式</h3><blockquote><p>lz4实现了两种格式，分别是lz4_block_format和lz4_frame_format。</p><p>lz4_frame_format用于特殊场景，如file压缩、pipe压缩和流式压缩；这里主要介绍lz4_block_format（一般场景使用格式）</p></blockquote><p>压缩块有多个序列组成，一个序列是由一组字面量(非压缩字节)，后跟一个匹配副本。每个序列以token开始，字面量和匹配副本的长度是有token以及offset决定的。</p><p>literals指没有重复、首次出现的字节流，即不可压缩的部分</p><p>literals length指不可压缩部分的长度</p><p>match length指重复项(可以压缩的部分)长度</p><p>下图为单个序列的数据格式，一个完整的lz4压缩块是由多个序列组成的。</p><p><img src="https://img-blog.csdnimg.cn/c0a574cf4b5949b5b5c84e0512665589.png" alt="\[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-rfxQ7I9q-1654424611351)()\]"></p><h3 id="2、lz4压缩过程"><a href="#2、lz4压缩过程" class="headerlink" title="2、lz4压缩过程"></a>2、lz4压缩过程</h3><p>lz4遵循上面说到的lz77思想理论，通过滑动窗口、hash表、数据编码等操作实现数据压缩。压缩过程以至少4字节为扫描窗口查找匹配，每次移动1字节进行扫描，遇到重复的就进行压缩。</p><blockquote><p>举个例子：给出一个字符串: <code>abcde_fghabcde_ghxxahcde</code>,描述出此字符串的压缩过程</p><p>ps：我们按照6字节扫描窗口，每次1字节来进行扫描</p></blockquote><p><img src="https://img-blog.csdnimg.cn/ea3f539bafe54692be82c83931180f36.png" alt="在这里插入图片描述"></p><ol><li>假设lz4的滑动窗口大小为6字节，扫描窗口为1字节；</li><li>lz4开始扫描，首先对0-5位置做hash运算，hash表中无该值，所以存入hash表；</li><li>向后扫描，开始计算1-6位置hash值，hash表中依然无此值，所以继续将hash值存入hash表；</li><li>扫描过程依次类推，直到图中例子，在计算9-15位置的hash值时，发现hash表中已经存在，则进行压缩，偏移量offset值置为9，重复长度为6，该值存入token值的低4位中；</li><li>匹配压缩项后开始尝试扩大匹配，当窗口扫描到10-16时，发现并没有匹配到，则将此值存入hash表；如果发现hash表中有值，如果符合匹配条件（例如10-15符合1-6）则扩大匹配项，重复长度设为7，调整相应的token值</li><li>这样滑动窗口扫描完所有的字符串之后，结束操作</li></ol><p>最终，这样压缩过程就结束了，得到这样一个字节串[-110, 97, 98, 99, 100, 101, 95, 102, 103, 104, 9, 0, -112, 103, 104, 120, 120, 97, 104, 99, 100, 101]。大家可能在看到这段内容可能有些懵逼，我在解压过程解释一下。</p><h3 id="3、lz4解压过程"><a href="#3、lz4解压过程" class="headerlink" title="3、lz4解压过程"></a>3、lz4解压过程</h3><blockquote><p>lz4压缩串: [-110, 97, 98, 99, 100, 101, 95, 102, 103, 104, 9, 0, -112, 103, 104, 120, 120, 97, 104, 99, 100, 101]</p><p>二进制是字符串经过utf-8编码后的值</p></blockquote><p>下图是对上面压缩串的解释：</p><p><img src="https://img-blog.csdnimg.cn/c2fc5bb2ff6944a7a2c84671d1ec23df.png" alt="\[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-pAz4HBqR-1654424611352)()\]"></p><p>这里简单记录下解压的过程：</p><ol><li>当lz4解压从0开始遍历时，先判断token值(-110)，-110转换为计算机二进制为10010010，高四位1001代表字面量长度为9，低四位0010代表重复项匹配的长度2+4(minimum repeated bytes)</li><li>向后遍历9位，得到长度为9的字符串(abcde_fgh)，偏移量为9，从当前位置向前移动9位则是重复位起始位置，低四位说明重复项长度为6字节，则继续生成长度为6的字符串(abcde_)</li><li>此时生成(abcde_fghabcde_)，接着开始判断下一sequence token起始位，最终生成abcde_fghabcde_ghxxahcde(压缩前的字符串)</li></ol><h2 id="四、Lz4-Java"><a href="#四、Lz4-Java" class="headerlink" title="四、Lz4-Java"></a>四、Lz4-Java</h2><blockquote><p><a href="https://github.com/lz4/lz4-java" target="_blank" rel="noopener">lz4/lz4-java</a>是由Rei Odaira等人写的一套使用lz4压缩的Java类库。</p></blockquote><h3 id="1、简介"><a href="#1、简介" class="headerlink" title="1、简介"></a>1、简介</h3><p>该类库提供了对两种压缩方法的访问，他们都能生成有效的lz4流：</p><ol><li>快速扫描（lz4）<ol><li>内存占用少（16KB）</li><li>非常快</li><li>合理的压缩比（取决于输入的冗余度）</li></ol></li><li>高压缩（lz4hc）<ol><li>内存占用中等（256KB）</li><li>相当慢（比lz4慢10倍）</li><li>良好的压缩比（取决于输入的大小和冗余度）</li></ol></li><li>这两种压缩算法产生的流使用相同的压缩格式，解压缩速度非常快，可以由相同的解压缩实例解压缩</li></ol><h3 id="2、类库"><a href="#2、类库" class="headerlink" title="2、类库"></a>2、类库</h3><blockquote><p>该类库提供了几个关键类，这里简单介绍一下</p></blockquote><h4 id="LZ4Factory"><a href="#LZ4Factory" class="headerlink" title="LZ4Factory"></a>LZ4Factory</h4><p>Lz4 API的入口点，该类有3个实例</p><ol><li>一个native实例，它是与原始LZ4 C实现的JNI绑定</li><li>一个safe Java实例，它是原始C库的纯Java端口（Java 官方编写的API）</li><li>一个unsafe Java实例，它是使用非官方sun.misc.Unsafe API的Java端口（Unsafe类可用来直接访问系统内存资源并进行自主管理，其在提升Java运行效率，增强Java语言底层操作能力方面起到很大的作用，Unsafe可认为是Java中留下的后门，提供了一些低层次操作，如直接内存访问、线程调度等）</li></ol><p>只有safe Java实例才能保证在JVM上工作，因此建议使用fastestInstance()或fastestJavaInstance()来拉取LZ4Factory实例。</p><h4 id="LZ4Compressor"><a href="#LZ4Compressor" class="headerlink" title="LZ4Compressor"></a>LZ4Compressor</h4><p>压缩器有两种，一种是fastCompressor，也就是lz4简介中说的快速扫描压缩器；另一种是highCompressor，是实现高压缩率压缩器(lz4hc)。</p><h4 id="LZ4Decompressor"><a href="#LZ4Decompressor" class="headerlink" title="LZ4Decompressor"></a>LZ4Decompressor</h4><p>lz4-java提供了两个解压器：LZ4FastDecompressor；LZ4SafeDecompressor</p><p>两者不同点在于：LZ4FastDecompressor在解压缩时是已知源字符串长度，而LZ4SafeDecompressor在解压缩时是已知压缩字段的长度</p><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><blockquote><p>上面说到的两个压缩器和两个解压缩器，在压缩和解压缩的时候，是可以互换的，比如说FastCompressor可以和LZ4SafeDecompressor搭配使用这样，因为两种压缩算法生成的流格式是一样的，无论用哪个解压缩器都能解压。</p></blockquote><p>在说完上面基本的类之后，再来看下lz4-Java类库给我们提供流式传输类：LZ4BlockOutputStream(输出流-编码)、LZ4BlockInputStream(输入流-解码)</p><p>下面这段代码是使用示例: </p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>markus<span class="token punctuation">.</span>compress<span class="token punctuation">.</span>utils<span class="token punctuation">;</span><span class="token keyword">import</span> net<span class="token punctuation">.</span>jpountz<span class="token punctuation">.</span>lz4<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>ByteArrayInputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>ByteArrayOutputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>StringReader<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>UnsupportedEncodingException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>charset<span class="token punctuation">.</span>StandardCharsets<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author: markus * @date: 2022/5/22 4:54 下午 * @Description: Lz4压缩工具 * @Blog: http://markuszhang.com/ */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Lz4Utils</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> ARRAY_SIZE <span class="token operator">=</span> <span class="token number">4096</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> LZ4Factory factory <span class="token operator">=</span> LZ4Factory<span class="token punctuation">.</span><span class="token function">fastestInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> LZ4Compressor compressor <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">fastCompressor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> LZ4FastDecompressor decompressor <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">fastDecompressor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> LZ4SafeDecompressor safeDecompressor <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">safeDecompressor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">compress</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>bytes <span class="token operator">==</span> null <span class="token operator">||</span> bytes<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            ByteArrayOutputStream outputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            LZ4BlockOutputStream lz4BlockOutputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LZ4BlockOutputStream</span><span class="token punctuation">(</span>outputStream<span class="token punctuation">,</span> ARRAY_SIZE<span class="token punctuation">,</span> compressor<span class="token punctuation">)</span><span class="token punctuation">;</span>            lz4BlockOutputStream<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">;</span>            lz4BlockOutputStream<span class="token punctuation">.</span><span class="token function">finish</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> outputStream<span class="token punctuation">.</span><span class="token function">toByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Lz4压缩失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">uncompress</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>bytes <span class="token operator">==</span> null <span class="token operator">||</span> bytes<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            ByteArrayOutputStream outputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayOutputStream</span><span class="token punctuation">(</span>ARRAY_SIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>            ByteArrayInputStream inputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayInputStream</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">;</span>            LZ4BlockInputStream decompressedInputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LZ4BlockInputStream</span><span class="token punctuation">(</span>inputStream<span class="token punctuation">,</span> decompressor<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> count<span class="token punctuation">;</span>            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span>ARRAY_SIZE<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>count <span class="token operator">=</span> decompressedInputStream<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                outputStream<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> outputStream<span class="token punctuation">.</span><span class="token function">toByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"lz4解压缩失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> <span class="token string">"abcde_fghabcde_ghxxahcde"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span>StandardCharsets<span class="token punctuation">.</span>UTF_8<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> compress <span class="token operator">=</span> <span class="token function">compress</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> decompress <span class="token operator">=</span> <span class="token function">uncompress</span><span class="token punctuation">(</span>compress<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3、性能对比"><a href="#3、性能对比" class="headerlink" title="3、性能对比"></a>3、性能对比</h3><blockquote><p>在了解完lz4的算法思想、实现思路以及Java类库后，我们可以使用它来和其他压缩类进行一个性能对比</p></blockquote><p>测试源代码：(相关源码可以去我github仓库下载<a href="https://github.com/markuszcl99/compress-algorithm" target="_blank" rel="noopener">仓库链接</a>)</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>markus<span class="token punctuation">.</span>compress<span class="token punctuation">.</span>test<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>markus<span class="token punctuation">.</span>compress<span class="token punctuation">.</span>domain<span class="token punctuation">.</span>User<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>markus<span class="token punctuation">.</span>compress<span class="token punctuation">.</span>service<span class="token punctuation">.</span>UserService<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>markus<span class="token punctuation">.</span>compress<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>openjdk<span class="token punctuation">.</span>jmh<span class="token punctuation">.</span>annotations<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>openjdk<span class="token punctuation">.</span>jmh<span class="token punctuation">.</span>results<span class="token punctuation">.</span>format<span class="token punctuation">.</span>ResultFormatType<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>openjdk<span class="token punctuation">.</span>jmh<span class="token punctuation">.</span>runner<span class="token punctuation">.</span>Runner<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>openjdk<span class="token punctuation">.</span>jmh<span class="token punctuation">.</span>runner<span class="token punctuation">.</span>RunnerException<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>openjdk<span class="token punctuation">.</span>jmh<span class="token punctuation">.</span>runner<span class="token punctuation">.</span>options<span class="token punctuation">.</span>Options<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>openjdk<span class="token punctuation">.</span>jmh<span class="token punctuation">.</span>runner<span class="token punctuation">.</span>options<span class="token punctuation">.</span>OptionsBuilder<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>TimeUnit<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author: markus * @date: 2022/5/22 5:08 下午 * @Description: 压缩工具的性能测试 * @Blog: http://markuszhang.com/ */</span><span class="token annotation punctuation">@BenchmarkMode</span><span class="token punctuation">(</span>Mode<span class="token punctuation">.</span>Throughput<span class="token punctuation">)</span><span class="token annotation punctuation">@OutputTimeUnit</span><span class="token punctuation">(</span>TimeUnit<span class="token punctuation">.</span>MILLISECONDS<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PerformanceTest</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 用来序列化的用户对象     */</span>    <span class="token annotation punctuation">@State</span><span class="token punctuation">(</span>Scope<span class="token punctuation">.</span>Benchmark<span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">CommonState</span> <span class="token punctuation">{</span>        User user<span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> originBytes<span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> lz4CompressBytes<span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> snappyCompressBytes<span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> gzipCompressBytes<span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bzipCompressBytes<span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> deflateCompressBytes<span class="token punctuation">;</span>        <span class="token annotation punctuation">@Setup</span><span class="token punctuation">(</span>Level<span class="token punctuation">.</span>Trial<span class="token punctuation">)</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">prepare</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            UserService userService <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            user <span class="token operator">=</span> userService<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            originBytes <span class="token operator">=</span> ProtostuffUtils<span class="token punctuation">.</span><span class="token function">serialize</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>            lz4CompressBytes <span class="token operator">=</span> Lz4Utils<span class="token punctuation">.</span><span class="token function">compress</span><span class="token punctuation">(</span>originBytes<span class="token punctuation">)</span><span class="token punctuation">;</span>            snappyCompressBytes <span class="token operator">=</span> SnappyUtils<span class="token punctuation">.</span><span class="token function">compress</span><span class="token punctuation">(</span>originBytes<span class="token punctuation">)</span><span class="token punctuation">;</span>            gzipCompressBytes <span class="token operator">=</span> GzipUtils<span class="token punctuation">.</span><span class="token function">compress</span><span class="token punctuation">(</span>originBytes<span class="token punctuation">)</span><span class="token punctuation">;</span>            bzipCompressBytes <span class="token operator">=</span> Bzip2Utils<span class="token punctuation">.</span><span class="token function">compress</span><span class="token punctuation">(</span>originBytes<span class="token punctuation">)</span><span class="token punctuation">;</span>            deflateCompressBytes <span class="token operator">=</span> DeflateUtils<span class="token punctuation">.</span><span class="token function">compress</span><span class="token punctuation">(</span>originBytes<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * Lz4压缩     *     * @param commonState     * @return     */</span>    <span class="token annotation punctuation">@Benchmark</span>    <span class="token keyword">public</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">lz4Compress</span><span class="token punctuation">(</span>CommonState commonState<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> Lz4Utils<span class="token punctuation">.</span><span class="token function">compress</span><span class="token punctuation">(</span>commonState<span class="token punctuation">.</span>originBytes<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * lz4解压缩     *     * @param commonState     */</span>    <span class="token annotation punctuation">@Benchmark</span>    <span class="token keyword">public</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">lz4Uncompress</span><span class="token punctuation">(</span>CommonState commonState<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> Lz4Utils<span class="token punctuation">.</span><span class="token function">uncompress</span><span class="token punctuation">(</span>commonState<span class="token punctuation">.</span>lz4CompressBytes<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * snappy压缩     *     * @param commonState     * @return     */</span>    <span class="token annotation punctuation">@Benchmark</span>    <span class="token keyword">public</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">snappyCompress</span><span class="token punctuation">(</span>CommonState commonState<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> SnappyUtils<span class="token punctuation">.</span><span class="token function">compress</span><span class="token punctuation">(</span>commonState<span class="token punctuation">.</span>originBytes<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * snappy解压缩     *     * @param commonState     * @return     */</span>    <span class="token annotation punctuation">@Benchmark</span>    <span class="token keyword">public</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">snappyUncompress</span><span class="token punctuation">(</span>CommonState commonState<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> SnappyUtils<span class="token punctuation">.</span><span class="token function">uncompress</span><span class="token punctuation">(</span>commonState<span class="token punctuation">.</span>snappyCompressBytes<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * Gzip压缩     *     * @param commonState     * @return     */</span>    <span class="token annotation punctuation">@Benchmark</span>    <span class="token keyword">public</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">gzipCompress</span><span class="token punctuation">(</span>CommonState commonState<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> GzipUtils<span class="token punctuation">.</span><span class="token function">compress</span><span class="token punctuation">(</span>commonState<span class="token punctuation">.</span>originBytes<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * Gzip解压缩     *     * @param commonState     * @return     */</span>    <span class="token annotation punctuation">@Benchmark</span>    <span class="token keyword">public</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">gzipUncompress</span><span class="token punctuation">(</span>CommonState commonState<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> GzipUtils<span class="token punctuation">.</span><span class="token function">uncompress</span><span class="token punctuation">(</span>commonState<span class="token punctuation">.</span>gzipCompressBytes<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * bzip2压缩     *     * @param commonState     * @return     */</span>    <span class="token annotation punctuation">@Benchmark</span>    <span class="token keyword">public</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">bzip2Compress</span><span class="token punctuation">(</span>CommonState commonState<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> Bzip2Utils<span class="token punctuation">.</span><span class="token function">compress</span><span class="token punctuation">(</span>commonState<span class="token punctuation">.</span>originBytes<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * bzip2压缩     *     * @param commonState     * @return     */</span>    <span class="token annotation punctuation">@Benchmark</span>    <span class="token keyword">public</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">bzip2Uncompress</span><span class="token punctuation">(</span>CommonState commonState<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> Bzip2Utils<span class="token punctuation">.</span><span class="token function">uncompress</span><span class="token punctuation">(</span>commonState<span class="token punctuation">.</span>bzipCompressBytes<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * bzip2压缩     *     * @param commonState     * @return     */</span>    <span class="token annotation punctuation">@Benchmark</span>    <span class="token keyword">public</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">deflateCompress</span><span class="token punctuation">(</span>CommonState commonState<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> DeflateUtils<span class="token punctuation">.</span><span class="token function">compress</span><span class="token punctuation">(</span>commonState<span class="token punctuation">.</span>originBytes<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * bzip2压缩     *     * @param commonState     * @return     */</span>    <span class="token annotation punctuation">@Benchmark</span>    <span class="token keyword">public</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">deflateUncompress</span><span class="token punctuation">(</span>CommonState commonState<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> DeflateUtils<span class="token punctuation">.</span><span class="token function">uncompress</span><span class="token punctuation">(</span>commonState<span class="token punctuation">.</span>deflateCompressBytes<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> RunnerException <span class="token punctuation">{</span>        Options opt <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OptionsBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">include</span><span class="token punctuation">(</span>PerformanceTest<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">forks</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">threads</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">warmupIterations</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">measurementIterations</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">result</span><span class="token punctuation">(</span><span class="token string">"PerformanceTest.json"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">resultFormat</span><span class="token punctuation">(</span>ResultFormatType<span class="token punctuation">.</span>JSON<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Runner</span><span class="token punctuation">(</span>opt<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>性能测试图：</p><blockquote><p>附上lz4官网给出的性能测试图和自己测试的性能图，有些差异，有可能对于压缩数据的不同导致的差异。</p></blockquote><p>官网给的：<br><img src="https://img-blog.csdnimg.cn/3ab78b87569340abab7c099f27cbda42.png" alt="\[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-EkH9HlDH-1654424611352)(http://cdn.markuszhang.com/img/image-20220605180709948.png)\]"><br>自己测得：<br><img src="https://img-blog.csdnimg.cn/961be61360584d669591c2ad3ff2bc61.png" alt="\[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-m4EQ9VB4-1654424611353)(http://cdn.markuszhang.com/img/image-20220605180406885.png)\]"></p><p>在公司对于特征内容的压缩，观察lz4和snappy的对比，看上去lz4和snappy的压缩和解压缩的性能差不多，但lz4更稳定些，尖刺场景少。由于设计公司内部内容，就不粘图了。</p><h3 id="4、压缩率对比"><a href="#4、压缩率对比" class="headerlink" title="4、压缩率对比"></a>4、压缩率对比</h3><blockquote><p>在压缩率上，按照从高到低是：bzip2 &gt; Deflate &gt; Gzip &gt; lz4 &gt; snappy</p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>markus<span class="token punctuation">.</span>compress<span class="token punctuation">.</span>demo<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>fastjson<span class="token punctuation">.</span>JSONObject<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>markus<span class="token punctuation">.</span>compress<span class="token punctuation">.</span>domain<span class="token punctuation">.</span>User<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>markus<span class="token punctuation">.</span>compress<span class="token punctuation">.</span>service<span class="token punctuation">.</span>UserService<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>markus<span class="token punctuation">.</span>compress<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>charset<span class="token punctuation">.</span>StandardCharsets<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author: markus * @date: 2022/5/22 3:52 下午 * @Description: 压缩字节示例 * @Blog: http://markuszhang.com/ */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CompressDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        User user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// json序列化</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> origin_json <span class="token operator">=</span> JSONObject<span class="token punctuation">.</span><span class="token function">toJSONBytes</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"原始json字节数: "</span> <span class="token operator">+</span> origin_json<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// pb序列化</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> origin <span class="token operator">=</span> ProtostuffUtils<span class="token punctuation">.</span><span class="token function">serialize</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"原始pb字节数: "</span> <span class="token operator">+</span> origin<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">testGzip</span><span class="token punctuation">(</span>origin<span class="token punctuation">,</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">testSnappy</span><span class="token punctuation">(</span>origin<span class="token punctuation">,</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">testLz4</span><span class="token punctuation">(</span>origin<span class="token punctuation">,</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">testBzip2</span><span class="token punctuation">(</span>origin<span class="token punctuation">,</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">testDeflate</span><span class="token punctuation">(</span>origin<span class="token punctuation">,</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"--------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String str <span class="token operator">=</span> <span class="token function">getString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> source <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span>StandardCharsets<span class="token punctuation">.</span>UTF_8<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> compress <span class="token operator">=</span> Lz4Utils<span class="token punctuation">.</span><span class="token function">compress</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 将compress转为字符串</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">translateString</span><span class="token punctuation">(</span>compress<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"--------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String str2 <span class="token operator">=</span> <span class="token function">getString2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> source2 <span class="token operator">=</span> str2<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span>StandardCharsets<span class="token punctuation">.</span>UTF_8<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> compress2 <span class="token operator">=</span> Lz4Utils<span class="token punctuation">.</span><span class="token function">compress</span><span class="token punctuation">(</span>source2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> uncompress <span class="token operator">=</span> Lz4Utils<span class="token punctuation">.</span><span class="token function">uncompress</span><span class="token punctuation">(</span>compress2<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> String <span class="token function">translateString</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chars <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">char</span><span class="token punctuation">[</span>bytes<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> chars<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            chars<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> bytes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        String str <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>chars<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> str<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> String <span class="token function">getString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"fghabcde_bcdefgh_abcdefghxxxxxxx"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> String <span class="token function">getString2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"abcde_fghabcde_ghxxahcde"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">testGzip</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> origin<span class="token punctuation">,</span> User user<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"---------------GZIP压缩---------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Gzip压缩</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> gzipCompress <span class="token operator">=</span> GzipUtils<span class="token punctuation">.</span><span class="token function">compress</span><span class="token punctuation">(</span>origin<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Gzip压缩: "</span> <span class="token operator">+</span> gzipCompress<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> gzipUncompress <span class="token operator">=</span> GzipUtils<span class="token punctuation">.</span><span class="token function">uncompress</span><span class="token punctuation">(</span>gzipCompress<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Gzip解压缩: "</span> <span class="token operator">+</span> gzipUncompress<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>        User deUser <span class="token operator">=</span> ProtostuffUtils<span class="token punctuation">.</span><span class="token function">deserialize</span><span class="token punctuation">(</span>gzipUncompress<span class="token punctuation">,</span> User<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"对象是否相等: "</span> <span class="token operator">+</span> user<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>deUser<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">testSnappy</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> origin<span class="token punctuation">,</span> User user<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"---------------Snappy压缩---------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Snappy压缩</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> snappyCompress <span class="token operator">=</span> SnappyUtils<span class="token punctuation">.</span><span class="token function">compress</span><span class="token punctuation">(</span>origin<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Snappy压缩: "</span> <span class="token operator">+</span> snappyCompress<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> snappyUncompress <span class="token operator">=</span> SnappyUtils<span class="token punctuation">.</span><span class="token function">uncompress</span><span class="token punctuation">(</span>snappyCompress<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Snappy解压缩: "</span> <span class="token operator">+</span> snappyUncompress<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>        User deUser <span class="token operator">=</span> ProtostuffUtils<span class="token punctuation">.</span><span class="token function">deserialize</span><span class="token punctuation">(</span>snappyUncompress<span class="token punctuation">,</span> User<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"对象是否相等: "</span> <span class="token operator">+</span> user<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>deUser<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">testLz4</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> origin<span class="token punctuation">,</span> User user<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"---------------Lz4压缩---------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Lz4压缩</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> Lz4Compress <span class="token operator">=</span> Lz4Utils<span class="token punctuation">.</span><span class="token function">compress</span><span class="token punctuation">(</span>origin<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Lz4压缩: "</span> <span class="token operator">+</span> Lz4Compress<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> Lz4Uncompress <span class="token operator">=</span> Lz4Utils<span class="token punctuation">.</span><span class="token function">uncompress</span><span class="token punctuation">(</span>Lz4Compress<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Lz4解压缩: "</span> <span class="token operator">+</span> Lz4Uncompress<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>        User deUser <span class="token operator">=</span> ProtostuffUtils<span class="token punctuation">.</span><span class="token function">deserialize</span><span class="token punctuation">(</span>Lz4Uncompress<span class="token punctuation">,</span> User<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"对象是否相等: "</span> <span class="token operator">+</span> user<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>deUser<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">testBzip2</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> origin<span class="token punctuation">,</span> User user<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"---------------bzip2压缩---------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// bzip2压缩</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bzip2Compress <span class="token operator">=</span> Bzip2Utils<span class="token punctuation">.</span><span class="token function">compress</span><span class="token punctuation">(</span>origin<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"bzip2压缩: "</span> <span class="token operator">+</span> bzip2Compress<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bzip2Uncompress <span class="token operator">=</span> Bzip2Utils<span class="token punctuation">.</span><span class="token function">uncompress</span><span class="token punctuation">(</span>bzip2Compress<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"bzip2解压缩: "</span> <span class="token operator">+</span> bzip2Uncompress<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>        User deUser <span class="token operator">=</span> ProtostuffUtils<span class="token punctuation">.</span><span class="token function">deserialize</span><span class="token punctuation">(</span>bzip2Uncompress<span class="token punctuation">,</span> User<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"对象是否相等: "</span> <span class="token operator">+</span> user<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>deUser<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">testDeflate</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> origin<span class="token punctuation">,</span> User user<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"---------------Deflate压缩---------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Deflate压缩</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> deflateCompress <span class="token operator">=</span> DeflateUtils<span class="token punctuation">.</span><span class="token function">compress</span><span class="token punctuation">(</span>origin<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Deflate压缩: "</span> <span class="token operator">+</span> deflateCompress<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> deflateUncompress <span class="token operator">=</span> DeflateUtils<span class="token punctuation">.</span><span class="token function">uncompress</span><span class="token punctuation">(</span>deflateCompress<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Deflate解压缩: "</span> <span class="token operator">+</span> deflateUncompress<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>        User deUser <span class="token operator">=</span> ProtostuffUtils<span class="token punctuation">.</span><span class="token function">deserialize</span><span class="token punctuation">(</span>deflateUncompress<span class="token punctuation">,</span> User<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"对象是否相等: "</span> <span class="token operator">+</span> user<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>deUser<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java">原始json字节数<span class="token operator">:</span> <span class="token number">5351</span>原始pb字节数<span class="token operator">:</span> <span class="token number">3850</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>GZIP压缩<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>Gzip压缩<span class="token operator">:</span> <span class="token number">2170</span>Gzip解压缩<span class="token operator">:</span> <span class="token number">3850</span>对象是否相等<span class="token operator">:</span> <span class="token boolean">true</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>Snappy压缩<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>Snappy压缩<span class="token operator">:</span> <span class="token number">3396</span>Snappy解压缩<span class="token operator">:</span> <span class="token number">3850</span>对象是否相等<span class="token operator">:</span> <span class="token boolean">true</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>Lz4压缩<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>Lz4压缩<span class="token operator">:</span> <span class="token number">3358</span>Lz4解压缩<span class="token operator">:</span> <span class="token number">3850</span>对象是否相等<span class="token operator">:</span> <span class="token boolean">true</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>bzip2压缩<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>bzip2压缩<span class="token operator">:</span> <span class="token number">2119</span>bzip2解压缩<span class="token operator">:</span> <span class="token number">3850</span>对象是否相等<span class="token operator">:</span> <span class="token boolean">true</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>Deflate压缩<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>Deflate压缩<span class="token operator">:</span> <span class="token number">2167</span>Deflate解压缩<span class="token operator">:</span> <span class="token number">3850</span>对象是否相等<span class="token operator">:</span> <span class="token boolean">true</span>Process finished with exit code <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="五、总结"><a href="#五、总结" class="headerlink" title="五、总结"></a>五、总结</h2><p>通过上面几节的学习，对lz4有了大致的了解，它的压缩和解压缩效率是非常好的，压缩比相较于其他压缩工具来讲并不是很突出，其压缩比取决于压缩内容的重复率。</p><p>在压缩场景中，选择合适的压缩工具，各种压缩工具均有其利弊，扬其长、避其短，才能使得我们的工作更有效。</p>]]></content>
      
      
      <categories>
          
          <category> 协议 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> lz4 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
