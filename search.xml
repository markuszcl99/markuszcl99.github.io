<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Spring源码系列文章</title>
      <link href="/spring-yuan-ma-shu-li-xi-lie-wen-zhang.html"/>
      <url>/spring-yuan-ma-shu-li-xi-lie-wen-zhang.html</url>
      
        <content type="html"><![CDATA[<p>spring 系列文章导航</p><a id="more"></a><p>123</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>lz4压缩算法</title>
      <link href="/lz4-ya-suo-suan-fa.html"/>
      <url>/lz4-ya-suo-suan-fa.html</url>
      
        <content type="html"><![CDATA[<p>1</p><a id="more"></a><h2 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h2><p>Lz4压缩算法是由Yann Collet在2011年设计实现的，lz4属于lz77系列的压缩算法。lz77严格意义上来说不是一种算法，而是一种编码理论，它只定义了原理，并没有定义如何实现。基于lz77理论衍生的算法除lz4以外，还有lzss、lzb、lzh等。</p><p>lz4是目前基于综合来看效率最高的压缩算法，更加侧重于压缩解压缩速度，压缩比并不突出，本质上就是时间换空间。</p><p>对于github上给出的lz4性能介绍：每核压缩速度大于500MB/s，多核CPU可叠加；它所提供的解码器也是极其快速的，每核可达GB/s量级。</p><h2 id="二、算法思想"><a href="#二、算法思想" class="headerlink" title="二、算法思想"></a>二、算法思想</h2><p>lz77编码思想：它是一种基于字典的算法，它将长字符串（也可以称为匹配项或者短语）编码成短小的标记，用小标记代替字典中的短语，也就是说，它通过用小的标记来代替数据中多次重复出现的长字符串来达到数据压缩的目的。其处理的符号不一定是文本字符，也可以是其他任意大小的符号。</p><p>短语字典维护：lz77使用的是一个前向缓冲区和一个滑动窗口。它首先将数据载入到前向缓冲区，形成一批短语，再由滑动窗口滑动时，变成字典的一部分。</p><h2 id="三、算法实现"><a href="#三、算法实现" class="headerlink" title="三、算法实现"></a>三、算法实现</h2><blockquote><p>作者没有看过lz4的源码，c语言看起来太费劲了😭，对压缩过程、解压过程是通过一些比较好博客进行了学习，并简单总结了一些。</p><p>有兴趣的同学可以看下：<a href="https://github.com/lz4/lz4" target="_blank" rel="noopener">lz4 GitHub链接</a></p></blockquote><h3 id="1、lz4数据格式"><a href="#1、lz4数据格式" class="headerlink" title="1、lz4数据格式"></a>1、lz4数据格式</h3><blockquote><p>lz4实现了两种格式，分别是lz4_block_format和lz4_frame_format。</p><p>lz4_frame_format用于特殊场景，如file压缩、pipe压缩和流式压缩；这里主要介绍lz4_block_format（一般场景使用格式）</p></blockquote><p>压缩块有多个序列组成，一个序列是由一组字面量(非压缩字节)，后跟一个匹配副本。每个序列以token开始，字面量和匹配副本的长度是有token以及offset决定的。</p><p>literals指没有重复、首次出现的字节流，即不可压缩的部分</p><p>literals length指不可压缩部分的长度</p><p>match length指重复项(可以压缩的部分)长度</p><p>下图为单个序列的数据格式，一个完整的lz4压缩块是由多个序列组成的。</p><p><img src="https://img-blog.csdnimg.cn/c0a574cf4b5949b5b5c84e0512665589.png" alt="\[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-rfxQ7I9q-1654424611351)()\]"></p><h3 id="2、lz4压缩过程"><a href="#2、lz4压缩过程" class="headerlink" title="2、lz4压缩过程"></a>2、lz4压缩过程</h3><p>lz4遵循上面说到的lz77思想理论，通过滑动窗口、hash表、数据编码等操作实现数据压缩。压缩过程以至少4字节为扫描窗口查找匹配，每次移动1字节进行扫描，遇到重复的就进行压缩。</p><blockquote><p>举个例子：给出一个字符串: <code>abcde_fghabcde_ghxxahcde</code>,描述出此字符串的压缩过程</p><p>ps：我们按照6字节扫描窗口，每次1字节来进行扫描</p></blockquote><p><img src="https://img-blog.csdnimg.cn/ea3f539bafe54692be82c83931180f36.png" alt="在这里插入图片描述"></p><ol><li>假设lz4的滑动窗口大小为6字节，扫描窗口为1字节；</li><li>lz4开始扫描，首先对0-5位置做hash运算，hash表中无该值，所以存入hash表；</li><li>向后扫描，开始计算1-6位置hash值，hash表中依然无此值，所以继续将hash值存入hash表；</li><li>扫描过程依次类推，直到图中例子，在计算9-15位置的hash值时，发现hash表中已经存在，则进行压缩，偏移量offset值置为9，重复长度为6，该值存入token值的低4位中；</li><li>匹配压缩项后开始尝试扩大匹配，当窗口扫描到10-16时，发现并没有匹配到，则将此值存入hash表；如果发现hash表中有值，如果符合匹配条件（例如10-15符合1-6）则扩大匹配项，重复长度设为7，调整相应的token值</li><li>这样滑动窗口扫描完所有的字符串之后，结束操作</li></ol><p>最终，这样压缩过程就结束了，得到这样一个字节串[-110, 97, 98, 99, 100, 101, 95, 102, 103, 104, 9, 0, -112, 103, 104, 120, 120, 97, 104, 99, 100, 101]。大家可能在看到这段内容可能有些懵逼，我在解压过程解释一下。</p><h3 id="3、lz4解压过程"><a href="#3、lz4解压过程" class="headerlink" title="3、lz4解压过程"></a>3、lz4解压过程</h3><blockquote><p>lz4压缩串: [-110, 97, 98, 99, 100, 101, 95, 102, 103, 104, 9, 0, -112, 103, 104, 120, 120, 97, 104, 99, 100, 101]</p><p>二进制是字符串经过utf-8编码后的值</p></blockquote><p>下图是对上面压缩串的解释：</p><p><img src="https://img-blog.csdnimg.cn/c2fc5bb2ff6944a7a2c84671d1ec23df.png" alt="\[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-pAz4HBqR-1654424611352)()\]"></p><p>这里简单记录下解压的过程：</p><ol><li>当lz4解压从0开始遍历时，先判断token值(-110)，-110转换为计算机二进制为10010010，高四位1001代表字面量长度为9，低四位0010代表重复项匹配的长度2+4(minimum repeated bytes)</li><li>向后遍历9位，得到长度为9的字符串(abcde_fgh)，偏移量为9，从当前位置向前移动9位则是重复位起始位置，低四位说明重复项长度为6字节，则继续生成长度为6的字符串(abcde_)</li><li>此时生成(abcde_fghabcde_)，接着开始判断下一sequence token起始位，最终生成abcde_fghabcde_ghxxahcde(压缩前的字符串)</li></ol><h2 id="四、Lz4-Java"><a href="#四、Lz4-Java" class="headerlink" title="四、Lz4-Java"></a>四、Lz4-Java</h2><blockquote><p><a href="https://github.com/lz4/lz4-java" target="_blank" rel="noopener">lz4/lz4-java</a>是由Rei Odaira等人写的一套使用lz4压缩的Java类库。</p></blockquote><h3 id="1、简介"><a href="#1、简介" class="headerlink" title="1、简介"></a>1、简介</h3><p>该类库提供了对两种压缩方法的访问，他们都能生成有效的lz4流：</p><ol><li>快速扫描（lz4）<ol><li>内存占用少（16KB）</li><li>非常快</li><li>合理的压缩比（取决于输入的冗余度）</li></ol></li><li>高压缩（lz4hc）<ol><li>内存占用中等（256KB）</li><li>相当慢（比lz4慢10倍）</li><li>良好的压缩比（取决于输入的大小和冗余度）</li></ol></li><li>这两种压缩算法产生的流使用相同的压缩格式，解压缩速度非常快，可以由相同的解压缩实例解压缩</li></ol><h3 id="2、类库"><a href="#2、类库" class="headerlink" title="2、类库"></a>2、类库</h3><blockquote><p>该类库提供了几个关键类，这里简单介绍一下</p></blockquote><h4 id="LZ4Factory"><a href="#LZ4Factory" class="headerlink" title="LZ4Factory"></a>LZ4Factory</h4><p>Lz4 API的入口点，该类有3个实例</p><ol><li>一个native实例，它是与原始LZ4 C实现的JNI绑定</li><li>一个safe Java实例，它是原始C库的纯Java端口（Java 官方编写的API）</li><li>一个unsafe Java实例，它是使用非官方sun.misc.Unsafe API的Java端口（Unsafe类可用来直接访问系统内存资源并进行自主管理，其在提升Java运行效率，增强Java语言底层操作能力方面起到很大的作用，Unsafe可认为是Java中留下的后门，提供了一些低层次操作，如直接内存访问、线程调度等）</li></ol><p>只有safe Java实例才能保证在JVM上工作，因此建议使用fastestInstance()或fastestJavaInstance()来拉取LZ4Factory实例。</p><h4 id="LZ4Compressor"><a href="#LZ4Compressor" class="headerlink" title="LZ4Compressor"></a>LZ4Compressor</h4><p>压缩器有两种，一种是fastCompressor，也就是lz4简介中说的快速扫描压缩器；另一种是highCompressor，是实现高压缩率压缩器(lz4hc)。</p><h4 id="LZ4Decompressor"><a href="#LZ4Decompressor" class="headerlink" title="LZ4Decompressor"></a>LZ4Decompressor</h4><p>lz4-java提供了两个解压器：LZ4FastDecompressor；LZ4SafeDecompressor</p><p>两者不同点在于：LZ4FastDecompressor在解压缩时是已知源字符串长度，而LZ4SafeDecompressor在解压缩时是已知压缩字段的长度</p><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><blockquote><p>上面说到的两个压缩器和两个解压缩器，在压缩和解压缩的时候，是可以互换的，比如说FastCompressor可以和LZ4SafeDecompressor搭配使用这样，因为两种压缩算法生成的流格式是一样的，无论用哪个解压缩器都能解压。</p></blockquote><p>在说完上面基本的类之后，再来看下lz4-Java类库给我们提供流式传输类：LZ4BlockOutputStream(输出流-编码)、LZ4BlockInputStream(输入流-解码)</p><p>下面这段代码是使用示例: </p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>markus<span class="token punctuation">.</span>compress<span class="token punctuation">.</span>utils<span class="token punctuation">;</span><span class="token keyword">import</span> net<span class="token punctuation">.</span>jpountz<span class="token punctuation">.</span>lz4<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>ByteArrayInputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>ByteArrayOutputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>StringReader<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>UnsupportedEncodingException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>charset<span class="token punctuation">.</span>StandardCharsets<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author: markus * @date: 2022/5/22 4:54 下午 * @Description: Lz4压缩工具 * @Blog: http://markuszhang.com/ */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Lz4Utils</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> ARRAY_SIZE <span class="token operator">=</span> <span class="token number">4096</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> LZ4Factory factory <span class="token operator">=</span> LZ4Factory<span class="token punctuation">.</span><span class="token function">fastestInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> LZ4Compressor compressor <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">fastCompressor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> LZ4FastDecompressor decompressor <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">fastDecompressor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> LZ4SafeDecompressor safeDecompressor <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">safeDecompressor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">compress</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>bytes <span class="token operator">==</span> null <span class="token operator">||</span> bytes<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            ByteArrayOutputStream outputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            LZ4BlockOutputStream lz4BlockOutputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LZ4BlockOutputStream</span><span class="token punctuation">(</span>outputStream<span class="token punctuation">,</span> ARRAY_SIZE<span class="token punctuation">,</span> compressor<span class="token punctuation">)</span><span class="token punctuation">;</span>            lz4BlockOutputStream<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">;</span>            lz4BlockOutputStream<span class="token punctuation">.</span><span class="token function">finish</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> outputStream<span class="token punctuation">.</span><span class="token function">toByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Lz4压缩失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">uncompress</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>bytes <span class="token operator">==</span> null <span class="token operator">||</span> bytes<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            ByteArrayOutputStream outputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayOutputStream</span><span class="token punctuation">(</span>ARRAY_SIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>            ByteArrayInputStream inputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayInputStream</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">;</span>            LZ4BlockInputStream decompressedInputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LZ4BlockInputStream</span><span class="token punctuation">(</span>inputStream<span class="token punctuation">,</span> decompressor<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> count<span class="token punctuation">;</span>            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span>ARRAY_SIZE<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>count <span class="token operator">=</span> decompressedInputStream<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                outputStream<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> outputStream<span class="token punctuation">.</span><span class="token function">toByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"lz4解压缩失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> <span class="token string">"abcde_fghabcde_ghxxahcde"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span>StandardCharsets<span class="token punctuation">.</span>UTF_8<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> compress <span class="token operator">=</span> <span class="token function">compress</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> decompress <span class="token operator">=</span> <span class="token function">uncompress</span><span class="token punctuation">(</span>compress<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3、性能对比"><a href="#3、性能对比" class="headerlink" title="3、性能对比"></a>3、性能对比</h3><blockquote><p>在了解完lz4的算法思想、实现思路以及Java类库后，我们可以使用它来和其他压缩类进行一个性能对比</p></blockquote><p>测试源代码：(相关源码可以去我github仓库下载<a href="https://github.com/markuszcl99/compress-algorithm" target="_blank" rel="noopener">仓库链接</a>)</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>markus<span class="token punctuation">.</span>compress<span class="token punctuation">.</span>test<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>markus<span class="token punctuation">.</span>compress<span class="token punctuation">.</span>domain<span class="token punctuation">.</span>User<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>markus<span class="token punctuation">.</span>compress<span class="token punctuation">.</span>service<span class="token punctuation">.</span>UserService<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>markus<span class="token punctuation">.</span>compress<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>openjdk<span class="token punctuation">.</span>jmh<span class="token punctuation">.</span>annotations<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>openjdk<span class="token punctuation">.</span>jmh<span class="token punctuation">.</span>results<span class="token punctuation">.</span>format<span class="token punctuation">.</span>ResultFormatType<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>openjdk<span class="token punctuation">.</span>jmh<span class="token punctuation">.</span>runner<span class="token punctuation">.</span>Runner<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>openjdk<span class="token punctuation">.</span>jmh<span class="token punctuation">.</span>runner<span class="token punctuation">.</span>RunnerException<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>openjdk<span class="token punctuation">.</span>jmh<span class="token punctuation">.</span>runner<span class="token punctuation">.</span>options<span class="token punctuation">.</span>Options<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>openjdk<span class="token punctuation">.</span>jmh<span class="token punctuation">.</span>runner<span class="token punctuation">.</span>options<span class="token punctuation">.</span>OptionsBuilder<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>TimeUnit<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author: markus * @date: 2022/5/22 5:08 下午 * @Description: 压缩工具的性能测试 * @Blog: http://markuszhang.com/ */</span><span class="token annotation punctuation">@BenchmarkMode</span><span class="token punctuation">(</span>Mode<span class="token punctuation">.</span>Throughput<span class="token punctuation">)</span><span class="token annotation punctuation">@OutputTimeUnit</span><span class="token punctuation">(</span>TimeUnit<span class="token punctuation">.</span>MILLISECONDS<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PerformanceTest</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 用来序列化的用户对象     */</span>    <span class="token annotation punctuation">@State</span><span class="token punctuation">(</span>Scope<span class="token punctuation">.</span>Benchmark<span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">CommonState</span> <span class="token punctuation">{</span>        User user<span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> originBytes<span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> lz4CompressBytes<span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> snappyCompressBytes<span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> gzipCompressBytes<span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bzipCompressBytes<span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> deflateCompressBytes<span class="token punctuation">;</span>        <span class="token annotation punctuation">@Setup</span><span class="token punctuation">(</span>Level<span class="token punctuation">.</span>Trial<span class="token punctuation">)</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">prepare</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            UserService userService <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            user <span class="token operator">=</span> userService<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            originBytes <span class="token operator">=</span> ProtostuffUtils<span class="token punctuation">.</span><span class="token function">serialize</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>            lz4CompressBytes <span class="token operator">=</span> Lz4Utils<span class="token punctuation">.</span><span class="token function">compress</span><span class="token punctuation">(</span>originBytes<span class="token punctuation">)</span><span class="token punctuation">;</span>            snappyCompressBytes <span class="token operator">=</span> SnappyUtils<span class="token punctuation">.</span><span class="token function">compress</span><span class="token punctuation">(</span>originBytes<span class="token punctuation">)</span><span class="token punctuation">;</span>            gzipCompressBytes <span class="token operator">=</span> GzipUtils<span class="token punctuation">.</span><span class="token function">compress</span><span class="token punctuation">(</span>originBytes<span class="token punctuation">)</span><span class="token punctuation">;</span>            bzipCompressBytes <span class="token operator">=</span> Bzip2Utils<span class="token punctuation">.</span><span class="token function">compress</span><span class="token punctuation">(</span>originBytes<span class="token punctuation">)</span><span class="token punctuation">;</span>            deflateCompressBytes <span class="token operator">=</span> DeflateUtils<span class="token punctuation">.</span><span class="token function">compress</span><span class="token punctuation">(</span>originBytes<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * Lz4压缩     *     * @param commonState     * @return     */</span>    <span class="token annotation punctuation">@Benchmark</span>    <span class="token keyword">public</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">lz4Compress</span><span class="token punctuation">(</span>CommonState commonState<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> Lz4Utils<span class="token punctuation">.</span><span class="token function">compress</span><span class="token punctuation">(</span>commonState<span class="token punctuation">.</span>originBytes<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * lz4解压缩     *     * @param commonState     */</span>    <span class="token annotation punctuation">@Benchmark</span>    <span class="token keyword">public</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">lz4Uncompress</span><span class="token punctuation">(</span>CommonState commonState<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> Lz4Utils<span class="token punctuation">.</span><span class="token function">uncompress</span><span class="token punctuation">(</span>commonState<span class="token punctuation">.</span>lz4CompressBytes<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * snappy压缩     *     * @param commonState     * @return     */</span>    <span class="token annotation punctuation">@Benchmark</span>    <span class="token keyword">public</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">snappyCompress</span><span class="token punctuation">(</span>CommonState commonState<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> SnappyUtils<span class="token punctuation">.</span><span class="token function">compress</span><span class="token punctuation">(</span>commonState<span class="token punctuation">.</span>originBytes<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * snappy解压缩     *     * @param commonState     * @return     */</span>    <span class="token annotation punctuation">@Benchmark</span>    <span class="token keyword">public</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">snappyUncompress</span><span class="token punctuation">(</span>CommonState commonState<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> SnappyUtils<span class="token punctuation">.</span><span class="token function">uncompress</span><span class="token punctuation">(</span>commonState<span class="token punctuation">.</span>snappyCompressBytes<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * Gzip压缩     *     * @param commonState     * @return     */</span>    <span class="token annotation punctuation">@Benchmark</span>    <span class="token keyword">public</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">gzipCompress</span><span class="token punctuation">(</span>CommonState commonState<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> GzipUtils<span class="token punctuation">.</span><span class="token function">compress</span><span class="token punctuation">(</span>commonState<span class="token punctuation">.</span>originBytes<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * Gzip解压缩     *     * @param commonState     * @return     */</span>    <span class="token annotation punctuation">@Benchmark</span>    <span class="token keyword">public</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">gzipUncompress</span><span class="token punctuation">(</span>CommonState commonState<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> GzipUtils<span class="token punctuation">.</span><span class="token function">uncompress</span><span class="token punctuation">(</span>commonState<span class="token punctuation">.</span>gzipCompressBytes<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * bzip2压缩     *     * @param commonState     * @return     */</span>    <span class="token annotation punctuation">@Benchmark</span>    <span class="token keyword">public</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">bzip2Compress</span><span class="token punctuation">(</span>CommonState commonState<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> Bzip2Utils<span class="token punctuation">.</span><span class="token function">compress</span><span class="token punctuation">(</span>commonState<span class="token punctuation">.</span>originBytes<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * bzip2压缩     *     * @param commonState     * @return     */</span>    <span class="token annotation punctuation">@Benchmark</span>    <span class="token keyword">public</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">bzip2Uncompress</span><span class="token punctuation">(</span>CommonState commonState<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> Bzip2Utils<span class="token punctuation">.</span><span class="token function">uncompress</span><span class="token punctuation">(</span>commonState<span class="token punctuation">.</span>bzipCompressBytes<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * bzip2压缩     *     * @param commonState     * @return     */</span>    <span class="token annotation punctuation">@Benchmark</span>    <span class="token keyword">public</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">deflateCompress</span><span class="token punctuation">(</span>CommonState commonState<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> DeflateUtils<span class="token punctuation">.</span><span class="token function">compress</span><span class="token punctuation">(</span>commonState<span class="token punctuation">.</span>originBytes<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * bzip2压缩     *     * @param commonState     * @return     */</span>    <span class="token annotation punctuation">@Benchmark</span>    <span class="token keyword">public</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">deflateUncompress</span><span class="token punctuation">(</span>CommonState commonState<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> DeflateUtils<span class="token punctuation">.</span><span class="token function">uncompress</span><span class="token punctuation">(</span>commonState<span class="token punctuation">.</span>deflateCompressBytes<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> RunnerException <span class="token punctuation">{</span>        Options opt <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OptionsBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">include</span><span class="token punctuation">(</span>PerformanceTest<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">forks</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">threads</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">warmupIterations</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">measurementIterations</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">result</span><span class="token punctuation">(</span><span class="token string">"PerformanceTest.json"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">resultFormat</span><span class="token punctuation">(</span>ResultFormatType<span class="token punctuation">.</span>JSON<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Runner</span><span class="token punctuation">(</span>opt<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>性能测试图：</p><blockquote><p>附上lz4官网给出的性能测试图和自己测试的性能图，有些差异，有可能对于压缩数据的不同导致的差异。</p></blockquote><p>官网给的：<br><img src="https://img-blog.csdnimg.cn/3ab78b87569340abab7c099f27cbda42.png" alt="\[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-EkH9HlDH-1654424611352)(http://cdn.markuszhang.com/img/image-20220605180709948.png)\]"><br>自己测得：<br><img src="https://img-blog.csdnimg.cn/961be61360584d669591c2ad3ff2bc61.png" alt="\[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-m4EQ9VB4-1654424611353)(http://cdn.markuszhang.com/img/image-20220605180406885.png)\]"></p><p>在公司对于特征内容的压缩，观察lz4和snappy的对比，看上去lz4和snappy的压缩和解压缩的性能差不多，但lz4更稳定些，尖刺场景少。由于设计公司内部内容，就不粘图了。</p><h3 id="4、压缩率对比"><a href="#4、压缩率对比" class="headerlink" title="4、压缩率对比"></a>4、压缩率对比</h3><blockquote><p>在压缩率上，按照从高到低是：bzip2 &gt; Deflate &gt; Gzip &gt; lz4 &gt; snappy</p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>markus<span class="token punctuation">.</span>compress<span class="token punctuation">.</span>demo<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>fastjson<span class="token punctuation">.</span>JSONObject<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>markus<span class="token punctuation">.</span>compress<span class="token punctuation">.</span>domain<span class="token punctuation">.</span>User<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>markus<span class="token punctuation">.</span>compress<span class="token punctuation">.</span>service<span class="token punctuation">.</span>UserService<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>markus<span class="token punctuation">.</span>compress<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>charset<span class="token punctuation">.</span>StandardCharsets<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author: markus * @date: 2022/5/22 3:52 下午 * @Description: 压缩字节示例 * @Blog: http://markuszhang.com/ */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CompressDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        User user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// json序列化</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> origin_json <span class="token operator">=</span> JSONObject<span class="token punctuation">.</span><span class="token function">toJSONBytes</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"原始json字节数: "</span> <span class="token operator">+</span> origin_json<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// pb序列化</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> origin <span class="token operator">=</span> ProtostuffUtils<span class="token punctuation">.</span><span class="token function">serialize</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"原始pb字节数: "</span> <span class="token operator">+</span> origin<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">testGzip</span><span class="token punctuation">(</span>origin<span class="token punctuation">,</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">testSnappy</span><span class="token punctuation">(</span>origin<span class="token punctuation">,</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">testLz4</span><span class="token punctuation">(</span>origin<span class="token punctuation">,</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">testBzip2</span><span class="token punctuation">(</span>origin<span class="token punctuation">,</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">testDeflate</span><span class="token punctuation">(</span>origin<span class="token punctuation">,</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"--------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String str <span class="token operator">=</span> <span class="token function">getString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> source <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span>StandardCharsets<span class="token punctuation">.</span>UTF_8<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> compress <span class="token operator">=</span> Lz4Utils<span class="token punctuation">.</span><span class="token function">compress</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 将compress转为字符串</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">translateString</span><span class="token punctuation">(</span>compress<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"--------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String str2 <span class="token operator">=</span> <span class="token function">getString2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> source2 <span class="token operator">=</span> str2<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span>StandardCharsets<span class="token punctuation">.</span>UTF_8<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> compress2 <span class="token operator">=</span> Lz4Utils<span class="token punctuation">.</span><span class="token function">compress</span><span class="token punctuation">(</span>source2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> uncompress <span class="token operator">=</span> Lz4Utils<span class="token punctuation">.</span><span class="token function">uncompress</span><span class="token punctuation">(</span>compress2<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> String <span class="token function">translateString</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chars <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">char</span><span class="token punctuation">[</span>bytes<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> chars<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            chars<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> bytes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        String str <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>chars<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> str<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> String <span class="token function">getString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"fghabcde_bcdefgh_abcdefghxxxxxxx"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> String <span class="token function">getString2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"abcde_fghabcde_ghxxahcde"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">testGzip</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> origin<span class="token punctuation">,</span> User user<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"---------------GZIP压缩---------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Gzip压缩</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> gzipCompress <span class="token operator">=</span> GzipUtils<span class="token punctuation">.</span><span class="token function">compress</span><span class="token punctuation">(</span>origin<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Gzip压缩: "</span> <span class="token operator">+</span> gzipCompress<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> gzipUncompress <span class="token operator">=</span> GzipUtils<span class="token punctuation">.</span><span class="token function">uncompress</span><span class="token punctuation">(</span>gzipCompress<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Gzip解压缩: "</span> <span class="token operator">+</span> gzipUncompress<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>        User deUser <span class="token operator">=</span> ProtostuffUtils<span class="token punctuation">.</span><span class="token function">deserialize</span><span class="token punctuation">(</span>gzipUncompress<span class="token punctuation">,</span> User<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"对象是否相等: "</span> <span class="token operator">+</span> user<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>deUser<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">testSnappy</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> origin<span class="token punctuation">,</span> User user<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"---------------Snappy压缩---------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Snappy压缩</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> snappyCompress <span class="token operator">=</span> SnappyUtils<span class="token punctuation">.</span><span class="token function">compress</span><span class="token punctuation">(</span>origin<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Snappy压缩: "</span> <span class="token operator">+</span> snappyCompress<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> snappyUncompress <span class="token operator">=</span> SnappyUtils<span class="token punctuation">.</span><span class="token function">uncompress</span><span class="token punctuation">(</span>snappyCompress<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Snappy解压缩: "</span> <span class="token operator">+</span> snappyUncompress<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>        User deUser <span class="token operator">=</span> ProtostuffUtils<span class="token punctuation">.</span><span class="token function">deserialize</span><span class="token punctuation">(</span>snappyUncompress<span class="token punctuation">,</span> User<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"对象是否相等: "</span> <span class="token operator">+</span> user<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>deUser<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">testLz4</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> origin<span class="token punctuation">,</span> User user<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"---------------Lz4压缩---------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Lz4压缩</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> Lz4Compress <span class="token operator">=</span> Lz4Utils<span class="token punctuation">.</span><span class="token function">compress</span><span class="token punctuation">(</span>origin<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Lz4压缩: "</span> <span class="token operator">+</span> Lz4Compress<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> Lz4Uncompress <span class="token operator">=</span> Lz4Utils<span class="token punctuation">.</span><span class="token function">uncompress</span><span class="token punctuation">(</span>Lz4Compress<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Lz4解压缩: "</span> <span class="token operator">+</span> Lz4Uncompress<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>        User deUser <span class="token operator">=</span> ProtostuffUtils<span class="token punctuation">.</span><span class="token function">deserialize</span><span class="token punctuation">(</span>Lz4Uncompress<span class="token punctuation">,</span> User<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"对象是否相等: "</span> <span class="token operator">+</span> user<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>deUser<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">testBzip2</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> origin<span class="token punctuation">,</span> User user<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"---------------bzip2压缩---------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// bzip2压缩</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bzip2Compress <span class="token operator">=</span> Bzip2Utils<span class="token punctuation">.</span><span class="token function">compress</span><span class="token punctuation">(</span>origin<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"bzip2压缩: "</span> <span class="token operator">+</span> bzip2Compress<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bzip2Uncompress <span class="token operator">=</span> Bzip2Utils<span class="token punctuation">.</span><span class="token function">uncompress</span><span class="token punctuation">(</span>bzip2Compress<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"bzip2解压缩: "</span> <span class="token operator">+</span> bzip2Uncompress<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>        User deUser <span class="token operator">=</span> ProtostuffUtils<span class="token punctuation">.</span><span class="token function">deserialize</span><span class="token punctuation">(</span>bzip2Uncompress<span class="token punctuation">,</span> User<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"对象是否相等: "</span> <span class="token operator">+</span> user<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>deUser<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">testDeflate</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> origin<span class="token punctuation">,</span> User user<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"---------------Deflate压缩---------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Deflate压缩</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> deflateCompress <span class="token operator">=</span> DeflateUtils<span class="token punctuation">.</span><span class="token function">compress</span><span class="token punctuation">(</span>origin<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Deflate压缩: "</span> <span class="token operator">+</span> deflateCompress<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> deflateUncompress <span class="token operator">=</span> DeflateUtils<span class="token punctuation">.</span><span class="token function">uncompress</span><span class="token punctuation">(</span>deflateCompress<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Deflate解压缩: "</span> <span class="token operator">+</span> deflateUncompress<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>        User deUser <span class="token operator">=</span> ProtostuffUtils<span class="token punctuation">.</span><span class="token function">deserialize</span><span class="token punctuation">(</span>deflateUncompress<span class="token punctuation">,</span> User<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"对象是否相等: "</span> <span class="token operator">+</span> user<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>deUser<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java">原始json字节数<span class="token operator">:</span> <span class="token number">5351</span>原始pb字节数<span class="token operator">:</span> <span class="token number">3850</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>GZIP压缩<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>Gzip压缩<span class="token operator">:</span> <span class="token number">2170</span>Gzip解压缩<span class="token operator">:</span> <span class="token number">3850</span>对象是否相等<span class="token operator">:</span> <span class="token boolean">true</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>Snappy压缩<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>Snappy压缩<span class="token operator">:</span> <span class="token number">3396</span>Snappy解压缩<span class="token operator">:</span> <span class="token number">3850</span>对象是否相等<span class="token operator">:</span> <span class="token boolean">true</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>Lz4压缩<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>Lz4压缩<span class="token operator">:</span> <span class="token number">3358</span>Lz4解压缩<span class="token operator">:</span> <span class="token number">3850</span>对象是否相等<span class="token operator">:</span> <span class="token boolean">true</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>bzip2压缩<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>bzip2压缩<span class="token operator">:</span> <span class="token number">2119</span>bzip2解压缩<span class="token operator">:</span> <span class="token number">3850</span>对象是否相等<span class="token operator">:</span> <span class="token boolean">true</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>Deflate压缩<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>Deflate压缩<span class="token operator">:</span> <span class="token number">2167</span>Deflate解压缩<span class="token operator">:</span> <span class="token number">3850</span>对象是否相等<span class="token operator">:</span> <span class="token boolean">true</span>Process finished with exit code <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="五、总结"><a href="#五、总结" class="headerlink" title="五、总结"></a>五、总结</h2><p>通过上面几节的学习，对lz4有了大致的了解，它的压缩和解压缩效率是非常好的，压缩比相较于其他压缩工具来讲并不是很突出，其压缩比取决于压缩内容的重复率。</p><p>在压缩场景中，选择合适的压缩工具，各种压缩工具均有其利弊，扬其长、避其短，才能使得我们的工作更有效。</p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
